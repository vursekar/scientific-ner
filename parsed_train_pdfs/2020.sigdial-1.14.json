{"authors": "Keting Lu; Shiqi Zhang; Peter Stone; Xiaoping Chen; Suny Binghamton; U T Austin", "pub_date": "", "title": "Learning and Reasoning for Robot Dialog and Navigation Tasks", "abstract": "Reinforcement learning and probabilistic reasoning algorithms aim at learning from interaction experiences and reasoning with probabilistic contextual knowledge respectively. In this research, we develop algorithms for robot task completions, while looking into the complementary strengths of reinforcement learning and probabilistic reasoning techniques. The robots learn from trial-and-error experiences to augment their declarative knowledge base, and the augmented knowledge can be used for speeding up the learning process in potentially different tasks. We have implemented and evaluated the developed algorithms using mobile robots conducting dialog and navigation tasks. From the results, we see that our robot's performance can be improved by both reasoning with human knowledge and learning from task-completion experience. More interestingly, the robot was able to learn from navigation tasks to improve its dialog strategies.", "sections": [{"heading": "Introduction", "text": "Knowledge representation and reasoning (KRR) and reinforcement learning (RL) are two important research areas in artificial intelligence (AI) and have been applied to a variety of problems in robotics. On the one hand, KRR research aims to concisely represent knowledge, and robustly draw conclusions with the knowledge (or generate new knowledge). Knowledge in KRR is typically provided by human experts in the form of declarative rules. Although KRR paradigms are strong in representing and reasoning with knowledge in a variety of forms, they are not designed for (and hence not good at) learning from experiences of accomplishing the tasks. On the other hand, RL algorithms enable agents to learn by interacting with an environment, and RL agents are good at learning action policies from trial-and-error experiences toward maximizing long-term rewards un-der uncertainty, but they are ill-equipped to utilize declarative knowledge from human experts. Motivated by the complementary features of KRR and RL, we aim at a framework that integrates both paradigms to enable agents (robots in our case) to simultaneously reason with declarative knowledge and learn by interacting with an environment.\nMost KRR paradigms support the representation and reasoning of knowledge in logical form, e.g., Prolog-style. More recently, researchers have developed hybrid KRR paradigms that support both logical and probabilistic knowledge (Richardson and Domingos, 2006;Bach et al., 2017;Wang et al., 2019). Such logical-probabilistic KRR paradigms can be used for a variety of reasoning tasks. We use P-log (Baral et al., 2009) in this work to represent and reason with both human knowledge and the knowledge from RL. The reasoning results are then used by our robot to compute action policies at runtime.\nReinforcement learning (RL) algorithms can be used to help robots learn action policies from the experience of interacting with the real world (Sutton and Barto, 2018). We use model-based RL in this work, because the learned world model can be used to update the robot's declarative knowledge base and combined with human knowledge.\nTheoretical Contribution: In this paper, we develop a learning and reasoning framework (called KRR-RL) that integrates logical-probabilistic KRR and model-based RL. The KRR component reasons with the qualitative knowledge from humans (e.g., it is difficult for a robot to navigate through a busy area) and the quantitative knowledge from modelbased RL (e.g., a navigation action's success rate in the form of a probability). The hybrid knowledge is then used for computing action policies at runtime by planning with task-oriented partial world models. KRR-RL enables a robot to: i) represent the probabilistic knowledge (i.e., world dynamics) learned from RL in declarative form; ii) unify and reason with both human knowledge and the knowledge from RL; and iii) compute policies at runtime by dynamically constructing task-oriented partial world models.\nApplication Domain: We use a robot delivery domain for demonstration and evaluation purposes, where the robot needs to dialog with people to figure out the delivery task's goal location, and then physically take navigation actions to complete the delivery task Veloso, 2018). A delivery is deemed successful only if both the dialog and navigation subtasks are successfully conducted. We have conducted experiments using a simulated mobile robot, as well as demonstrated the system using a real mobile robot. Results show that the robot is able to learn world dynamics from navigation tasks through model-based RL, and apply the learned knowledge to both navigation tasks (with different goals) and delivery tasks (that require subtasks of navigation and dialog) through logical-probabilistic reasoning. In particular, we observed that the robot is able to adjust its dialog strategy through learning from navigation behaviors.", "n_publication_ref": 6, "n_figure_ref": 0}, {"heading": "Related Work", "text": "Research areas related to this work include integrated logical KRR and RL, relational RL, and integrated KRR and probabilistic planning.\nLogical KRR has previously been integrated with RL. Action knowledge (McDermott et al., 1998;Jiang et al., 2019) has been used to reason about action sequences and help an RL agent explore only the states that can potentially contribute to achieving the ultimate goal (Leonetti et al., 2016). As a result, their agents learn faster by avoiding choosing \"unreasonable\" actions. A similar idea has been applied to domains with nonstationary dynamics (Ferreira et al., 2017). More recently, task planning was used to interact with the high level of a hierarchical RL framework (Yang et al., 2018). The goal shared by these works is to enable RL agents to use knowledge to improve the performance in learning (e.g., to learn faster and/or avoid risky exploration). However, the KRR capabilities of these methods are limited to logical action knowledge. By contrast, we use a logicalprobabilistic KRR paradigm that can directly reason with probabilities learned from RL.\nRelational RL (RRL) combines RL with relational reasoning (D\u017eeroski et al., 2001). Action models have been incorporated into RRL, resulting in a relational temporal difference learning method (Asgharbeygi et al., 2006). Recently, RRL has been deployed for learning affordance relations that forbid the execution of specific actions (Sridharan et al., 2017). These RRL methods, including deep RRL (Zambaldi et al., 2018), exploit structural representations over states and actions in (only) current tasks. In this research, KRR-RL supports the KRR of world factors beyond those in state and action representations, e.g., time in navigation tasks, as detailed in Section 4.2.\nThe research area of integrated KRR and probabilistic planning is related to this research. Logicalprobabilistic reasoning has been used to compute informative priors and world dynamics Amiri et al., 2020) for probabilistic planning. An action language was used to compute a deterministic sequence of actions for robots, where individual actions are then implemented using probabilistic controllers (Sridharan et al., 2019). Recently, human-provided information has been incorporated into belief state representations to guide robot action selection (Chitnis et al., 2018). In comparison to our approach, learning (from reinforcement or not) was not discussed in the abovementioned algorithms.\nFinally, there are a number of robot reasoning and learning architectures (Tenorth and Beetz, 2013;Oh et al., 2015;Hanheide et al., 2017;, which are relatively complex, and support a variety of functionalities. In comparison, we aim at a concise representation for robot KRR and RL capabilities. To the best of our knowledge, this is the first work on a tightly coupled integration of logical-probabilistic KRR with model-based RL.", "n_publication_ref": 15, "n_figure_ref": 0}, {"heading": "Background", "text": "We briefly describe the two most important building blocks of this research, namely model-based RL and hybrid KRR.", "n_publication_ref": 0, "n_figure_ref": 0}, {"heading": "Model-based Reinforcement Learning", "text": "Following the Markov assumption, a Markov decision process (MDP) can be described as a fourtuple S, A, T, R (Puterman, 1994). S defines the state set, where we assume a factored space in this work. A is the action set. T : S \u00d7 A \u00d7 S \u2192 [0, 1] specifies the state transition probabilities. R : S \u00d7 A \u2192 R specifies the rewards. Solving an MDP produces an action policy \u03c0 : s \u2192 a that maps a state to an action to maximize long-term rewards.\nRL methods fall into classes including modelbased and model-free. Model-based RL methods learn a model of the domain by approximating R(s, a) and P(s |s, a) for state-action pairs, where P represents the probabilistic transition system. An agent can then use planning methods to calculate an action policy (Sutton, 1990;Kocsis and Szepesv\u00e1ri, 2006). Model-based methods are particularly attractive in this work, because they output partial world models that can better accommodate the diversity of tasks we are concerned with, c.f., modelfree RL that is typically goal-directed.\nOne of the best known examples of model-based RL is R- Max (Brafman and Tennenholtz, 2002), which is guaranteed to learn a near-optimal policy with a polynomial number of suboptimal (exploratory) actions. The algorithm classifies each state-action pair as known or unknown, according to the number of times it was visited. When planning on the model, known state-actions are modeled with the learned reward, while unknown stateactions are given the maximum one-step reward, R max . This \"maximum-reward\" strategy automatically enables the agent to balance the exploration of unknown states and exploitation. We use R-Max in this work, though KRR-RL practitioners can use supervised machine learning methods, e.g., imitation learning (Osa et al., 2018), to build the model learning component.", "n_publication_ref": 5, "n_figure_ref": 0}, {"heading": "Logical Probabilistic KRR", "text": "KRR paradigms are concerned with concisely representing and robustly reasoning with declarative knowledge. Answer set programming (ASP) is a non-monotonic logical KRR paradigm (Baral, 2010;Gelfond and Kahl, 2014) building on the stable model semantics (Gelfond and Lifschitz, 1988). An ASP program consists of a set of logical rules, in the form of \"head :-body\", that read \"head is true if body is true\". Each ASP rule is of the form: where a...f are literals that correspond to true or false statements. Symbol not is a logical connective called default negation; not l is read as \"it is not believed that l is true\", which does not imply that l is false. ASP has a variety of applications (Erdem et al., 2016). Traditionally, ASP does not explicitly quantify degrees of uncertainty: a literal is either true, false or unknown. P-log extends ASP to allow probability atoms (or pr-atoms) (Baral et al., 2009;Balai and Gelfond, 2017). The following pr-atom states that, if B holds, the probability of a(t)=y is v:\npr(a(t)=y|B)=v.\nwhere B is a collection of literals or their default negations; a is a random variable; t is a vector of terms (a term is a constant or a variable); y is a term; and v \u2208 [0, 1]. Reasoning with an ASP program generates a set of possible worlds:\n{W 0 ,W 1 , \u2022 \u2022 \u2022 }.\nThe pr-atoms in P-log enable calculating a probability for each possible world. Therefore, P-log is a KRR paradigm that supports both logical and probabilistic inferences. We use P-log in this work for KRR purposes.", "n_publication_ref": 6, "n_figure_ref": 0}, {"heading": "KRR-RL Framework", "text": "KRR-RL integrates logical-probabilistic KRR and model-based RL, and is illustrated in Figure 1. The KRR component includes both declarative qualitative knowledge from humans and the probabilistic knowledge from model-based RL. When the robot is free, the robot arbitrarily selects goals (different navigation goals in our case) to work on, and learns the world dynamics, e.g., success rates and costs of navigation actions. When a task becomes available, the KRR component dynamically constructs a partial world model (excluding unrelated factors), on which a task-oriented controller is computed using planning algorithms. Human knowledge concerns environment variables and their dependencies, i.e., what variables are related to each action. For instance, the human provides knowledge that navigation actions' success rates depend on current time and area (say elevator areas are busy in the mornings), while the robot must learn specific probabilities by interacting with the environment.\nWhy is KRR-RL needed? Consider an indoor robot navigation domain, where a robot wants to maximize the success rate of moving to goal positions through navigation actions. Shall we include factors, such as time, weather, positions of human walkers, etc, into the state space? On the one hand, to ensure model completeness, the answer should be \"yes\". Human walkers and sunlight (that blinds robot's LiDAR sensors) reduce the success rates of the robot's navigation actions, and both can cause the robot irrecoverably lost. On the other hand, to ensure computational feasibility, the answer is \"no\". Modeling whether one specific grid cell being occupied by humans or not introduces one extra dimension in the state space, and doubles the state space size. If we consider (only) ten such grid cells, the state space becomes 2 10 \u2248 1000 times bigger. As a result, RL practitioners frequently have to make a trade-off between model completeness and computational feasibility. In this work, we aim at a framework that retains both model scalability and computational feasibility, i.e., the agent is able to learn within relatively little memory while computing action policies accounting for a large number of domain variables.", "n_publication_ref": 0, "n_figure_ref": 1}, {"heading": "A General Procedure", "text": "In factored spaces, state variables V = {V 0 ,V 1 , ...,V n\u22121 } can be split into two categories, namely endogenous variables V en and exogenous variables V ex (Chermack, 2004), where V en = {V en 0 ,V en 1 , ...,V en p\u22121 } and V ex = {V ex 0 ,V ex 1 , ...,V ex q\u22121 }. In our integrated KRR-RL context, V en is goal-oriented and includes the variables whose values the robot wants to actively change so as to achieve the goal; and V ex corresponds to the variables whose values affect the robot's action outcomes, but the robot cannot (or does not want to) change their values. Therefore, V en and V ex both depend on task \u03c4. Continuing the navigation example, robot position is an endogenous variable, and current time is an exogenous variable. For each task, V = V en \u222a V ex and n = p + q, and RL agents learn in spaces specified by V en .\nThe KRR component models V , their dependencies from human knowledge, and conditional probabilities on how actions change their values, as learned through model-based RL. When a task arrives, the KRR component uses probabilistic rules to generate a task-oriented Markov decision process (MDP) (Puterman, 1994), which only contains a subset of V that are relevant to the current task, Procedure 1 Learning in KRR-RL Framework Require: Logical rules \u03a0 L ; probabilistic rules \u03a0 P ; random variables V = {V 0 ,V 1 , ...,V n\u22121 }; task selector \u2206; and guidance functions (from human knowledge) of f V (V, \u03c4) and f A (\u03c4) 1: while Robot has no task do 2:\n\u03c4 \u2190 \u2206(): a task is heuristically selected 3:\nV en \u2190 f V (V, \u03c4), and V ex \u2190 V \\ V en 4:\nA \u2190 f A (\u03c4) 5: M \u2190 Procedure-2(\u03a0 L , \u03a0 P , V en , V ex , A) 6:\nInitialize agent: agent \u2190 R-Max(M) 7:\nRL agent repeatedly works on task \u03c4, and keeps maintaining task model M , until policy convergence 8: end while 9: Use M to update \u03a0 P i.e., V en , and their transition probabilities. Given this task-oriented MDP, a corresponding action policy is computed using value iteration or policy iteration.\nProcedures 1 and 2 focus on how our KRR-RL agent learns by interacting with an environment when there is no task assigned. 1 Next, we present the details of these two interleaved processes.\nProcedure 1 includes the steps of the learning process. When the robot is free, it interacts with the environment by heuristically selecting a task 2 , and repeatedly using a model-based RL approach, R-Max (Brafman and Tennenholtz, 2002) in our case, to complete the task. The two guidance functions come from human knowledge. For instance, given a navigation task, it comes from human knowledge that the robot should model its own position (specified by f V ) and actions that help the robot move between positions (specified by f A ). After the policy converges or this learning process is interrupted (e.g., by task arrivals), the robot uses the learned probabilities to update the corresponding world dynamics in KRR. For instance, the robot may have learned the probability and cost of navigating through a particular area in early morning. In case this learning process is interrupted, the sofar-\"known\" probabilities are used for knowledge base update.\nProcedure 2 includes the steps for building the probabilistic transition system of MDPs. The key point is that we consider only endogenous variables in the task-specific state space. However, when 1 As soon as the robot's learning process is interrupted by the arrival of a real service task (identified via dialog), it will call Procedure 2 to generate a controller to complete the task. This process is not included in the procedures.\n2 Here curriculum learning in RL (Narvekar et al., 2017) can play a role to task selection and we leave this aspect of the problem for future work. Figure 2: Transition system specified for delivery tasks, where question-asking actions are used for estimating the service request in dialog. Once the robot becomes confident about the service request, it starts to work on the navigation subtask. After the robot arrives, the robot might have to come back to the dialog subtask and redeliver, depending on whether the service request was correctly identified.\nreasoning to compute the transition probabilities (Line 5), the KRR component uses both \u03a0 P and V ex . The computed probabilistic transition systems are used for building task-oriented controllers, i.e., \u03c0, for task completions. In this way, the dynamically constructed controllers do not directly include exogenous variables, but their parameters already account for the values of all variables.\nNext, we demonstrate how our KRR-RL framework is instantiated on a real robot.", "n_publication_ref": 4, "n_figure_ref": 0}, {"heading": "An Instantiation on a Mobile Robot", "text": "We consider a mobile service robot domain where a robot can do navigation, dialog, and delivery tasks. A navigation task requires the robot to use a sequence of (unreliable) navigation actions to move from one point to another. In a dialog task, the robot uses spoken dialog actions to specify service requests from people under imperfect language understanding. There is the trend of integrating language and navigation in the NLP and CV communities (Chen et al., 2019;Shridhar et al., 2020). In this paper, they are integrated into delivery tasks that require the robot to use dialog to figure out the delivery request and conduct navigation tasks to physically fulfill the request. Specifically, a delivery task requires the robot to deliver item I to room R for person P, resulting in services in the form of <I,R,P>. The challenges come from unreliable human language understanding (e.g., speech recognition) and unforeseen obstacles that probabilistically block the robot in navigation.", "n_publication_ref": 2, "n_figure_ref": 0}, {"heading": "Human-Robot Dialog", "text": "The robot needs spoken dialog to identify the request under unreliable language understanding, and navigation controllers for physically making the delivery.\nThe service request is not directly observable to the robot, and has to be estimated by asking questions, such as \"What item do you want?\" and \"Is Procedure 2 Model Construction for Task Completion Require: \u03a0 L ; \u03a0 P ; V en ; V ex ; Action set A 1:\nfor V i \u2208 V en , i in [0, \u2022 \u2022 \u2022 , |V en |\u22121] do 2:\nfor each possible value v in range(V i ) do 3:\nfor each a \u2208 A do 4:\nfor each possible value v in range(V i ) do 5:\nM(v |a, v) \u2190 Reason with \u03a0 L and \u03a0 P w.r.t V ex 6: end for 7:\nend for 8:\nend for 9: end for 10: return M this delivery for Alice?\" Once the robot is confident about the request, it takes a delivery action (i.e., serve(I,R,P)). We follow a standard way to use partially observable MDPs (POMDPs) (Kaelbling et al., 1998) to build our dialog manager, as reviewed in (Young et al., 2013). The state set S is specified using curr s. The action set A is specified using serve and question-asking actions. Question-asking actions do not change the current state, and delivery actions lead to one of the terminal states (success or failure). 3 After the robot becomes confident about the request via dialog, it will take a delivery action serve{I,R,P}. This delivery action is then implemented with a sequence of act move actions. When the request identification is incorrect, the robot needs to come back to the shop, figure out the correct request, and redeliver, where we assume the robot will correctly identify the request in the second dialog. We use an MDP to model this robot navigation task, where the states and actions are specified using sorts cell and move. We use pr-atoms to represent the success rates of the unreliable movements, which are learned through model-based RL. The dialog system builds on our previous work (Lu et al., 2017). Figure 2 shows the probabilistic transitions in delivery tasks.", "n_publication_ref": 4, "n_figure_ref": 1}, {"heading": "Learning from Navigation", "text": "We use R-Max (Brafman and Tennenholtz, 2002), a model-based RL algorithm, to help our robot learn the success rate of navigation actions in different positions. The agent first initializes an MDP, from which it uses R-Max to learn the partial world model (of navigation tasks). Specifically, it initializes the transition function with T N (s, a, s v ) = 1.0, where s \u2208 S and a \u2208 A, meaning that starting from any state, after any action, the next state is always s v . The reward function is initialized with R(s, a) = R max , where R max is an upper bound of reward. The initialization of T N and R enables the learner to automatically balance exploration and exploitation. There is a fixed small cost for each navigation action. The robot receives a big bonus if it successfully achieves the goal (R max ), whereas it receives a big penalty otherwise (\u2212R max ). A transition probability in navigation, T N (s, a, s ), is not computed until there are a minimum number (M) of transition samples visiting s . We recompute the action policy after E action steps.", "n_publication_ref": 0, "n_figure_ref": 0}, {"heading": "Dialog-Navigation Connection", "text": "The update of knowledge base is achieved through updating the success rate of delivery actions serve(I,R,P) (in dialog task) using the success rate of navigation actions act move=M in different positions.\nT D (s r , a d , s t ) = P N (s sp , s gl ), if s r a d P N (s sp , s mi )\u00d7P N (s mi , s sp )\u00d7P N (s sp , s gl ), if s r \u2297 a d\nwhere T D (s r , a d , s t ) is the probability of fulfilling request s r using delivery action a d ; s t is the \"success\" terminal state; s sp , s mi and s gl are states of the robot being in the shop, a misidentified goal position, and real goal position respectively; and P N (s, s ) is the probability of the robot successfully navigating from s to s positions. When s r and a d are aligned in all three dimensions (i.e., s r a d ), the robot needs to navigate once from the shop (s sp ) to the requested navigation goal (s gl ). P N (s sp , s gl ) is the probability of the corresponding navigation task. When the request and delivery action are not aligned in at least one dimension (i.e., s r \u2297 a d ), the robot has to navigate back to the shop to figure out the correct request, and then redeliver, resulting in three navigation tasks. Intuitively, the penalty of failures in a dialog subtask depends on the difficulty of the wrongly identified navigation subtask. For instance, a robot supposed to deliver to a near (distant) location being wrongly directed to a distant (near) location, due to a failure in the dialog subtask, will produce a higher (lower) penalty to the dialog agent.", "n_publication_ref": 0, "n_figure_ref": 0}, {"heading": "Experiments", "text": "In this section, the goal is to evaluate our hypothesis that our KRR-RL framework enables a robot to learn from model-based RL, reason with both the learned knowledge and human knowledge, and dynamically construct task-oriented controllers. Specifically, our robot learns from navigation tasks, and applied the learned knowledge (through KRR) to navigation, dialog, and delivery tasks.\nWe also evaluated whether the learned knowledge can be represented and applied to tasks under different world settings. In addition to simulation experiments, we have used a real robot to demonstrate how our robot learns from navigation to perform better in dialog. Figure 3 shows the map of the working environment (generated using a real robot) used in both simulation and real-robot experiments. Human walkers in the blocking areas (\"BA\") can probabilistically impede the robot, resulting in different success rates in navigation tasks.\nWe have implemented our KRR-RL framework on a mobile robot in an office environment. As shown in Figure 3, the robot is equipped with two Lidar sensors for localization and obstacle avoidance in navigation, and a Kinect RGB-D camera for human-robot interaction. We use the Speech Application Programming Interface (SAPI) package (http://www.iflytek.com/en) for speech recognition. The robot software runs in the Robot Operating System (ROS) (Quigley et al., 2009). (e) Robot was on the way to the kitchen to pick up the object; and (f) Robot arrived at the kitchen, and was going to pick up the object for delivery.\nAn Illustrative Trial on a Robot: Figure 4 shows the screenshots of milestones of a demo video, which will be made available given its acceptance. After hearing \"a coke for Bob to office2\", the three sub-beliefs are updated (turn1). Since the robot is aware of its unreliable speech recognition, it asked about the item, \"Which item is it?\" After hearing \"a coke\", the belief is updated (turn2), and the robot further confirmed on the item by asking \"Should I deliver a coke?\" It received a positive response (turn3), and decided to move on to ask about the delivery room: \"Should I deliver to office 2?\" After this question, the robot did not further confirm the delivery room, because it learned through model-based RL that navigating to office2 is relatively easy and it decided that it is more worth risking an error and having to replan than it is to ask the person another question. The robot became confident in three dimensions of the service request (<coke,Bob,office2> in turn4) without asking about person, because of the prior knowledge (encoded in P-log) about Bob's office.\nFigure 5 shows the belief changes (in the di-mensions of item, person, and room) as the robot interacts with a human user. The robot started with a uniform distribution in all three categories. It should be noted that, although the marginal distributions are uniform, the joint belief distribution is not, as the robot has prior knowledge such as Bob's office is office2 and people prefer deliveries to their own offices. Demo video is not included to respect the anonymous review process.", "n_publication_ref": 1, "n_figure_ref": 4}, {"heading": "Learning to Navigate from Navigation Tasks", "text": "In this experiment, the robot learns in the shop-room1 navigation task, and extracts the learned partial world model to the shop-room2 task.\nIt should be noted that navigation from shop to room2 requires traveling in areas that are unnecessary in the shop-room1 task. Figure 6 presents the results, where each data points corresponds to an average of 1000 trials. Each episode allows at most 200 (300) steps in small (large) domain. The curves are smoothed using a window of 10 episodes. The results suggest that with knowledge extraction (the dashed line) the robot learns faster than without extraction, and this performance improvement is more significant in a larger domain (the Right subfigure).\nLearning to Dialog and Navigate from Navigation Tasks Robot delivering objects requires both tasks: dialog management for specifying service request (under unreliable speech recognition) and navigation for physically delivering objects (under unforeseen obstacles). Our office domain includes five rooms, two persons, and three items, resulting in 30 possible service requests. In the dialog manager, the reward function gives delivery actions a big bonus (80) if a request is fulfilled, and a big penalty (-80) otherwise.\nGeneral questions and confirming questions cost 2.0 and 1.5 respectively. In case a dialog does not end after 20 turns, the robot is forced to work on the most likely delivery. The cost/bonus/penalty values are heuristically set in this work, following guidelines based on studies from the literature on dialog agent behaviors (Zhang and Stone, 2015).  Table 1 reports the robot's overall performance in delivery tasks, which requires accurate dialog for identifying delivery tasks and safe navigation for object delivery. We conduct 10,000 simulation trials under each blocking rate. Without learning from RL, the robot uses a world model (outdated) that was learned under br = 0.3. With learning, the robot updates its world model in domains with different blocking rates. We can see, when learning is enabled, our KRR-RL framework produces higher overall reward, higher request fulfillment rate, and lower question-asking cost. The improvement is statistically significant, i.e., the p\u2212values are 0.028, 0.035, and 0.049 for overall reward, when br is 0.1, 0.5, and 0.7 respectively (100 randomly selected trials with/without extraction).\nLearning to Adjust Dialog Strategies from Navigation In the last experiment, we quantify the information collected in dialog in terms of entropy reduction. The hypothesis is that, using our KRR-RL framework, the dialog manager wants to collect more information before physically working on more challenging tasks. In each trial, we randomly generate a belief distribution over all possible service requests, evaluate the entropy of this belief, and record the suggested action given this belief.\nWe then statistically analyze the entropy values of beliefs, under which delivery actions are suggested. Table 2 shows that, when br grows from 0.1 to 0.7, the means of belief entropy decreases (i.e., belief is more converged). This suggests that the robot collected more information in dialog in environments that are more challenging for navigation, which is consistent with Table 1 in the main paper. Comparing the three columns of results, we find the robot collects the most information before it delivers to room5. This is because such delivery tasks are the most difficult due to the location of room5. The results support our hypothesis that learning from navigation tasks enables the robot to adjust its information gathering strategy in dialog given tasks of different difficulties.", "n_publication_ref": 1, "n_figure_ref": 1}, {"heading": "Adaptive Control in New Circumstances", "text": "The knowledge learned through model-based RL is contributed to a knowledge base that can be used for many tasks. So our KRR-RL framework enables a robot to dynamically generate partial world models for tasks under settings that were never experienced. For example, an agent does not know the current time is morning or noon, there are two possible values for variable \"time\". Consider that our agent has learned world dynamics under the times of morning and noon. Our KRR-RL framework enables the robot to reason about the two transition systems under the two settings and generate a new transition system for this \"morning-or-noon\" setting. Without our framework, an agent would have to randomly select one between the \"morning\" and \"noon\" policies.\nTo evaluate our policies dynamically constructed via KRR, we let an agent learn three controllers under three different environment settings -the navigation actions have decreasing success rates under the settings. In this experiment, the robot does not know which setting it is in (out of two that are randomly selected). The baseline does not have the KRR capability of merging knowledge learned from different settings, and can only randomly select a policy from the two (each corresponding to a setting). Experimental results show that the baseline agent achieved an average of 26.8% success rate in navigation tasks, whereas our KRR-RL agent achieved 83.8% success rate on average. Figure 7 shows the costs in a box plot (including min-max, 25%, and 75% values). Thus, KRR-RL enables a robot to effectively apply the learned knowledge to tasks under new settings.\nLet us take a closer look at the \"time\" variable T . If T is the domain of T , the RL-only baseline has to compute a total of 2 |T | world models to account for all possible information about the value of T , where 2 |T | is the number of subsets of T . If there are N such variables, the number of world models grows exponentially to 2 |T |\u2022N . In comparison, the KRR-RL agent needs to compute only |T | N world models, which dramatically reduces the number of parameters that must be learned through RL while retaining policy quality.", "n_publication_ref": 0, "n_figure_ref": 1}, {"heading": "Conclusions and Future Work", "text": "We develop a KRR-RL framework that integrates computational paradigms of logical-probabilistic knowledge representation and reasoning (KRR), and model-based reinforcement learning (RL). Our KRR-RL agent learns world dynamics via modelbased RL, and then incorporates the learned dynamics into the logical-probabilistic reasoning module, which is used for dynamic construction of efficient run-time task-specific planning models. Experiments were conducted using a mobile robot (simulated and physical) working on delivery tasks that involve both navigation and dialog. Results suggested that the learned knowledge from RL can be represented and used for reasoning by the KRR component, enabling the robot to dynamically generate task-oriented action policies.\nThe integration of a KRR paradigm and modelbased RL paves the way for at least the following research directions. We plan to study how to sequence source tasks to help the robot perform the best in the target task (i.e., a curriculum learning problem within the RL context (Narvekar et al., 2017)). Balancing the efficiencies between service task completion and RL is another topic for further study -currently the robot optimizes for task completions (without considering the potential knowledge learned in this process) once a task becomes available. Fundamentally, all domain variables are endogenous, because one can hardly find variables whose values are completely independent from robot actions. However, for practical reasons (such as limited computational resources), people have to limit the number of endogenous. It remains an open question of how to decide what variables should be considered as being endogenous.", "n_publication_ref": 1, "n_figure_ref": 0}, {"heading": "Acknowledgments", "text": "", "n_publication_ref": 0, "n_figure_ref": 0}], "references": [{"title": "Learning and reasoning for robot sequential decision making under uncertainty", "journal": "", "year": "2020", "authors": "Saeid Amiri; Mohammad Shokrolah Shirazi; Shiqi Zhang"}, {"title": "Relational temporal difference learning", "journal": "", "year": "2006", "authors": "Nima Asgharbeygi; David Stracuzzi; Pat Langley"}, {"title": "Hinge-loss markov random fields and probabilistic soft logic", "journal": "JMLR", "year": "2017", "authors": "H Stephen; Matthias Bach; Bert Broecheler; Lise Huang;  Getoor"}, {"title": "Refining and generalizing p-log: Preliminary report", "journal": "", "year": "2017", "authors": "Evgenii Balai; Michael Gelfond"}, {"title": "Knowledge Representation, Reasoning and Declarative Problem Solving", "journal": "Cambridge University Press", "year": "2010", "authors": "Chitta Baral"}, {"title": "Probabilistic reasoning with answer sets. Theory and Practice of Logic Programming", "journal": "", "year": "2009", "authors": "Chitta Baral; Michael Gelfond; Nelson Rushton"}, {"title": "Rmax-a general polynomial time algorithm for nearoptimal reinforcement learning", "journal": "JMLR", "year": "2002", "authors": "I Ronen; Moshe Brafman;  Tennenholtz"}, {"title": "Touchdown: Natural language navigation and spatial reasoning in visual street environments", "journal": "", "year": "2019", "authors": "Howard Chen; Alane Suhr; Dipendra Misra; Noah Snavely; Yoav Artzi"}, {"title": "Improving decisionmaking with scenario planning", "journal": "Futures", "year": "2004", "authors": "J Thomas;  Chermack"}, {"title": "Integrating human-provided information into belief state representation using dynamic factorization", "journal": "", "year": "2018", "authors": "Rohan Chitnis; Leslie Pack Kaelbling; Tom\u00e1s Lozano-P\u00e9rez"}, {"title": "Relational reinforcement learning", "journal": "Machine learning", "year": "2001", "authors": "Sa\u0161o D\u017eeroski; Kurt Luc De Raedt;  Driessens"}, {"title": "Applications of answer set programming", "journal": "AI Magazine", "year": "2016", "authors": "Esra Erdem; Michael Gelfond; Nicola Leone"}, {"title": "Answer set programming for non-stationary markov decision processes", "journal": "Applied Intelligence", "year": "2017", "authors": "A Leonardo;  Ferreira; A C Reinaldo; Paulo E Bianchi; Ramon Santos;  Lopez De Mantaras"}, {"title": "Knowledge Representation, Reasoning, and the Design of Intelligent Agents: The Answer-Set Programming Approach", "journal": "Cambridge University Press", "year": "2014", "authors": "Michael Gelfond; Yulia Kahl"}, {"title": "The Stable Model Semantics for Logic Programming", "journal": "", "year": "1988", "authors": "Michael Gelfond; Vladimir Lifschitz"}, {"title": "Robot task planning and explanation in open and uncertain worlds", "journal": "Artificial Intelligence", "year": "2017", "authors": "Marc Hanheide; Moritz G\u00f6belbecker; S Graham;  Horn"}, {"title": "Task planning in robotics: an empirical comparison of pddl-and asp-based systems", "journal": "Frontiers of Information Technology & Electronic Engineering", "year": "2019", "authors": "Yuqian Jiang; Shiqi Zhang; Piyush Khandelwal; Peter Stone"}, {"title": "Planning and acting in partially observable stochastic domains", "journal": "Artificial Intelligence", "year": "1998", "authors": "Leslie Pack Kaelbling; Anthony R Michael L Littman;  Cassandra"}, {"title": "Bwibots: A platform for bridging the gap between ai and humanrobot interaction research", "journal": "The International Journal of Robotics Research", "year": "2017", "authors": "Piyush Khandelwal; Shiqi Zhang; Jivko Sinapov"}, {"title": "Bandit based monte-carlo planning", "journal": "Springer", "year": "2006", "authors": "Levente Kocsis; Csaba Szepesv\u00e1ri"}, {"title": "A synthesis of automated planning and reinforcement learning for efficient, robust decision-making. Artificial Intelligence", "journal": "", "year": "2016", "authors": "Matteo Leonetti; Luca Iocchi; Peter Stone"}, {"title": "Leveraging commonsense reasoning and multimodal perception for robot spoken dialog systems", "journal": "IEEE", "year": "2017", "authors": "Dongcai Lu; Shiqi Zhang; Peter Stone; Xiaoping Chen"}, {"title": "", "journal": "", "year": "1998", "authors": "Drew Mcdermott; Malik Ghallab; Adele Howe; Craig Knoblock; Ashwin Ram; Manuela Veloso; Daniel Weld; David Wilkins"}, {"title": "Autonomous task sequencing for customized curriculum design in reinforcement learning", "journal": "", "year": "2017", "authors": "Sanmit Narvekar; Jivko Sinapov; Peter Stone"}, {"title": "Toward mobile robots reasoning like humans", "journal": "", "year": "2015", "authors": "Jean Oh; Arne Supp\u00e9; Felix Duvallet; Abdeslam Boularias; Luis Navarro-Serment; Martial Hebert; Anthony Stentz; Jerry Vinokurov; Oscar Romero; Christian Lebiere"}, {"title": "An algorithmic perspective on imitation learning", "journal": "Foundations and Trends in Robotics", "year": "2018", "authors": "Takayuki Osa; Joni Pajarinen; Gerhard Neumann; Andrew Bagnell; Pieter Abbeel; Jan Peters"}, {"title": "Markov decision processes: discrete stochastic dynamic programming", "journal": "John Wiley & Sons", "year": "1994", "authors": " Martin L Puterman"}, {"title": "Ros: an open-source robot operating system", "journal": "", "year": "2009", "authors": "Morgan Quigley; Ken Conley; Brian Gerkey; Josh Faust; Tully Foote; Jeremy Leibs; Rob Wheeler; Andrew Y Ng"}, {"title": "Markov logic networks", "journal": "Machine learning", "year": "2006", "authors": "Matthew Richardson; Pedro Domingos"}, {"title": "Alfred: A benchmark for interpreting grounded instructions for everyday tasks", "journal": "", "year": "2020", "authors": "Mohit Shridhar; Jesse Thomason; Daniel Gordon; Yonatan Bisk; Winson Han; Roozbeh Mottaghi; Luke Zettlemoyer; Dieter Fox"}, {"title": "Reba: A refinement-based architecture for knowledge representation and reasoning in robotics", "journal": "Journal of Artificial Intelligence Research", "year": "2019", "authors": "Mohan Sridharan; Michael Gelfond; Shiqi Zhang; Jeremy Wyatt"}, {"title": "What can i not do? towards an architecture for reasoning about and learning affordances", "journal": "", "year": "2017", "authors": "Mohan Sridharan; Ben Meadows; Rocio Gomez"}, {"title": "Integrated architectures for learning, planning, and reacting based on approximating dynamic programming", "journal": "", "year": "1990", "authors": "S Richard;  Sutton"}, {"title": "Reinforcement learning: An introduction", "journal": "MIT press", "year": "2018", "authors": "S Richard; Andrew G Sutton;  Barto"}, {"title": "Knowrob: A knowledge processing infrastructure for cognitionenabled robots", "journal": "The International Journal of Robotics Research", "year": "2013", "authors": "Moritz Tenorth; Michael Beetz"}, {"title": "Jointly improving parsing and perception for natural language commands through human-robot dialog", "journal": "Journal of Artificial Intelligence Research", "year": "2020", "authors": "Jesse Thomason; Aishwarya Padmakumar; Jivko Sinapov; Nick Walker; Yuqian Jiang; Harel Yedidsion; Justin Hart; Peter Stone; Raymond Mooney"}, {"title": "The increasingly fascinating opportunity for human-robot-ai interaction: The cobot mobile service robots", "journal": "", "year": "2018", "authors": "M Manuela;  Veloso"}, {"title": "Bridging commonsense reasoning and probabilistic planning via a probabilistic action language", "journal": "", "year": "2019", "authors": "Yi Wang; Shiqi Zhang; Joohyung Lee"}, {"title": "PEORL: integrating symbolic planning and hierarchical reinforcement learning for robust decision-making", "journal": "", "year": "2018", "authors": "Fangkai Yang; Daoming Lyu; Bo Liu; Steven Gustafson"}, {"title": "Pomdp-based statistical spoken dialog systems: A review", "journal": "Proceedings of the IEEE", "year": "2013", "authors": "Steve Young; Milica Gai; Blaise Thomson; Jason D Williams"}, {"title": "Relational deep reinforcement learning", "journal": "", "year": "2018", "authors": "Vinicius Zambaldi; David Raposo; Adam Santoro"}, {"title": "Dynamically constructed (po) mdps for adaptive robot planning", "journal": "", "year": "2017", "authors": "Shiqi Zhang; Piyush Khandelwal; Peter Stone"}, {"title": "CORPP: Commonsense reasoning and probabilistic planning, as applied to dialog with a mobile robot", "journal": "", "year": "2015", "authors": "Shiqi Zhang; Peter Stone"}], "figures": [{"figure_label": "", "figure_type": "", "figure_id": "fig_0", "figure_caption": "a or ... or b :-c, ..., d, not e, ..., not f.", "figure_data": ""}, {"figure_label": "1", "figure_type": "", "figure_id": "fig_1", "figure_caption": "Figure 1 :1Figure1: An overview of KRR-RL for robot learning and reasoning to complete complex tasks.", "figure_data": ""}, {"figure_label": "3", "figure_type": "", "figure_id": "fig_2", "figure_caption": "Figure 3 :3Figure 3: Occupancy-grid map used in our experiments (Left), including five rooms, one shop, and four blocking areas (indicated by 'BA'), where all deliveries are from the shop and to one of the rooms; and (Right) mobile robot platform used in this research.", "figure_data": ""}, {"figure_label": "4", "figure_type": "", "figure_id": "fig_3", "figure_caption": "Figure 4 :4Figure 4: Screenshots of a demonstration trial on a real robot. (a) User gives the service request; (b)The robot decided to confirm about the item, considering its unreliable language understanding capability; (c) After hearing \"coke\", the robot became more confident about the item, and decided to ask again about the goal room'; (d) After hearing \"office2\", the robot became confident about the whole request, and started to work on the task; (e) Robot was on the way to the kitchen to pick up the object; and (f) Robot arrived at the kitchen, and was going to pick up the object for delivery.", "figure_data": ""}, {"figure_label": "56", "figure_type": "", "figure_id": "fig_4", "figure_caption": "Figure 5 :Figure 6 :56Figure 5: Belief change in three dimensions (In order from the left: Items, Persons and Offices) over five turns in a human-robot dialog . The distributions are grouped by turns (Including the initial distribution). In each turn, there are three distribution bars which means three different dimensions (In order from the left: Item, Person and Office).In order from the bottom, the values in each dimension are 1) coke, coffee and soda in Item; 2) John and Bob in Person; and 3) office1, office2, office3, office4 and office5 in Office.", "figure_data": ""}, {"figure_label": "7", "figure_type": "", "figure_id": "fig_5", "figure_caption": "Figure 7 :7Figure 7: Adaptive behaviors under new circumstances.", "figure_data": ""}, {"figure_label": "1", "figure_type": "table", "figure_id": "tab_1", "figure_caption": "Overall performance in delivery tasks (requiring both dialog and navigation).", "figure_data": "Static policyKRR-RLRewardFulfilledQA CostRewardFulfilledQA Costbr = 0.1182.070.85120.86206.210.93218.73br = 0.530.540.85320.8458.440.92718.98br = 0.7-40.330.84720.94-14.500.90520.56"}, {"figure_label": "2", "figure_type": "table", "figure_id": "tab_2", "figure_caption": "The amount of information (in terms of entropy) needed by a robot before taking delivery actions.", "figure_data": "Entropy (room1)Entropy (room2)Entropy (room5)Mean (std)MaxMean (std)MaxMean (std)Maxbr = 0.1.274 (.090).419.221 (.075).334.177 (.063).269br = 0.5.154 (.056).233.111 (.044).176.100 (.041).156br = 0.7.132 (.050).207.104 (.042).166.100 (.041).156"}], "doi": ""}