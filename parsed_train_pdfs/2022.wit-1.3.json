{"authors": "Maunika Tamire; Srinivas Anumasa; P K Srijith", "pub_date": "", "title": "Bi-Directional Recurrent Neural Ordinary Differential Equations for Social Media Text Classification", "abstract": "Classification of posts in social media such as Twitter is difficult due to the noisy and short nature of texts. Sequence classification models based on recurrent neural networks (RNN) are popular for classifying posts that are sequential in nature. RNNs assume the hidden representation dynamics to evolve in a discrete manner and do not consider the exact time of the posting. In this work, we propose to use recurrent neural ordinary differential equations (RN-ODE) for social media post classification which consider the time of posting and allow the computation of hidden representation to evolve in a time-sensitive continuous manner. In addition, we propose a novel model, Bi-directional RNODE (Bi-RNODE), which can consider the information flow in both the forward and backward directions of posting times to predict the post label. Our experiments demonstrate that RNODE and Bi-RNODE are effective for the problem of stance classification of rumours in social media.", "sections": [{"heading": "Introduction", "text": "Information disseminated in social media such as Twitter can be useful for addressing several realworld problems like rumour detection, disaster management, and opinion mining. Most of these problems involve classifying social media posts into different categories based on their textual content. For example, classifying the veracity of tweets as False, True, or unverified allows one to debunk the rumours evolving in social media (Zubiaga et al., 2018a). However, social media text is extremely noisy with informal grammar, typographical errors, and irregular vocabulary. In addition, the character limit (240 characters) imposed by social media such as Twitter make it even harder to perform text classification.\nSocial media text classification, such as rumour stance classification 1 (Qazvinian et al., 1 Rumour stance classification helps to identify the veracity 2011; Zubiaga et al., 2016;Lukasik et al., 2019) can be addressed effectively using sequence labelling models such as long short term memory (LSTM) networks (Zubiaga et al., 2016;Augenstein et al., 2016;Kochkina et al., 2017;Zubiaga et al., 2018b,a;Dey et al., 2018;Liu et al., 2019;Tian et al., 2020). Though they consider the sequential nature of tweets, they ignore the temporal aspects associated with the tweets. The time gap between tweets varies a lot and LSTMs ignore this irregularity in tweet occurrences. They are discrete state space models where hidden representation changes from one tweet to another without considering the time difference between the tweets. Considering the exact times at which tweets occur can play an important role in determining the label. If the time gap between tweets is large, then the corresponding labels may not influence each other but can have a very high influence if they are closer.\nWe propose to use recurrent neural ordinary differential equations (RNODE) (Rubanova et al., 2019) and developed a novel approach bidirectional RNODE (Bi-RNODE), which can naturally consider the temporal information to perform time sensitive classification of social media posts. NODE (Chen et al., 2018) is a continuous depth deep learning model that performs transformation of feature vectors in a continuous manner using ordinary differential equation solvers. NODEs bring parameter efficiency and address model selection in deep learning to a great extent. RNODE generalizes RNN by extending NODE for time-series data by considering temporal information associated with the sequential data. Hidden representations are changed continuously by considering the temporal information.\nWe propose to use RNODE for the task of sequence labeling of posts, which considers arrival times of the posts for updating hidden representaof a rumour post by classifying the reply tweets into different stance classes such as Support, Deny, Question, Comment tions and for classifying the post. In addition, we propose a novel model, Bi-RNODE, which considers not only information from the past but also from the future in predicting the label of the post. Here, continuously evolving hidden representations in the forward and backward directions in time are combined and used to predict the post label. We show the effectiveness of the proposed models on the rumour stance classification problem in Twitter using the RumourEval-2019 (Derczynski et al., 2019) dataset. We found RNODE and Bi-RNODE can improve the social media text classification by effectively making use of the temporal information and is better than LSTMs and gated recurrent units (GRU) with temporal features.", "n_publication_ref": 14, "n_figure_ref": 0}, {"heading": "Background", "text": "We consider the problem of classifying social media posts into different classes. Let D be a collection of N posts, D = {p i } N i=1 . Each post p i is assumed to be a tuple containing information such as textual and contextual features x i , time of the post t i and the label associated with the post y i , thus p i = {(x i , t i , y i )}. Our aim is to develop a sequence classification model which considers the temporal information t i along with x i for classifying a social media post. In particular, we consider the rumour stance classification problem in Twitter where one classifies tweets into Support, Query, Deny, and Comment class, thus y i \u2208 Y={Support, Query, Deny, Comment}.", "n_publication_ref": 0, "n_figure_ref": 0}, {"heading": "Neural Ordinary Differential Equations", "text": "NODE were introduced as a continuous depth alternative to Residual Networks (ResNets) (He et al., 2016). ResNets uses skip connections to avoid vanishing gradient problems when networks grow deeper. Residual block output is computed as h t+1 = h t + f (h t , \u03b8 t ), where f () is a neural network (NN) parameterized by \u03b8 t and h t representing the hidden representation at depth t. This update is similar to a step in Euler numerical technique used for solving ordinary differential equations (ODE) dh(t) dt = f (h(t), t, \u03b8). The sequence of residual block operations in ResNets can be seen as a solution to this ODE. Consequently, NODEs can be interpreted as a continuous equivalent of ResNets modeling the evolution of hidden representationsh(t) over time.\nFor solving ODE, one can use fixed stepsize numerical techniques such as Euler, Runge-Kutta or adaptive step-size methods like Do-pri5(Dormand and Prince, 1980). Solving an ODE requires one to specify an initial value h(0) (input x or its transformation) and can compute the value at t using an ODE solver ODESolverCompute(f \u03b8 , h(0), 0, t). An ODE is solved until some end-time T to obtain the final hidden representation h(T ) which is used to predict class labels\u0177. For classification problems, cross-entropy loss is used and parameters are learnt through adjoint sensitivity method (Zhuang et al., 2020;Chen et al., 2018) which provides efficient back-propagation and gradient computations.", "n_publication_ref": 4, "n_figure_ref": 0}, {"heading": "Bi-Directional Recurrent NODE", "text": "LSTMs are popular for sequence classification but only considers the sequential nature of the data and ignore the temporal features associated with the data in its standard setting. As the posts occur in irregular intervals of time, the nature of a new post will be influenced by the recent posts, influence will be inversely proportional to the time gap. In these situations, it will be beneficial to use a model where the number of transformations depend on the time gap.\nWe propose to use RNODE which considers the arrival time and accordingly the hidden representations are transformed across time. In RNODE, the transformation of a hidden representation h(t i\u22121 ) at time t i\u22121 to h(t i ) at time t i is governed by an ODE parameterized by a NN f (). Unlike standard LSTMs where h(t i ) is obtained from h(t i\u22121 ) as a single NN transformation, RNODE first obtains a hidden representation h \u2032 (t i ) as a solution to an ODE at time t i with initial value h(t i\u22121 ). The number of update steps in the numerical technique used to solve this ODE depends on the time gap t i \u2212t i\u22121 between the consecutive posts. The hidden representation h \u2032 (t i ) and input post x i at time t i are passed through neural network transformation (RNNCell()) to obtain final hidden representation h(t i ), i.e., h(t i ) = RNNCell(h \u2032 (t i ), x i ). The process is repeated for every element (x i , t i ) in the sequence. The hidden representations associated with the elements in the sequence are then passed to a neural network (NN()) to obtain the post labels. Using standard cross-entropy loss, the parameters of the models are learnt through backpropagation. Figure 1 provides the detailed architecture of the Bi-directional RNNs (Schuster and Paliwal, 1997) such as Bi-LSTMS (Graves et al., 2013) were proven to be successful in many sequence labeling tasks in natural language processing such as POS tagging (Huang et al., 2015). They use the information from the past and future to predict the label while standard LSTMs consider only information from the past. We propose a Bi-RNODE model, which uses the sequence of input observations from past and from the future to predict the post label at any time t. It assumes the hidden representation dynamics are influenced not only by the past posts but also by the futures posts. Unlike Bi-LSTMs, Bi-RNODE considers the exact time of the posts and their inter-arrival times in determining the transformations in the hidden representations. Bi-RNODE consists of two RNODE blocks, one performing transformations in the forward direction (in the order of posting times) and the other in the backward direction. The hidden representations H and H b computed by forward and backward RNODE respectively are aggregated either by concatenation or by averaging appropriately to obtain a final hidden representation and is passed through a NN to obtain the post labels. Bi-RNODE is useful when a sequence of posts with their time of occurrence needs to be classified together.\nFigure 2 provides an overview of Bi-RNODE model for post classification. For Bi-RNODE, an extra neural network f \u03b8 \u2032 () is required to compute hidden representations h b (t \u2032 i ) in the backward direction. Training in Bi-RNODE is done in a similar manner to RNODE, with cross-entropy loss and back-propagation to estimate parameters.", "n_publication_ref": 3, "n_figure_ref": 2}, {"heading": "Experiments", "text": "To demonstrate the effectiveness of the proposed approaches, we consider the stance classification problem in Twitter and RumourEval-2019(Derczynski et al., 2019 data set. This Twitter data set consists of rumours associated with eight events. Each event has a collection of tweets labelled with one of the four labels -Support, Query, Deny and Comment. We picked four major events Charliehebdo, Ferguson, Ottawashooting and Sydneysiege (each with approximately 1000 tweets per event) from RumourEval-2019 to perform experiments.\nFeatures : For dataset preparation, each data point x i associated with a Tweet includes text embedding, retweet count, favourites count, punctuation features, negative and positive word count, presence of hashtags, user mentions, URLs etc. obtained from the tweet. The text embedding of the tweet is obtained by concatenating the word embeddings 2 . Each tweet timestamp is converted to epoch time and Min-Max normalization is applied over the time stamps associated with each event to keep the duration of the event in the interval [0, 1].", "n_publication_ref": 2, "n_figure_ref": 0}, {"heading": "Experimental setup", "text": "We conducted experiments to predict the stance of social media posts propagating in seen events and unseen events.\n-Seen Event Here we train, validate and test on tweets of the same event. Each event data is split 60:20:20 ratio in sequence of time. This setup helps in predicting the stance of unseen tweets of the same event.\n-Unseen Event: This setup helps in evaluating performance on an unseen event and training on a larger dataset. Here, training and validation data are formed using data from 3 events and testing is done on the 4 th event. Last 20% of the training data (after ordering based on time) are set aside for validation. During training, mini-batches are formed only from the tweets belonging to the same event.\nBaselines: We compared results of our proposed RNODE and Bi-RNODE models with RNN based baselines such LSTM (Kochkina et al., 2017), Bi-LSTM (Augenstein et al., 2016), GRU (Cho et al., 2014), Bi-GRU, and Majority (labelling with most frequent class) baseline models. We also use a variant of LSTM baseline considering temporal information (Zubiaga et al., 2018b), LSTM-timeGap where the time gap of consecutive data points is included as part of the input data.\nEvaluation Metrics: We consider the standard evaluation metrics such as precision, recall, F1 and in addition the AUC score to account for the data imbalance. We consider a weighted average of the   evaluation metrics to compare the performance of models.\nHyperparameters: All the models are trained for 50 epochs with 0.01 learning rate, Adam optimizer, dropout(0.2) regularizer, batchsize of 50, hidden representation size of 64 and cross entropy as the loss function. Different hyperparameters like neural network layers (1, 2), numerical methods (Euler, RK4, Dopri5 for RNODE and Bi-RNODE) and aggregation strategy (concatenation or averaging for Bi-LSTM Bi-GRU and Bi-RNODE) are used for all the models and the best configuration is selected from the validation data for different experimental setups and train/test data splits.", "n_publication_ref": 4, "n_figure_ref": 0}, {"heading": "Results and Analysis", "text": "The results of seen event and unseen event experiment setup can be found in Table 1, where the first and second rows for each model provides results on seen event and unseen event respectively. We can observe from Table 1 that for both seen event and unseen event experiment setup, RNODE and Bi-RNODE models performed better than the baseline models in general for all the 3 events 3 . In particular for the seen event setup, Bi-RNODE gives the best result outperforming RNODE and other models for most of the data sets and measures. Under seen event experiment on Syndneysiege event, we plot the ROC curve for all the models in Figure 3. We can observe that AUC for Figures 3(a) and 3(e) corresponding to RNODE and Bi-RNODE respectively are higher than LSTM, GRU, Bi-LSTM , and Bi-GRU.", "n_publication_ref": 0, "n_figure_ref": 2}, {"heading": "Conclusion", "text": "We proposed RNODE, Bi-RNODE models for sequence classification of social media posts. These models consider temporal information of the posts and hidden representation are evolved as solution to ODE. Through experiments, we show these models perform better than LSTMs on rumour stance classification problem in Twitter", "n_publication_ref": 0, "n_figure_ref": 0}], "references": [{"title": "Stance detection with bidirectional conditional encoding", "journal": "", "year": "2016", "authors": "Isabelle Augenstein; Tim Rockt\u00e4schel"}, {"title": "Neural ordinary differential equations", "journal": "", "year": "2018", "authors": "T Q Ricky; Yulia Chen; Jesse Rubanova; David K Bettencourt;  Duvenaud"}, {"title": "On the properties of neural machine translation: Encoder-decoder approaches", "journal": "", "year": "2014", "authors": "Kyunghyun Cho; Bart Van Merri\u00ebnboer; Dzmitry Bahdanau; Yoshua Bengio"}, {"title": "", "journal": "", "year": "2019", "authors": "Leon Derczynski; Genevieve Gorrell; Arkaitz Zubiaga; Ahmet Aker; Kalina Bontcheva; Maria Liakata; Elena Kochkina"}, {"title": "Topical stance detection for twitter: A twophase lstm model using attention", "journal": "", "year": "2018", "authors": "Kuntal Dey; Ritvik Shrivastava; Saroj Kaushik"}, {"title": "A family of embedded runge-kutta formulae", "journal": "Journal of computational and applied mathematics", "year": "1980", "authors": "R John;  Dormand; J Peter;  Prince"}, {"title": "Speech recognition with deep recurrent neural networks", "journal": "", "year": "2013", "authors": "Alex Graves; Mohamed Abdel-Rahman; Geoffrey Hinton"}, {"title": "Deep residual learning for image recognition", "journal": "", "year": "2016", "authors": "Kaiming He; Xiangyu Zhang; Shaoqing Ren; Jian Sun"}, {"title": "Bidirectional LSTM-CRF models for sequence tagging", "journal": "ArXiv", "year": "2015", "authors": "Zhiheng Huang; W Xu; Kai Yu"}, {"title": "Turing at SemEval-2017 task 8: Sequential approach to rumour stance classification with branch-LSTM", "journal": "", "year": "2017", "authors": "Elena Kochkina; Maria Liakata; Isabelle Augenstein"}, {"title": "Towards early identification of online rumors based on long short-term memory networks", "journal": "Inf. Process. Manag", "year": "2019", "authors": "Y Liu; X Jin; H Shen"}, {"title": "Gaussian processes for rumour stance classification in social media", "journal": "ACM Trans. Inf. Syst", "year": "2019", "authors": "Michal Lukasik; Kalina Bontcheva; Trevor Cohn; Arkaitz Zubiaga; Maria Liakata; Rob Procter"}, {"title": "Rumor has it: Identifying misinformation in microblogs", "journal": "", "year": "2011", "authors": "Emily Vahed Qazvinian; Dragomir Rosengren; Qiaozhu Radev;  Mei"}, {"title": "Latent odes for irregularly-sampled time series", "journal": "", "year": "2019", "authors": "Yulia Rubanova; T Q Ricky; David Chen;  Duvenaud"}, {"title": "Bidirectional recurrent neural networks", "journal": "IEEE transactions on Signal Processing", "year": "1997", "authors": "Mike Schuster; K Kuldip;  Paliwal"}, {"title": "Early detection of rumours on twitter via stance transfer learning", "journal": "Springer", "year": "2020", "authors": "Lin Tian; Xiuzhen Zhang; Yan Wang; Huan Liu"}, {"title": "Adaptive checkpoint adjoint method for gradient estimation in neural ode", "journal": "PMLR", "year": "2020", "authors": "Juntang Zhuang; Nicha Dvornek; Xiaoxiao Li; Sekhar Tatikonda"}, {"title": "Detection and resolution of rumours in social media: A survey", "journal": "ACM Computing Surveys (CSUR)", "year": "2018", "authors": "Arkaitz Zubiaga; Ahmet Aker; Kalina Bontcheva; Maria Liakata; Rob Procter"}, {"title": "Stance classification in rumours as a sequential task exploiting the tree structure of social media conversations", "journal": "", "year": "2016", "authors": "Arkaitz Zubiaga; Elena Kochkina; Maria Liakata; Rob Procter; Michal Lukasik"}, {"title": "Discourseaware rumour stance classification in social media using sequential classifiers", "journal": "Information Processing & Management", "year": "2018", "authors": "Arkaitz Zubiaga; Elena Kochkina; Maria Liakata; Rob Procter; Michal Lukasik; Kalina Bontcheva; Trevor Cohn; Isabelle Augenstein"}], "figures": [{"figure_label": "1", "figure_type": "", "figure_id": "fig_0", "figure_caption": "Figure 1 :1Figure 1: Architecture details of RNODE", "figure_data": ""}, {"figure_label": "2", "figure_type": "", "figure_id": "fig_1", "figure_caption": "Figure 2 :2Figure 2: Bi-RNODE Architecture RNODE model.Bi-directional RNNs(Schuster and Paliwal, 1997) such as Bi-LSTMS(Graves et al., 2013) were proven to be successful in many sequence labeling tasks in natural language processing such as POS tagging(Huang et al., 2015). They use the information from the past and future to predict the label while standard LSTMs consider only information from the past. We propose a Bi-RNODE model, which uses the sequence of input observations from past and from the future to predict the post label at any time t. It assumes the hidden representation dynamics are influenced not only by the past posts but also by the futures posts. Unlike Bi-LSTMs, Bi-RNODE considers the exact time of the posts and their inter-arrival times in determining the transformations in the hidden representations. Bi-RNODE consists of two RNODE blocks, one performing transformations in the forward direction (in the order of posting times) and the other in the backward direction. The hidden representations H and H b computed by forward and backward RNODE respectively are aggregated either by concatenation or by averaging appropriately to obtain a final hidden representation and is passed through a NN to obtain the post labels. Bi-RNODE is useful when a sequence of posts with their time of occurrence needs to be classified together.Figure2provides an overview of Bi-RNODE model for post classification. For Bi-RNODE, an extra neural network f \u03b8 \u2032 () is required to compute hidden representations h b (t \u2032 i ) in the backward direction. Training in Bi-RNODE is done in a similar manner to RNODE, with cross-entropy loss and back-propagation to estimate parameters.", "figure_data": ""}, {"figure_label": "", "figure_type": "table", "figure_id": "tab_0", "figure_caption": "Figure 3: ROC curves of different models trained on sydneysiege event for seen event experimental setup. Bi-RNODE exhibits better AUC and class separability overall classes.", "figure_data": "ModelCharliehebdoFergusonOttawashootingAUC F1Recall Preci-AUC F1Recall Preci-AUC F1Recall Preci-sionsionsionRNODE0.665 0.653 0.6740.6580.600 0.5910.6590.5980.638 0.654 0.6920.6700.638 0.672 0.7000.7210.618 0.6320.6770.6400.659 0.651 0.7030.642Bi-RNODE 0.696 0.659 0.6930.6290.595 0.5990.6730.6410.669 0.667 0.6920.6580.651 0.697 0.7370.6900.615 0.6430.6950.6350.652 0.624 0.6620.618Bi-LSTM0.628 0.625 0.6790.6090.563 0.5990.6500.6140.622 0.627 0.6540.6220.662 0.690 0.7170.6710.603 0.6230.6670.6000.650 0.637 0.6860.622Bi-GRU0.654 0.643 0.6600.6410.588 0.5710.6310.6250.640 0.651 0.6860.6440.656 0.690 0.7240.6820.613 0.6340.6780.6110.648 0.636 0.6830.610LSTM0.625 0.600 0.6370.6370.567 0.6020.6500.6110.605 0.609 0.6350.6030.645 0.690 0.7280.6860.602 0.6110.6310.6030.630 0.626 0.6800.627GRU0.616 0.610 0.6470.6230.578 0.5880.6640.6310.591 0.539 0.5130.5740.682 0.695 0.7130.6860.614 0.6400.6870.6230.638 0.632 0.6830.618LSTM-0.638 0.631 0.6790.6050.565 0.5810.6270.5900.625 0.640 0.6790.650timeGap0.652 0.695 0.7320.6960.604 0.6250.6730.6330.638 0.638 0.6830.651Majority0.500 0.456 0.6050.3660.500 0.5180.6540.4280.500 0.485 0.6280.3950.500 0.542 0.6730.4530.500 0.5280.6620.4390.500 0.467 0.6140.377"}, {"figure_label": "1", "figure_type": "table", "figure_id": "tab_1", "figure_caption": "Performance of all the models on RumourEval-2019(Derczynski et al., 2019) dataset. First and second rows of each model represents seen event and unseen event experiment results respectively.", "figure_data": ""}], "doi": ""}