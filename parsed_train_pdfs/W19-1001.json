{"authors": "Yusuke Kubota; Koji Mineshima; Robert Levine; Daisuke Bekki", "pub_date": "", "title": "Underspecification and interpretive parallelism in Dependent Type Semantics", "abstract": "The scope parallelism in the Geach sentence (Every boy loves, and every girl detests, some saxophonist) and the related parallel interpretation requirement in pronominal binding is a pervasive phenomenon found across different types of coordination and ellipsis phenomena. Previous accounts all resort to additional constraints of some sort that restrict the otherwise flexible syntax-semantics interface to avoid overgeneration. In this paper, we propose a novel approach to this long-standing problem. We show that, by taking a proof-theoretic perspective on natural language semantics and by viewing the ambiguity resolution for pronouns and indefinites as underspecification resolution that invokes extra proof search, a conceptually natural solution emerges for the problem of interpretive parallelism. The analysis is cast in Dependent Type Semantics, with Hybrid Type-Logical Categorial Grammar as the syntax-semantics interface backbone. For empirical illustration, we show how the proposed approach correctly accounts for the classical Geach paradigm and its pronominal variant.", "sections": [{"heading": "", "text": "1 Introduction: interpretive parallelism in coordination and ellipsis One of the long-standing problems in the analysis of coordination and ellipsis is the strong parallelism requirement imposed on the interpretations of the 'shared' linguistic expression. For example, Geach (1972) famously noticed that, in the following type of examples involving right-node raising (RNR), the object indefinite that is shared in the two conjuncts can either scope below the subject quantifier in each conjunct or scope over the entire coordination, but that mixed scope readings, in which the object indefinite scopes above the subject quantifier in one conjunct but not in the other, are unavailable.\n(1) Every boy loves, and every girl detests, some saxophonist.\n(\u2200 > \u2203 \u2227 \u2200 > \u2203 / \u2203 > \u2200 \u2227 \u2203 > \u2200) Jacobson (1999) notes that this interpretive parallelism extends to the pronominal variable binding in examples such as the following (on reading 2, John is a salient male individual in the discourse):\n(2) Every Englishman admires, and every American loves, his mother. reading 1: 'Every Englishman admires his own mother, and every American loves his own mother.' reading 2: 'Every Englishman admires John's mother, and every American loves John's mother.'\nIn general, pronouns can either be free or bound by a quantifier. Thus, there are four logically possible interpretations for (2) (bound/free in first/second conjunct). And all these interpretations are indeed available in the non-RNR counterpart of (2) (Every Englishman admires his mother and every American loves his mother). However, only two of these readings are attested for (2), as indicated above.\nThe parallel interpretation requirement is not limited to coordination but extends to ellipsis phenomena. For example, Hirschb\u00fchler (1982) notes that VP ellipsis imposes parallelism requirement for the scope of the quantifier inside the 'elided' material, in a way essentially parallel to the RNR sentences:\n(3) An American flag was hanging in front of every window. A Canadian flag was, too.\nLike the RNR example in (1), there are only the \u2200 > \u2203 \u2227 \u2200 > \u2203 and \u2203 > \u2200 \u2227 \u2203 > \u2200 parallel scope readings for this sentence. Mixed scope readings in which the universal scopes over the indefinite in the antecedent but not in the ellipsis site (or vice versa) are unavailable.\nJust as the RNR parallelism for quantifier scope in ( 1) is mirrored in the anaphora case in (2), the scopal parallelism in the VP ellipsis data in (3) has an exact analogue in the anaphora example in (4).\n(4) Every Englishman admires his mother, and every American does as well.\nAs in (2), the admiration relation holds either between every Englishman and every American male and his own respective mother or between every Englishman and every American male and the mother of some specific male individual in the antecedent context, with no mixed reading possible.\nThe parallelism patterns in ( 1) and ( 2) recur in the case of Stripping (see Puthawala (2018) for a recent formal analysis of Stripping, as well as a discussion of important properties of this construction).\n(5) a. Every boy admires a saxophonist, and every girl too.\nb. Every Englishman admires his mother, and every American as well.\nThese examples exhibit only the parallel interpretations (analogous to the relevant readings for the RNR and VP ellipsis examples given above) for the quantifier or pronoun contained in the elided material.\nThe interpretive parallelism in the data surveyed above has been noted by many authors (see, e.g., Jacobson 1999;Fox 2000;Asudeh and Crouch 2002;Steedman 2012), but no uniform analysis currently exists which treats the binding and quantifier cases in a principled manner and which covers both the coordination and ellipsis cases. The present paper attempts to make a first step in such a unified analysis by focusing on the binding and scope data in RNR (i.e. the Geach paradigm). The key claim of our proposal is that interpretive parallelism is a consequence of the underspecification involved in the interpretation of pronouns and indefinites (in this sense, it is similar in spirit to Steedman's (2012) approach).\nAll the examples above have one property in common: the shared material contains an expression (pronoun/quantifier) that exhibits interpretive variability. Our proposal in a nutshell is that interpretive parallelism falls out from the way underspecification resolution happens in sentences that have this property, due to interactions of the following conceptually natural assumptions:\n(i) interpretive variability is resolved by underspecification resolution, formalized as type-checking (ii) for 'shared' material, the syntax-semantics mapping requires the duplication of resource at some point in the mapping from the surface string to the final, fully resolved translation (iii) the formal language for the underspecified semantic representation imposes a certain restriction on the way multiple copies of an (originally) underspecified term are interpreted\nThe third condition can be thought to arise from the requirement to keep the mechanism simple for ensuring proper identity of underspecified terms with respect to their interpretive possibilities. We show below that these simple assumptions suffice to ensure the right range of interpretations to be assigned to the examples discussed above, by taking the case of RNR as an example. We formulate our analysis in Dependent Type Semantics (DTS; Bekki 2014;Bekki and Mineshima 2017), by proposing a novel treatment of indefinites involving underspecification. The proof-theoretic perspective of DTS provides a particularly natural setup to embody the assumptions outlined in (i)-(iii) above. For the sake of explicitness, we adopt Hybrid Type-Logical Categorial Grammar (Hybrid TLCG; Levine 2012, 2015) for the syntax-semantics interface in spelling out the analyses of specific linguistic examples. The choice of Hybrid TLCG for syntax is not essential, but we believe that it helps illuminate the general nature of our solution, which is compatible with any suitably general theory of compositional semantics.  2 Anaphora and scope via underspecification in DTS Dependent Type Theory (Martin-L\u00f6f 1984) is an extension of simply typed \u03bb-calculus. Dependent Type Semantics (DTS) is a proof-theoretic compositional dynamic semantics based on Dependent Type Theory. This framework allows us to use types depending on terms and to represent propositions (corresponding to semantic representations of sentences) as types. For instance, run(x) is a type depending on a term x. Under the Curry-Howard correspondence (propositions-as-types principle), the type run(x) can be regarded as the proposition that x runs. If a term u has this type, we write u : run(x), expressing that u is a proof of the proposition that run(x). Such a term u is called a proof term and plays a key role in representing the dynamic notion of contexts for resolving anaphora in DTS.", "n_publication_ref": 12, "n_figure_ref": 0}, {"heading": "Anaphora resolution via underspecification", "text": "In the following analysis, we mainly use two constructions, \u03a3-types and \u03a0-types. \u03a3-type, written (x : A) \u00d7 B, is a generalization of product type A \u00d7 B. A term of type (x : A) \u00d7 B is a pair (m, n) such that m has type A and n has type B[m/x]. 1 The projection functions \u03c0 1 and \u03c0 2 are defined so that \u03c0 1 (m, n) = m and \u03c0 2 (m, n) = n. \u03a3-types can be used to represent existential quantification. For instance, A man entered is given the translation (6) in DTS. 2 (6) (u : (x : e) \u00d7 man(x)) \u00d7 enter(\u03c0 1 (u)) Here u is a proof term of (x : e) \u00d7 man(x), which is a pair of x having type e (entity) and a proof that x is a man. Thus, its first component (the entity x) can be picked up by the projection \u03c0 1 (u). The entire translation means that there is an entity x such that x is a man and x enters. For notational simplicity, we often abbreviate \u03a3-type of the form (x : e)\u00d7A(x) as A * , thus we write (6) as (u : man * )\u00d7enter(\u03c0 1 (u)).\n\u03a0-type, (x : A) \u2192 B in our notation, is a generalization of function type A \u2192 B. A term of type (x : A) \u2192 B is a function f such that for any term m of type A, f (m) is of type B[m/x]. \u03a0-type is used to represent universal quantification. Thus, Every man entered is given the translation in ( 7).\n(7) (u : man * ) \u2192 enter(\u03c0 1 (u)) Note that when the variable x does not occur free in B, (x : A) \u00d7 B and (x : A) \u2192 B can be written A \u00d7 B and A \u2192 B, respectively.\nWe illustrate how anaphora resolution works in DTS by the example A man entered and he smiled, which is given the following translation as an initial underspecified representation.\n(8) (v : (u : man * ) \u00d7 enter(\u03c0 1 (u))) \u00d7 smile(@ 1 e) In DTS, a pronoun is analyzed as an underspecified term @, possibly annotated with its type A, which we write @A. We assume that in the initial underspecified representation, each occurrence of underspecified term @ is assigned a mutually distinct index. In the above example, the pronoun he corresponds to @ 1 e. This underspecified term searches for its antecedent of type e in the context represented as a proof term.\nThe initial step to resolve anaphora is type checking, which is a process to ensure that a given expression is a type (i.e. a well-formed proposition). This amounts to proving that it has type type, abbreviated as t. The formation rules (see Figure 1) tell us when a given expression has type t. In the case of (6), the goal is to prove that the representation in (6) has type t. In this case, no underspecified term appears, thus using the inference rules in Figure 1, we have the following closed derivation. Here we assume that type assignments (signatures) such as e : t and enter : e \u2192 t are in the initial context and can be used as an axiom. To simplify derivations, we usually omit axioms and use the name of the predicate applied (possibly with its type) as a rule label.\nIf an initial representation contains an underspecified term @, the process of type checking tells us in what context the antecedent of the @-term can be found. For this purpose, we use the following rule: (10) A : t A true @ i A :\nA @\nWe use a judgement of the form A true to mean that there exists a term of type A; in other words, type A is inhabited. Using this rule, the type checking for ( 8) gives an open derivation as follows.\n. . . . (9) (u : man * ) \u00d7 enter(\u03c0 1 (u)) : t e : t Ax e true @ 1 e : e @ smile(@ 1 e) : t smile\n(v : (u : man * ) \u00d7 enter(\u03c0 1 (u))) \u00d7 smile(@ 1 e) : t \u03a3F, 1\nHere the derivation starts from the open premise e true. Once we prove e true and find a witness for @ i , it becomes a closed derivation. To formalize this idea, we use the following rule for @-elimination.\n(12) @-elimination: Let A be a term in which no @-term occurs. Then the derivation on the left can be transformed into the derivation on the right:\n. . . .\nA : t . . . . D 2 u : A A true @ i A : A @ . . . . D 1 . . . . D 2 u : A . . . . D 1 [u/@ i A]\nThis rule allows us to replace the underspecified term @ i A with its witness u in the entire derivation. To find a witness for an underspecified term @, we need to do proof search in a given local context. In the case of (11), the application of \u03a3F rule at the final step allows us to use a proof term for the left-side proposition, (u : man * ) \u00d7 enter(\u03c0 1 (u)), to find a witness for @ 1 e. It can be easily seen that one such witness is \u03c0 1 (\u03c0 1 (v)); in this case, we say @ 1 e is bound to \u03c0 1 (\u03c0 1 (v)). 3 Thus we have a closed derivation on the left below and it can be transformed to the derivation on the right by @-elimination.\n. . . . (9) (u : man * ) \u00d7 enter(\u03c0 1 (u)) : t e : t Ax [v : (u : man * ) \u00d7 enter(\u03c0 1 (u))] 1 \u03c0 1 (v) : man * \u03a3E \u03c0 1 (\u03c0 1 (v)) : e \u03a3E e true @ 1 e : e @ smile(@ 1 e) : t smile (v : (u : man * ) \u00d7 enter(\u03c0 1 (u))) \u00d7 smile(@ 1 e) : t \u03a3F, 1 . . . . (9) (u : man * ) \u00d7 enter(\u03c0 1 (u)) : t [v : (u : man * ) \u00d7 enter(\u03c0 1 (u))] 1 \u03c0 1 (v) : man * \u03c0 1 (\u03c0 1 (v)) : e \u03a3E smile(\u03c0 1 (\u03c0 1 (u))) : t smile (v : (u : man * ) \u00d7 enter(\u03c0 1 (u))) \u00d7 smile(\u03c0 1 (\u03c0 1 (u))) : t \u03a3F, 1\nThe final representation can be read off from the bottom line of the derivation on the right.\n(13) (v : (u :\nman * ) \u00d7 enter(\u03c0 1 (u))) \u00d7 smile(\u03c0 1 (\u03c0 1 (v)))\nThis is equivalent to saying that there is an entity x such that it satisfies man(x), enter(x), and smile(x). Our analysis naturally accounts for the bound reading of (14a), whose translation is given in (14b). ( 14) a. Every Englishman thinks he is a genius. b. (u : eng * ) \u2192 think(genius(@ 1 e))(\u03c0 1 (u)) The derivation on the left shows the type checking with proof search to find a witness for @ 1 e in (14b).\n(15)\n[u : eng * ] 1 \u03c0 1 (u) : e e true @ 1 e : e @ genius(@ 1 e) : t genius [u : eng * ] 1 \u03c0 1 (u) : e think(genius(@ 1 e))(\u03c0 1 (u)) : t\nthink : t \u2192 e \u2192 t (u : eng * ) \u2192 think(genius(@ 1 e))(\u03c0 1 (u)) : t \u03a3F, 1 [u : eng * ] 1 \u03c0 1 (u) : e genius(\u03c0 1 (u)) : t genius [u : eng * ] 1 \u03c0 1 (u) : e think(genius(\u03c0 1 (u)))(\u03c0 1 (u)) : t think : t \u2192 e \u2192 t (u : eng * ) \u2192 think(genius(\u03c0 1 (u)))(\u03c0 1 (u)) : t \u03a3F, 1\nHere the premise e true follows from the hypothesis u : eng * licensed by the application of \u03a3F . Thus @ 1 e is bound to \u03c0 1 (u) and the @-term can be eliminated as shown in the derivation on the right. This yields the bound reading (u : eng * ) \u2192 think(genius(\u03c0 1 (u)))(\u03c0 1 (u)) for (14a), as desired.\nAn alternative treatment of indefinites In the classical version of DTS, pronouns and definites are translated as underspecified terms, while indefinites are not. Here we propose an alternative analysis that translates an indefinite to an underspecified term of the form #A where A is a \u03a3-type. This alternative analysis translates the sentence (6a) as follows (note that man * is an abbreviation for (x : e) \u00d7 man(x)):\n(16) enter(\u03c0 1 (#man * ))\nFor underspecified terms #, we use the following rule. 4 (17)\nA : t #A : A", "n_publication_ref": 1, "n_figure_ref": 2}, {"heading": "#", "text": "The difference between @ i A and #A is that while @ i A searches for an antecedent of type A in a given local context via anaphora resolution, #A introduces an object of type A via the following rule for #-elimination:\n(18) #-elimination: Let \u03d5 be a term containing #A as a subterm, where A is a type in which no @-term nor #-term occurs. Suppose that we have a derivation of the form on the left, where \u03d5 : t is the first node that has type t and depends on #A : A, i.e., no other judgement of the form \u03c8 : t appears in D 2 . Then the derivation can be transformed into the one on the right:\n. . . . D 1\nA : t #A : A # . . . . D 2 \u03d5 : t . . . . D 1 A : t [u : A] n . . . . D 2 [u/#A] \u03d5[u/#A] : t (u : A) \u00d7 \u03d5[u/#A] : t \u03a3F, n\nBy this rule, if there is a branch containing an underspecified term #A, one can close it by taking the existence of an object of type A as part of the asserted proposition represented as a \u03a3-type of the form (u : A) \u00d7 \u03d5[u/#A], where \u03d5[u/#A] is the expression obtained by replacing the occurrence of #A in \u03d5 by u. In the case of ( 16), the initial derivation shown on the left in ( 19) is transformed to the derivation on the right by #-elimination, so we end up with the same representation as (6).\n(19)\n[x : e] 1 man(x) : t man * : t \u03a3F, 1 #man * : man * # \u03c0 1 (#man * ) : e \u03a3E enter(\u03c0 1 (#man * )) : t [x : e] 1 man(x) : t man * : t \u03a3F, 1 [u : man * ] 1 \u03c0 1 (u) : e \u03a3E enter(\u03c0 1 (u)) : t (u : man * ) \u00d7 enter(\u03c0 1 (u)) : t \u03a3F, 1\nThus #-elimination allows us to eliminate a #-term from a type and rewrite it to a \u03a3-type. For notational convenience, we write this transformation as enter(\u03c0 1 (#man * )) # (u : man * ) \u00d7 enter(\u03c0 1 (u)).\nIt should be clear from the above that DTS crucially makes use of underspecification in the interpretations of both pronouns and indefinites. We make the following two assumptions about the way underspecified terms are interpreted in the course of semantic composition:\n(20) a. Ban on the duplication of underspecified terms: In a well-formed semantic representation of DTS, an underspecified @-term with the same index can appear at most once. b. Normal form requirement on compositionally derived semantic terms: At each step of semantic composition, the semantic term assigned to the derived linguistic expression is in \u03b2-normal form.\nThese restrictions can be thought of as embodying a general requirement that underspecification resolution is not totally unconstrained but is affected by the form of the sentences in which underspecified expressions occur. As such, these restrictions play key roles in the analysis of scope parallelism in the next section.", "n_publication_ref": 0, "n_figure_ref": 0}, {"heading": "Analysis of the binding/scope parallelism", "text": "With the treatment of anaphora and indefinites introduced above, the interpretive parallelism exemplified by ( 1) and ( 2) falls out automatically as a consequence of the way underspecification is resolved in DTS. Unlike previous proposals (Asudeh and Crouch 2002;Steedman 2012), no extra assumption is needed beyond the simple restriction (20) on underspecification resolution introduced in the previous section.\nWe start with the pronominal binding case. To avoid the issue of possessives (which is itself a complex problem), we illustrate the analysis with the following example involving an embedded clause:\n(21) Every Englishman thinks, and every American believes, that he is a genius.\nOne technical issue that needs to be addressed first is how to obtain the bound reading for the pronoun in the RNR'ed position to begin with. Note that given the prohibition on the duplication of underspecified terms in DTS, the simple derivation for ( 21) in ( 22) cannot yield the bound reading for the pronoun. 5 ( 22  Here, for the pronoun in the RNR'ed S to be bound by the subject quantifiers in each conjunct, the term gen(@ 1 e) first needs to be substituted for variable p in each conjunct (from where the antecedent is syntactically visible, given the definition of anaphora resolution from section 2), but this is precisely the move that is prohibited by the 'no duplication of underspecified term' restriction. This means that, in order to obtain the bound reading, we need a slightly more complex syntactic derivation involving (syntactic) type-lifting of both the RNR'ed material and the conjuncts. The effect in a nutshell is that, via type-lifting, we can ensure enough of the 'derivational structure' of the sentence to be present in the (beta-unreduced) semantic translation to identify the 'possible binder' of the pronoun before all the material is actually composed in the (surface) syntax. The derivation for the bound pronoun reading for (21) thus goes as in (23). 5 We adopt the abbreviation A eng = def \u03bbP.[(u : eng * ) \u2192 P (\u03c01(u))], etc. These abbreviations are unpacked at the end of the derivation (via the step designated by the dotted line, which is not part of the syntactic derivation) for clarity of presentation.  Type checking for the semantic representation involves a branch to check the type of \u03bbR\u03bbx.R(gen(@1e))(x), which is shown on the left below. Here the assumption e true follows from the hypothesis x : e and thus by @-elimination we can replace @ 1 e with x throughout the derivation.\nS/S that \u2022 he \u2022 is \u2022 a \u2022 genius; gen(@1e); S /E every \u2022 Englishman \u2022 thinks \u2022 and \u2022 every \u2022 American \u2022 believes \u2022 that \u2022 he \u2022 is \u2022 a \u2022 genius; \u03bbp[(v : A eng (\u03bby.think(p)(y))) \u00d7 A am(\n5 [\u03d54; R; VP/S ] 4 that \u2022 he \u2022 is \u2022 a \u2022 genius; gen(@1e); S /E \u03d54 \u2022 that \u2022 he \u2022 is \u2022 a \u2022 genius; R(gen(@1e)); VP \\E \u03d55 \u2022 \u03d54 \u2022 that \u2022 he \u2022 is \u2022 a \u2022 genius; R(gen(@1e))(x); S I 5 \u03d54 \u2022 that \u2022 he \u2022 is \u2022 a \u2022 genius; \u03bbx.R(gen(@1e))(x); VP I 4 that \u2022 he \u2022 is \u2022 a \u2022 genius; \u03bbR\u03bbx.R(gen(@1e))(x); (VP/S )\\VP /E every \u2022 Englishman \u2022 thinks \u2022 and \u2022 every \u2022 American \u2022 believes \u2022 that \u2022 he \u2022 is \u2022 a \u2022 genius; \u03bbP[(v : A eng (\n(24)\n[x : e] 2 e true @ 1 e : e @ gen(@ 1 e) : t [x : e] 2 R(gen(@ 1 e))(x) : t [R : t \u2192 e \u2192 t] 1 \u03bbx.R(gen(@ 1 e))(x) : e \u2192 t \u03a0I, 2 \u03bbR\u03bbx.R(gen(@ 1 e))(x) : (t \u2192 e \u2192 t) \u2192 e \u2192 t \u03a0I, 1 [x : e] 2 gen(x) : t [x : e] 2 R(gen(x))(x) : t [R : t \u2192 e \u2192 t] 1 \u03bbx.R(gen(x))(x) : e \u2192 t \u03a0I, 2 \u03bbR\u03bbx.R(gen(x))(x) : (t \u2192 e \u2192 t) \u2192 e \u2192 t \u03a0I, 1\nNote crucially that here the underspecification for the pronoun term @ 1 e is resolved before the meaning contribution of the RNR'ed S which contains it as a subterm is copies into each conjunct via \u03b2-reduction.\nThe underspecified term identifies the (\u03bb-bound) subject x of the upstairs clause as its antecedent. After @-elimination and \u03b2-reduction, we obtain the final translation in (25), which corresponds to the parallel bound reading for the sentence. For the parallel free pronoun reading, the simpler derivation in ( 22) would suffice. Since \u03b2-reduction is prohibited before underspecification resolution, type checking for the underspecified term searches for an appropriate antecedent in the global context (consisting of the previous linguistic discourse and extra-linguistic information). For concreteness, we assume that the previous utterance was Bobby Fisher is a famous American chess player, and that the judgement bf : e is in the global context. The previous sentence thus provides an antecedent and @ 1 e in ( 22) is bound to bf. By \u03b2-reducing the term after anaphora resolution, we obtain (26), where the pronoun refers to Bobby Fisher in each conjunct.\n(26) ((u : eng * ) \u2192 think(gen(bf)(\u03c0 1 (u)))) \u00d7 ((u : am * ) \u2192 believe(gen(bf))(\u03c0 1 (u))))\nThe quantifier scope case is somewhat different at the level of technical implementations, but at the broader conceptual level, is essentially similar to the pronoun case in that interpretive parallelism falls out from the constraints pertaining to underspecification resolution in the derivation of compositional semantics. Note first that, unlike the case for @-terms, we don't need to ensure that the derivationally obtained local context is 'large enough' to contain the 'antecedent'. Thus, the following simple derivation suffices to yield both the wide-scope and narrow-scope readings for the RNR'ed indefinite: (27) . . . Since #-terms do not carry indices, in the case of indefinites, interpretive parallelism follows not from the ban on duplicating indexed underspecified terms (whose role was to ensure 'construal identity' in anaphora resolution), but from an interaction of the normal form requirement for derived semantic terms and the locality requirement on underspecification resolution encoded in the #-elimination rule (18). Specifically, there are two possible ways for resolving underspecification for the #-term in the semantic translation for the sentence obtained at the final line of ( 27). If we resolve underspecification before \u03b2-reducing the term, we obtain the wide scope reading for the indefinite as in ( 28):\n(28) \u03bbx [(v : (u \n: boy * ) \u2192 admire(x)(\u03c0 1 (u))) \u00d7 ((u : girl * ) \u2192 hate(x)(\u03c0 1 (u)))](#sax * ) # (t : sax * ) \u00d7 \u03bbx[(v : (u : boy * ) \u2192 admire(x)(\u03c0 1 (u))) \u00d7 ((u : girl * ) \u2192 hate(x)(\u03c0 1 (u)))](\u03c0 1 (t)) \u2192 \u03b2 (t : sax * ) \u00d7 [(v : (u : boy * ) \u2192 admire(\u03c0 1 (t))(\u03c0 1 (u))) \u00d7 ((u : girl * ) \u2192 hate(\u03c0 1 (t))(\u03c0 1 (u)))]\nIf, on the other hand, we first \u03b2-reduce the term and then resolve underspecification, the \u03a3-type that has the existential force associated with the indefinite is introduced in the smallest local context in each conjunct, via (18). In this case, the distributive, narrow scope reading obtains for the sentence.\n(29) \u03bbx [(v : (u \n: boy * ) \u2192 admire(x)(\u03c0 1 (u))) \u00d7 ((u : girl * ) \u2192 hate(x)(\u03c0 1 (u)))](#sax * ) \u2192 \u03b2 (v : (u : boy * ) \u2192 admire(#sax * )(\u03c0 1 (u))) \u00d7 ((u : girl * ) \u2192 hate(#sax * )(\u03c0 1 (u))) # (v : (u : boy * ) \u2192 (t : sax * ) \u00d7 admire(\u03c0 1 (t))(\u03c0 1 (u))) \u00d7 ((u : girl * ) \u2192 (t : sax * ) \u00d7 hate(\u03c0 1 (t))(\u03c0 1 (u)))\nOne may wonder at this point why we impose the normal form requirement on compositionally derived semantic terms. To see why this requirement is needed, assume that no \u03b2-reduction takes place in the course of the derivataion, and, (as above) that once the semantic representation for the whole sentence is obtained, there is no restriction on the order of \u03b2-reduction and underspecification resolution for #terms. The following translation would then be assigned to the sentence, and via the underspecification resolution in (30), a mixed scope reading would incorrectly be predicted to be available: In short, assumption (20b) has the effect of eliminating unnecessary 'traces' of derivational history to make unavailable intermediate scope positions that do not reflect the surface form of the sentence. Our proposal treats indefinites as underspecified terms and universals as true quantifiers, and in this respect, resembles the approach by Steedman (2012). Unlike Steedman's approach, which interleaves underspecification resolution with CCG syntactic combinatorics, our approach separates semantic underspecification resolution from syntax. Nonetheless, the similarity between the two is striking, and it is interesting to note that they both predict that mixed readings are available for examples involving indefinites as subjects and a universal quantifier in the RNR'ed position, such as the following:\n(31) Some boy loves, and some girl detests, every saxophonist.\nThe judgments are somewhat subtle due to the independent pragmatic preference for parallel readings, but we follow Steedman (2012) in taking this prediction to be essentially correct.\nOne translation that our analysis can assign to (31) is the following: Here, \u03b2-conversion for the \u03bb-bound variables y, z and P can take place in any order, and the relative scope between the subject indefinites and the object universal depends on the order of application of \u03b2-conversion and underspecification resolution for the two terms #boy and #girl.", "n_publication_ref": 8, "n_figure_ref": 0}, {"heading": "Conclusion and outlook", "text": "In this paper, we have proposed an analysis of the interpretive parallelism for anaphora and scope in the so-called Geach sentences involving right-node raising. In the proposed analysis, the parallel interpretation requirement on pronouns and indefinites in the shared right periphery is a consequence of the way underspecified terms are interpreted in the underspecification language that mediates the compositional semantic representation straightforwardly derived from the syntactic derivation and the fully resolved semantic representation that explicitly encodes all the relevant logical entailment relations. The natural next question is whether the present approach can be extended to the ellipsis cases. Preliminary results suggest a positive answer to this question, but a detailed analysis is a task for future research.", "n_publication_ref": 0, "n_figure_ref": 0}, {"heading": "Acknowledgments", "text": "This work was supported by JSPS KAKENHI JP15K16732, the NINJAL collaborative research project 'Cross-linguistic Studies of Japanese Prosody and Grammar' and the OSU College of the Arts and Sciences Larger Grant.", "n_publication_ref": 0, "n_figure_ref": 0}], "references": [{"title": "Derivational parallelism and ellipsis parallelism", "journal": "Cascadilla Press", "year": "2002", "authors": "A Asudeh; R Crouch"}, {"title": "Representing anaphora with dependent types", "journal": "Springer", "year": "2014", "authors": "D Bekki"}, {"title": "Context-passing and underspecification in Dependent Type Semantics", "journal": "Springer", "year": "2017", "authors": "D Bekki; K Mineshima"}, {"title": "Economy and Semantic Interpretation", "journal": "MIT Press", "year": "2000", "authors": "D Fox"}, {"title": "A program for syntax", "journal": "", "year": "1972", "authors": "P T Geach"}, {"title": "VP deletion and across-the-board quantifier scope", "journal": "", "year": "1982", "authors": "P Hirschb\u00fchler"}, {"title": "Towards a variable-free semantics", "journal": "Linguistics and Philosophy", "year": "1999", "authors": "P Jacobson"}, {"title": "Gapping as like-category coordination", "journal": "Springer", "year": "2012", "authors": "Y Kubota; R Levine"}, {"title": "Against ellipsis: Arguments for the direct licensing of 'non-canonical' coordinations", "journal": "Linguistics and Philosophy", "year": "2015", "authors": "Y Kubota; R Levine"}, {"title": "Intuitionistic Type Theory. Bibliopolis", "journal": "", "year": "1984", "authors": "P Martin-L\u00f6f"}, {"title": "Stripping isn't so mysterious, or anomalous scope, either", "journal": "", "year": "2018", "authors": "D Puthawala"}, {"title": "Taking Scope", "journal": "MIT Press", "year": "2012", "authors": "M Steedman"}], "figures": [{"figure_label": "1", "figure_type": "", "figure_id": "fig_0", "figure_caption": "Figure 1 :1Figure 1: Inference rules: formation rules (\u03a0F , \u03a3F ), introduction rules (\u03a0I, \u03a3I), elimination rules (\u03a0E, \u03a3E)", "figure_data": ""}, {"figure_label": "", "figure_type": "", "figure_id": "fig_1", "figure_caption": "e] 1 man(x) : t man : e \u2192 t (x : e) \u00d7 man(x) : t \u03a3F, 1 [u : (x : e) \u00d7 man(x)] 2 \u03c0 1 (u) : e \u03a3E enter(\u03c0 1 (u)) : t enter : e \u2192 t (u : (x : e) \u00d7 man(x)) \u00d7 enter(\u03c0 1 (u)) : t \u03a3F, 2", "figure_data": ""}, {"figure_label": "", "figure_type": "", "figure_id": "fig_2", "figure_caption": "\u03bby.believe(p)(y))](gen(@1e)); S . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . \u03bbp[(v : (u : eng * ) \u2192 think(p)(\u03c01(u))) \u00d7 ((u : am * ) \u2192 believe(p)(\u03c01(u)))](gen(@1e))", "figure_data": ""}, {"figure_label": "", "figure_type": "", "figure_id": "fig_3", "figure_caption": "think; VP/S [\u03d51; P; (VP/S )\\VP] 1 \\E thinks \u2022 \u03d51; P(think); VP \\E \u03d53 \u2022 thinks \u2022 \u03d51; P(think)(x); S I 3 \u03bb\u03d53.\u03d53 \u2022 thinks \u2022 \u03d51; \u03bbx.P(think)(x); S NP E every \u2022 Englishman \u2022 thinks \u2022 \u03d51; A eng (\u03bbx.P(think)(x)); S /I 1 every \u2022 Englishman \u2022 thinks; \u03bbP. A eng (\u03bbx.P(think)(x)); S/((VP/S )\\VP) . . . every \u2022 Englishman \u2022 thinks \u2022 and \u2022 every \u2022 American \u2022 believes; \u03bbP.(v : A eng (\u03bbx.P(think)(x)))", "figure_data": ""}, {"figure_label": "", "figure_type": "", "figure_id": "fig_4", "figure_caption": "\u03bbx.P(think)(x))) \u00d7 ( A am(\u03bbx.P (believe)(x)))](\u03bbR\u03bbx.R(gen(@1e))(x)); S . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . \u03bbP[(v : (u : eng * ) \u2192 P(think)(\u03c01(u))) \u00d7 ((u : am * ) \u2192 P(believe)(\u03c01(u)))](\u03bbR\u03bbx.R(gen(@1e))(x))", "figure_data": ""}, {"figure_label": "", "figure_type": "", "figure_id": "fig_5", "figure_caption": "(25)  \u03bbP[(v : (u : eng * ) \u2192 P(think)(\u03c0 1 (u))) \u00d7 ((u : am * ) \u2192 P(believe)(\u03c0 1 (u)))](\u03bbR\u03bbx.R(gen(x))(x)) \u03b2 ((u : eng * ) \u2192 think(gen(\u03c0 1 (u)))(\u03c0 1 (u)))) \u00d7 ((u : am * ) \u2192 believe(gen(\u03c0 1 (u)))(\u03c0 1 (u))))", "figure_data": ""}, {"figure_label": "", "figure_type": "", "figure_id": "fig_6", "figure_caption": "every \u2022 boy \u2022 admires \u2022 and \u2022 every \u2022 girl \u2022 hates; \u03bbx.(v : A boy (\u03bby.admire(x)(y))) \u00d7 ( A girl(\u03bby.hate(x)(y))); S/NP some \u2022 saxophonist; #sax * ; NP every \u2022 boy \u2022 admires \u2022 and \u2022 every \u2022 girl \u2022 hates \u2022 some \u2022 saxophonist; \u03bbx[(v : A boy (\u03bby.admire(x)(y))) \u00d7 ( A girl(\u03bby.hate(x)(y)))](#sax * ); S . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . \u03bbx[(v : (u : boy * ) \u2192 admire(x)(\u03c01(u))) \u00d7 ((u : girl * ) \u2192 hate(x)(\u03c01(u)))](#sax * )", "figure_data": ""}, {"figure_label": "30", "figure_type": "", "figure_id": "fig_7", "figure_caption": "( 30 )30\u03bbP \u03bbQ\u03bbx[(v : P (x)) \u00d7 Q(x)](\u03bby A boy(admire(y)))(\u03bbz A girl(hate(z)))(#sax * ) \u2192 \u03b2 (v : A boy(admire(#sax * ))) \u00d7 \u03bbz[ A girl(hate(z))](#sax * ) # (v : A boy((t : sax * ) \u00d7 admire(\u03c0 1 (t)))) \u00d7 ((t : sax * ) \u00d7 \u03bbz[ A girl(hate(z))](\u03c01(t)))\u2192 \u03b2 (v : A boy((t : sax * ) \u00d7 admire(\u03c0 1 (t)))) \u00d7 ((t : sax * ) \u00d7 A girl(hate(\u03c01(t))))", "figure_data": ""}, {"figure_label": "32", "figure_type": "", "figure_id": "fig_8", "figure_caption": "( 32 )32\u03bbP[(u : (\u03bby[P(\u03bbx.love(x)(y))](#boy))) \u00d7 \u03bbz[P(\u03bbx.hate(x)(z))](#girl)]( A sax)", "figure_data": ""}], "doi": ""}