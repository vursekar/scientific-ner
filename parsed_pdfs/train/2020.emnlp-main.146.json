{"authors": "Hung Le; Chenghao Liu; Nancy F Chen; Steven C H Hoi", "pub_date": "", "title": "UniConv: A Unified Conversational Neural Architecture for Multi-domain Task-oriented Dialogues", "abstract": "Building an end-to-end conversational agent for multi-domain task-oriented dialogues has been an open challenge for two main reasons. First, tracking dialogue states of multiple domains is non-trivial as the dialogue agent must obtain complete states from all relevant domains, some of which might have shared slots among domains as well as unique slots specifically for one domain only. Second, the dialogue agent must also process various types of information across domains, including dialogue context, dialogue states, and database, to generate natural responses to users. Unlike the existing approaches that are often designed to train each module separately, we propose \"UniConv\" -a novel unified neural architecture for end-to-end conversational systems in multi-domain task-oriented dialogues, which is designed to jointly train (i) a Bi-level State Tracker which tracks dialogue states by learning signals at both slot and domain level independently, and (ii) a Joint Dialogue Act and Response Generator which incorporates information from various input components and models dialogue acts and target responses simultaneously. We conduct comprehensive experiments in dialogue state tracking, contextto-text, and end-to-end settings on the Multi-WOZ2.1 benchmark, achieving superior performance over competitive baselines.", "sections": [{"heading": "Introduction", "text": "A conventional approach to task-oriented dialogues is to solve four distinct tasks: (1) natural language understanding (NLU) which parses user utterance into a semantic frame, (2) dialogue state tracking (DST) which updates the slots and values from semantic frames to the latest values for knowledge base retrieval, (3) dialogue policy which determines an appropriate dialogue act for the next system response, and (4) response generation which generates a natural language sequence conditioned on the dialogue act. This traditional pipeline modular framework has achieved remarkable successes in task-oriented dialogues (Wen et al., 2017;Liu and Lane, 2017;Williams et al., 2017;Zhao et al., 2017). However, such kind of dialogue system is not fully optimized as the modules are loosely integrated and often not trained jointly in an end-to-end manner, and thus may suffer from increasing error propagation between the modules as the complexity of the dialogues evolves.\nA typical case of a complex dialogue setting is when the dialogue extends over multiple domains. A dialogue state in a multi-domain dialogue should include slots of all applicable domains up to the current turn (See Table 1). Each domain can have shared slots that are common among domains or unique slots that are not shared with any. Directly applying single-domain DST to multi-domain dialogues is not straightforward because the dialogue states extend to multiple domains. A possible approach is to process a dialogue of N D domains multiple times, each time obtaining a dialogue state of one domain. However, this approach does not allow learning co-reference in dialogues in which users can switch from one domain to another.\nAs the number of dialogue domains increases, traditional pipeline approaches propagate errors from dialogue states to dialogue policy and subsequently, to natural language generator. Recent efforts Madotto et al., 2018;Wu et al., 2019b) address this problem with an integrated sequence-to-sequence structure. These approaches often consider knowledge bases as memory tuples rather than relational entity tables. While achieving impressive performance, these approaches are not scalable to large-scale knowledgebases, e.g. thousands of entities, as the memory cost to query entity attributes increases substantially. Another limitation of these approaches is the absence of dialogue act modelling. Dialogue act Human: could you make a suggestion ? one in the centre ? Dialogue agent: fitzbillies restaurant is an expensive british restaurant in the centre . can i book that for you ? Dialogue state: {restaurant: {pricerange: expensive, area: centre}} Dialogue acts: [inform-restaurant, request-booking] ... ...\nHuman: also , i need the number for kings hedges learner pool .\nDialogue agent: the phone number for the pool is 01234567 , is there something else i can help you ? Dialogue state: {restaurant: {pricerange: expensive, area: centre, name=fizbillies restaurant, request=[address]}, attraction: {name: kings hedges learner pool, request=[phone]}} Dialogue acts: [inform-phone] Table 1: Example of a multi-domain dialogue with two domains: restaurant and attraction.\nis particularly important in task-oriented dialogues as it determines the general decision towards task completion before a dialogue agent can materialize it into natural language response (See Table 1).\nTo tackle the challenges in multi-domain taskoriented dialogues while reducing error propagation among dialogue system modules and keeping the models scalable, we propose UniConv, a unified neural network architecture for end-to-end dialogue systems. UniConv consists of a Bi-level State Tracking (BDST) module which embeds natural language understanding as it can directly parse dialogue context into a structured dialogue state rather than relying on the semantic frame output from an NLU module in each dialogue turn. BDST implicitly models and integrates slot representations from dialogue contextual cues to directly generate slot values in each turn and thus, remove the need for explicit slot tagging features from an NLU. This approach is more practical than the traditional pipeline models as we do not need slot tagging annotation. Furthermore, BDST tracks dialogue states in dialogue context in both slot and domain levels. The output representations from two levels are combined in a late fusion approach to learn multi-domain dialogue states. Our dialogue state tracker disentangles slot and domain representation learning while enabling deep learning of shared representations of slots common among domains.\nUniConv integrates BDST with a Joint Dialogue Act and Response Generator (DARG) that simultaneously models dialogue acts and generates system responses by learning a latent variable representing dialogue acts and semantically conditioning output response tokens on this latent variable. The multitask setting of DARG allows our models to model dialogue acts and utilize the distributed representations of dialogue acts, rather than hard discrete output values from a dialogue policy module, on output response tokens. Our response generator incorporates information from dialogue input components and intermediate representations progressively over multiple attention steps. The output representations are refined after each step to obtain high-resolution signals needed to generate appropriate dialogue acts and responses. We combine both BDST and DARG for end-to-end neural dialogue systems, from input dialogues to output system responses.\nWe evaluate our models on the large-scale Mul-tiWOZ benchmark , and compare with the existing methods in DST, context-to-text generation, and end-to-end settings. The promising performance in all tasks validates the efficacy of our method.", "n_publication_ref": 7, "n_figure_ref": 0}, {"heading": "Related Work", "text": "Dialogue State Tracking. Traditionally, DST models are designed to track states of singledomain dialogues such as WOZ (Wen et al., 2017) and DSTC2 (Henderson et al., 2014a) benchmarks. There have been recent efforts that aim to tackle multi-domain DST such as (Ramadan et al., 2018;Lee et al., 2019;Wu et al., 2019a;. These models can be categorized into two main categories: Fixed vocabulary models (Zhong et al., 2018;Ramadan et al., 2018;Lee et al., 2019), which assume known slot ontology with a fixed candidate set for each slot. On the other hand, open-vocabulary models (Lei et al., 2018;Wu et al., 2019a;Le et al., 2020) derive the candidate set based on the source sequence i.e. dialogue history, itself. Our approach is more related to the open-vocabulary approach as we aim to generate unique dialogue states depending on the input dialogue. Different from previous Context-to-Text Generation. This task was traditionally solved by two separate dialogue modules: Dialogue Policy (Peng et al., 2017(Peng et al., , 2018 and NLG (Wen et al., 2016;Su et al., 2018). Recent work attempts to combine these two modules to directly generate system responses with or without modeling dialogue acts. Zhao et al. (2019) models action space of dialogue agent as latent variables.  predicts dialogue acts using a hierarchical graph structure with each path representing a unique act. Pei et al. (2019); Peng et al. (2019) use multiple dialogue agents, each trained for a specific dialogue domain, and combine them through a common dialogue agent. Mehri et al. (2019) models dialogue policy and NLG separately and fuses feature representations at different levels to generate responses. Our models simultaneously learn dialogue acts as a latent variable while allowing semantic conditioning on distributed representations of dialogue acts rather than hard discrete features.\nEnd-to-End Dialogue Systems. In this task, conventional approaches combine Natural Language Understanding (NLU), DST, Dialogue Policy, and NLG, into a pipeline architecture (Wen et al., 2017;Bordes et al., 2016;Liu and Lane, 2017;Liu and Perez, 2017;Williams et al., 2017;Zhao et al., 2017;Jhunjhunwala et al., 2020). Another framework does not explicitly modularize these components but incorporate them through a sequence-to-sequence framework Lei et al., 2018;Yavuz et al., 2019) and a memory-based entity dataset of triplets Madotto et al., 2018;Gangi Reddy et al., 2019;Wu et al., 2019b). These approaches bypass dialogue state and/or act modeling and aim to generate output responses directly. They achieve impressive success in generating dialogue responses in open-domain dialogues with unstructured knowledge bases. However, in a task-oriented setting with an entity dataset, they might suffer from an explosion of memory size when the number of entities from multiple dialogue domains increases. Our work is more related to the traditional pipeline strategy but we integrate our dialogue models by unifying two major components rather than using the traditional four-module architecture, to alleviate error propagation from upstream to downstream components. Different from prior work such as (Shu et al., 2019), our model facilitates multi-domain state tracking and allows learning dialogue acts during response generation.", "n_publication_ref": 32, "n_figure_ref": 0}, {"heading": "Method", "text": "The input consists of dialogue context of t\u22121 turns, each including a pair of user utterance U and system response R, (U 1 , R 1 ), ..., (U t\u22121 , R t\u22121 ), and the user utterance at current turn U t . A taskoriented dialogue system aims to generate the next response R t . The information for responses is typically queried from a database based on the user's provided information i.e. inform slots tracked by a DST. We assume access to a database of all domains with each column corresponding to a specific slot being tracked. We denote the intermediate output, including the dialogue state of current turn B t and dialogue act as A t . We denote the list of all domains D = (d 1 , d 2 , ...), all slots S = (s 1 , s 2 , ...), and all acts A = (a 1 , a 2 , ...). We also denote the list of all (domain, slot) pairs as DS = (ds 1 , ds 2 , ...). Note that DS \u2264 D \u00d7 S as some slots might not be applicable in all domains. Given the current dialogue turn t, we represent each text input as a sequence of tokens, each of which is a unique token index from a vocabulary set V : dialogue context X ctx , current user utterance X utt , and target system response X res . Similarly, we also represent the list of domains as X D and the list of slots as X S . In DST, we consider the raw text form of dialogue state of the previous turn B t\u22121 , similarly as (Lei et al., 2018;Budzianowski and Vuli\u0107, 2019). In the context-to-text setting, we assume access to the ground-truth dialogue states of current turn B t . The dialogue state of the previous and current turn can then be represented as a sequence of tokens X prev st and X curr st respectively. For a fair comparison with current approaches, during inference, we use the model predicted dialogue statesX prev st and do not use X curr st in DST and end-to-end tasks. Following (Wen et al., 2015;, we consider the delexicalized target response X dl res by replacing tokens of slot values by their corresponding generic tokens to allow learning valueindependent parameters. Our model consists of 3 major components (See Figure 1). First, Encoders encode all text input into continuous representations. To make it consistent, we encode all input with the same embedding dimension. Secondly, our Bi-level State Tracker (BDST) is used to detect contextual dependencies to generate dialogue states. The DST includes 2 modules for slot-level and domain-level representation learning. Each module comprises attention layers to project domain or slot representations and incorporate important information from dialogue context, dialogue state of the previous turn, and current user utterance. The outputs are combined as a context-aware vector to decode the corresponding inform or request slots in each domain. Lastly, our Joint Dialogue Act and Response Generator (DARG) projects the target system response representations and enhances them with information from various dialogue components. Our response generator can also learn a latent representation to generate dialogue acts, which condition all target tokens during each generation step.", "n_publication_ref": 3, "n_figure_ref": 1}, {"heading": "Encoders", "text": "An encoder encodes a text sequence X to a sequence of continuous representation Z \u2208 R L X \u00d7d . L X is the length of sequence X and d is the embedding dimension. Each encoder includes a token-level embedding layer. The embedding layer is a trainable embedding matrix E \u2208 R V \u00d7d . Each row represents a token in the vocabulary set V as a d-dimensional vector. We denote E(X) as the embedding function that transform the sequence X by looking up the respective token index: Z emb = E(X) \u2208 R L X \u00d7d . We inject the positional attribute of each token as similarly adopted in (Vaswani et al., 2017). The positional encoding is denoted as P E. The final embedding is the element-wise summation between token-embedded representations and positional encoded representations with layer normalization (Ba et al., 2016):\nZ = LayerNorm(Z emb + P E(X)) \u2208 R L X \u00d7d .\nThe encoder outputs include representations of dialogue context Z ctx , current user utterance Z utt , and target response Z dl res . We also encode the dialogue states of the previous turn and current turn and obtain Z prev st and Z curr st respectively. We encode X S and X D using only token-level embedding layer: Z S = LayerNorm(E(X S )) and Z D = LayerNorm(E(X D )). During training, we shift the target response by one position to the left side to allow auto-regressive prediction in each generation step. We share the embedding matrix E to encode all text tokens except for tokens of target responses as the delexicalized outputs contain different semantics from natural language inputs.", "n_publication_ref": 2, "n_figure_ref": 0}, {"heading": "Bi-level Dialogue State Tracker (BDST)", "text": "Slot-level DST. We adopt the Transformer attention (Vaswani et al., 2017), which consists of a dot-product attention with skip connection, to integrate dialogue contextual information into each slot representation. We denote Att(Z 1 , Z 2 ) as the attention operation from Z 2 on Z 1 . We first enable models to process all slot representations together rather than separately as in previous DST models (Ramadan et al., 2018;Wu et al., 2019a). This strategy allows our models to explicitly learn dependencies between all pairs of slots. Many pairs of slots could exhibit correlation such as time-wise relation (\"departure_time\" and \"arrival_time\"). We obtain Z dst SS = Att(Z S , Z S ) \u2208 R S \u00d7d . We incorporate the dialogue information by learning dependencies between each slot representation and each token in the dialogue history. Previous approaches such as (Budzianowski and Vuli\u0107, 2019) consider all dialogue history as a single sequence but we separate them into two inputs because the information in X utt is usually more important to generate responses while X ctx includes more background information. We then obtain Z dst S,ctx = Att(Z ctx , Z dst SS ) \u2208 R S \u00d7d and Z dst S,utt = Att(Z utt , Z dst S,ctx ) \u2208 R S \u00d7d . Following (Lei et al., 2018), we incorporate dialogue state of the previous turn B t\u22121 which is a more compact representation of dialogue context. Hence, we can replace the full dialogue context to only R t\u22121 as the remaining part is represented in B t\u22121 . This approach avoids taking in all dialogue history and is scalable as the conversation grows longer. We add the attention layer to obtain Z dst S,st = Att(Z prev st , Z dst S,ctx ) \u2208 R S \u00d7d (See Figure 1). We further improve the feature representations by repeating the attention sequence over N dst S times. We denote the final output Z dst S . Domain-level DST. We adopt a similar architecture to learn domain-level representations. The representations learned in this module exhibit global information while slot-level representations contain local dependencies to decode multi-domain dialogue states. First, we enable the domain-level DST to capture dependencies between all pairs of domains. For example, some domains such as \"taxi\" are typically paired with other domains such as \"attraction\", but usually not with the \"train\" domain.\nWe then obtain Z dst DD = Att(Z D , Z D ) \u2208 R D \u00d7d . We then allow models to capture dependencies between each domain representation and each token in dialogue context and current user utterance. By segregating dialogue context and current utterance, our models can potentially detect changes of dialogue domains from past turns to the current turn. Especially in multi-domain dialogues, users can switch from one domain to another and the next system response should address the latest domain. We then obtain Z dst D,ctx = Att(Z ctx , Z dst DD ) \u2208 R D \u00d7d and Z dst D,utt = Att(Z utt , Z dst D,ctx ) \u2208 R D \u00d7d sequentially. Similar to the slot-level module, we refine feature representations over N dst D times and denote the final output as Z dst D . Domain-Slot DST. We combined domain and slot representations by expanding the tensors to identical dimensions i.e. D \u00d7 S \u00d7 d. We then apply Hadamard product, resulting in domain-slot joint features Z dst DS \u2208 R D \u00d7 S \u00d7d . We then apply a self-attention layer to allow learning of dependencies between joint domain-slot features:\nZ dst = Att(Z dst DS , Z dst DS ) \u2208 R D \u00d7 S \u00d7d .\nIn this attention, we mask the intermediate representations in positions of invalid domain-slot pairs. Compared to previous work such as (Wu et al., 2019a), we adopt a late fusion method whereby domain and slot representations are integrated in deeper layers.", "n_publication_ref": 6, "n_figure_ref": 1}, {"heading": "State Generator", "text": "The representations Z dst are used as context-aware representations to decode individual dialogue states. Given a domain index i and slot index j, the feature vector Z dst [i, j, :] \u2208 R d is used to generate value of the corresponding (domain, slot) pair. The vector is used as an initial hidden state for an RNN decoder to decode an inform slot value. Given the k-th (domain, slot) pair and decoding step l, the output hidden state in each recurrent step h kl is passed through a linear transformation with softmax to obtain output distribution over vocabulary set V :\nP inf kl = Softmax(h kl W inf ) \u2208 R V where W inf dst \u2208 R drnn\u00d7 V .\nFor request slot of k-th (domain,slot) pair, we pass the corresponding vector Z dst vector through a linear layer with sigmoid activation to predict a value of 0 or 1.\nP req k = Sigmoid(Z dst k W req ). Optimization.\nThe DST is optimized by the crossentropy loss functions of inform and request slots:\nL dst = L inf + L req = DS k=1 Y k l=1 \u2212 log(P inf kl (y kl )) + DS k=1 \u2212y k log(P req k ) \u2212 (1 \u2212 y k )(1 \u2212 log(P req k ))\n3.3 Joint Dialogue Act and Response Generator (DARG) Database Representations. Following , we create a one-hot vector for each domain d: x d db \u2208 {0, 1} 6 and 6 i x d db,i = 1. Each position of the vector indicates a number or a range of entities. The vectors of all domains are concatenated to create a multi-domain vector X db \u2208 R 6\u00d7 D . We embed this vector as described in Section 3.1. Response Generation. We adopt a stackedattention architecture that sequentially learns dependencies between each token in target responses with each dialogue component representation. First, we obtain Z gen res = Att(Z res , Z res ) \u2208 R Lres\u00d7d . This attention layer can learn semantics within the target response to construct a more semantically structured sequence. We then use attention to capture dependencies in background information contained in dialogue context and user utterance. The outputs are Z gen ctx = Att(Z ctx , Z gen res ) \u2208 R Lres\u00d7d and Z gen utt = Att(Z utt , Z gen ctx ) \u2208 R Lres\u00d7d sequentially. To incorporate information of dialogue states and DB results, we apply attention steps to capture dependencies between each response token representation and state or DB representation. Specifically, we first obtain Z gen dst = Att(Z dst , Z gen utt ) \u2208 R Lres\u00d7d . In the context-to-text setting, as we directly use the ground-truth dialogue states, we simply replace Z dst with Z curr st . Then we obtain Z gen db = Att(Z db , Z gen dst ) \u2208 R Lres\u00d7d . These attention layers capture the information needed to generate tokens that are towards task completion and supplement the contextual cues obtained in previous attention layers. We let the models to progressively capture these dependencies for N gen times and denote the final output as Z gen . The final output is passed to a linear layer with softmax activation to decode system responses auto-regressively: P res = Softmax(Z gen W gen ) \u2208 R Lres\u00d7 Vres Dialogue Act Modeling. We couple response generation with dialogue act modeling by learning a latent variable Z act \u2208 R d . We place the vector in the first position of Z res , resulting in Z res+act \u2208 R (Lres+1)\u00d7d . We then pass this tensor to the same stacked attention layers as above. By adding the latent variable in the first position, we allow our model to semantically condition all downstream tokens from second position, i.e. all tokens in the target response, on this latent variable. The output representation of the latent vector i.e.    by domain first row in Z gen , incorporates contextual signals accumulated from all attention layers and is used to predict dialogue acts. We denote this representation as Z gen act and pass it through a linear layer to obtain a multi-hot encoded tensor. We apply Sigmoid on this tensor to classify each dialogue act as 0 or 1: P act = Sigmoid(Z gen act W act ) \u2208 R A . Optimization. The response generator is jointly trained by the cross-entropy loss functions of generated responses and dialogue acts:\nL gen = L res + L act = Yres l=1 \u2212 log(P res l (y l )) + A a=1 \u2212y a log(P act a ) \u2212 (1 \u2212 y a )(1 \u2212 log(P act a ))\n4 Experiments", "n_publication_ref": 0, "n_figure_ref": 0}, {"heading": "Dataset", "text": "We evaluate our models with the multi-domain dialogue corpus MultiWOZ 2.0  and 2.1 (Eric et al., 2019) (The latter includes corrected state labels for the DST task). From the dialogue state annotation of the training data, we identified all possible domains and slots. We identified D = 7 domains and S = 30 slots, including 19 inform slots and 11 request slots. We also identified A = 32 acts. The corpus includes 8,438 dialogues in the training set and 1,000 in each validation and test set. We present a summary of the dataset in Table 2. For additional information of data pre-processing procedures, domains, slots, and entity DBs, please refer to Appendix A.", "n_publication_ref": 1, "n_figure_ref": 0}, {"heading": "Experiment Setup", "text": "We select d = 256, h att = 8, N dst S = N dst D = N gen = 3. We employed dropout (Srivastava et al., 2014) of 0.3 and label smoothing (Szegedy et al., 2016) on target system responses during training.", "n_publication_ref": 2, "n_figure_ref": 0}, {"heading": "Model", "text": "Joint Acc. HJST (Eric et al., 2019) 35.55% DST Reader  36.40% TSCP (Lei et al., 2018) 37.12% FJST (Eric et al., 2019) 38.00% HyST  38.10% TRADE (Wu et al., 2019a) 45.60% NADST (Le et al., 2020) 49.04% DSTQA (Zhou and Small, 2019) 51.17% SOM-DST (Kim et al., 2020) 53.01% BDST (Ours) 49.55%   71.29% 60.96% 18.80 TokenMoE (Pei et al., 2019) 75.30% 59.70% 16.81 HDSA  82.90% 68.90% 23.60 Structured Fusion (Mehri et al., 2019) 82.70% 72.10% 16.34 LaRL (Zhao et al., 2019) 82.78% 79.20% 12.80 GPT2 (Budzianowski and Vuli\u0107, 2019)   We adopt a teacher-forcing training strategy by simply using the ground-truth inputs of dialogue state of the previous turn and the gold DB representations. During inference in DST and end-to-end tasks, we decode system responses sequentially turn by turn, using the previously decoded state as input in the current turn, and at each turn, using the new predicted state to query DBs. We train all networks with Adam optimizer (Kingma and Ba, 2015) and a decaying learning rate schedule. All models are trained up to 30 epochs and the best models are selected based on validation loss. We used a greedy approach to decode all slots and a beam search with beam size 5. To evaluate the models, we use the following metrics: Joint Accuracy and Slot Accuracy (Henderson et al., 2014b), Inform and Success (Wen et al., 2017), and BLEU score (Papineni et al., 2002). As suggested by Liu et al. (2016), human evaluation, even though popular in dialogue research, might not be necessary in tasks with domain constraints such as MultiWOZ.\nWe implemented all models using Pytorch and will release our code on github 1 .", "n_publication_ref": 16, "n_figure_ref": 0}, {"heading": "Results", "text": "DST. We test our state tracker (i.e. using only L dst ) and compare the performance with the baseline models in   (Peng et al., 2019), our single model generates better responses in all domains without relying on multiple domainspecific teacher models. We also noted that the performance of DST improves in contrast to the previous DST task. This can be explained as additional supervision from system responses not only contributes to learn a natural response but also positively impact the DST component. Other baseline models such as Wu et al., 2019b) present challenges in the MultiWOZ benchmark as the models could not fully optimize due to the large scale entity memory. For example, following GLMP (Wu et al., 2019b), the restaurant domain alone has over 1,000 memory tuples of (Subject, Relation, Object). Ablation. We conduct a comprehensive ablation analysis with several model variants in Table 6 and have the following observations:\n\u2022 The model variant with a single-level DST (by considering S = DS and N dst D = 0) (Row A2) performs worse than the Bi-level DST (Row A1). In addition, using the dual architecture also improves the latency in each attention layers as typically D + S DS . The performance gap also indicates the potential of separating global and local dialogue state dependencies by domain and slot level.\n\u2022 Using B t\u22121 and only the last user utterance as the dialogue context (Row A1 and B1) performs as well as using B t\u22121 and a full-length dialogue history (Row A5 and B3). This demonstrates that the information from the last dialogue state is sufficient to represent the dialogue history up to the last user utterance. One benefit from not using the full dialogue history is that it reduces the memory cost as the number of tokens in a full-length dialogue history is much larger than that of a dialogue state (particularly as the conversation evolves over many turns).\n\u2022 We note that removing the loss function to learn the dialogue act latent variable (Row B2) can hurt the generation performance, especially by the task completion metrics Inform and Success. This is interesting as we expect dialogue acts affect the general semantics of output sentences, indicated by BLEU score, rather than the model ability to retrieve correct entities. This reveals the benefit of our approach. By enforcing a semantic condition on each token of the target response, the model can facility the dialogue flow towards successful task completion.\n\u2022 In both state tracker and response generator modules, we note that learning feature representations through deeper attention networks can improve the quality of predicted states and system responses. This is consistent with our DST performance as compared to baseline models of shallow networks.\n\u2022 Lastly, in the end-to-end task, our model achieves better performance as the number of attention heads increases, by learning more high-resolution dependencies.", "n_publication_ref": 3, "n_figure_ref": 0}, {"heading": "Domain-dependent Results", "text": "DST. For state tracking, the metrics are calculated for domain-specific slots of the corresponding domain at each dialogue turn. We also report the DST separately for multi-domain and single-domain dialogues to evaluate the challenges in multi-domain dialogues and our DST performance gap as compared to single-domain dialogues. From  our DST performs consistently well in the 3 domains attraction, restaurant, and train domains. However, the performance drops in the taxi and hotel domain, significantly in the taxi domain. We note that dialogues with the taxi domain is usually not single-domain but typically entangled with other domains. Secondly, we observe that there is a significant performance gap of about 10 points absolute score between DST performances in singledomain and multi-domain dialogues. State tracking in multi-domain dialogues is, hence, could be further improved to boost the overall performance.   Additionally, we report qualitative analysis and the insights can be seen in Appendix C.", "n_publication_ref": 0, "n_figure_ref": 0}, {"heading": "Conclusion", "text": "We A Data Pre-processing First, we delexicalize each target system response sequence by replacing the matched entity attribute that appears in the sequence to the canonical tag domain_slot . For example, the original target response 'the train id is tr8259 departing from cambridge' is delexicalized into 'the train id is train_id departing from train_departure'. We use the provided entity databases (DBs) to match potential attributes in all target system responses. To construct dialogue history, we keep the original version of all text, including system responses of previous turns, rather than the delexicalized form. We split all sequences of dialogue history, user utterances of the current turn, dialogue states, and delexicalized target responses, into case-insensitive tokens.\nWe share the embedding weights of all source sequences, including dialogue history, user utterance, and dialogue states, but use a separate embedding matrix to encode the target system responses.\nWe summarize the number of dialogues in each domain in Table 2. For each domain, a dialogue is selected as long as the whole dialogue (i.e. singledomain dialogue) or parts of the dialogue (i.e. in multi-domain dialogue) is involved with the domain. For each domain, we also build a set of possible inform and request slots using the dialogue state annotation in the training data. The details of slots and database in each domain can be seen in Table 9. The DBs of 3 domains taxi, police, and hospital are not available as part of the benchmark. On average, each dialogue has 1.8 domains and extends over 13 turns.", "n_publication_ref": 0, "n_figure_ref": 0}, {"heading": "B Baselines", "text": "We describe our baseline models in DST, contextto-text generation, and end-to-end dialogue tasks.", "n_publication_ref": 0, "n_figure_ref": 0}, {"heading": "B.1 DST", "text": "FJST and HJST (Eric et al., 2019). These models adopt a fixed-vocabulary DST approach. Both models include encoder modules (either bidirectional LSTM or hierarchical LSTM) to encode the dialogue history. The models pass the context hidden states to separate linear transformation to obtain final vectors to predict individual slots separately.\nThe output vector is used to measure a score of each candidate from a predefined candidate set. DST Reader . This model considers the DST task as a reading comprehension task and predicts each slot as a span over tokens within dialogue history. DST Reader utilizes attentionbased neural networks with additional modules to predict slot type and carryover probability. TSCP (Lei et al., 2018). The model adopts a sequence-to-sequence framework with a pointer network to generate dialogue states. The source sequence is a combination of the last user utterance, dialogue state of the previous turn, and user utterance. To compare with TSCP in a multi-domain task-oriented dialogue setting, we adapt the model to multi-domain dialogues by formulating the dialogue state of the previous turn similarly as our models. We reported the performance when the maximum length of the output dialogue state sequence L is set to 20 tokens (original default parameter is 8 tokens but we expect longer dialogue state in MultiWOZ benchmark and selected 20 tokens).\nHyST . This model combines the advantage of fixed-vocabulary and openvocabulary approaches. The model uses an openvocabulary approach in which the set of candidates of each slot is constructed based on all word ngrams in the dialogue history. Both approaches are applied in all slots and depending on their performance in the validation set, the better approach is used to predict individual slots during test time. TRADE (Wu et al., 2019a). The model adopts a sequence-to-sequence framework with a pointer network to generate individual slot token-by-token.\nThe prediction is additionally supported by a slot gating component that decides whether the slot is \"none\", \"dontcare\", or \"generate\". When the gate of a slot is predicted as \"generate\", the model will generate value as a natural output sequence for that slot.\nNADST (Le et al., 2020). The model proposes a non-autoregressive approach for dialogue state tracking which enables learning dependencies between domain-level and slot-level representations as well as token-level representations of slot values. DSTQA (Zhou and Small, 2019). The model treats dialogue state tracking as a question answering problem in which state values can be predicted through lexical spans or unique generated values.\nIt is enhanced with a knowledge graph where each node represent a slot and edges are based on overlaps of their value sets. SOM-DST (Kim et al., 2020). This is the current state-of-the-art model on the MultiWOZ2.1 dataset. The model exploits a selectively overwriting mechanism on a fixed-sized memory of dialogue states. id, address, area, internet, parking, single, double, family, name, phone, postcode, pricerange', takesbookings, stars, type    At each dialogue turn, the mechanism involve decision making on whether to update or carryover the state values from previous turns.", "n_publication_ref": 6, "n_figure_ref": 0}, {"heading": "B.2 Context-to-Text Generation", "text": "Baseline.  provides a baseline for this setting by following the sequenceto-sequence model . The source sequence is all past dialogue turns and the target sequence is the system response. The initial hidden state of the RNN decoder is incorporated with additional signals from the dialogue states and database representations. TokenMoE (Pei et al., 2019). TokenMoE refers to Token-level Mixture-of-Expert model. The model follows a modularized approach by separating different components known as expert bots for different dialogue scenarios. A dialogue scenario can be dependent on a domain, a type of dialogue act, etc. A chair bot is responsible for controlling expert bots to dynamically generate dialogue responses.\nHDSA . This is the current stateof-the-art in terms of Inform and BLEU score in the context-to-text generation setting in MultiWOZ2.0. HDSA leverages the structure of dialogue acts to build a multi-layer hierarchical graph. The graph is incorporated as an inductive bias in a self-attention network to improve the semantic quality of generated dialogue responses.\nStructured Fusion (Mehri et al., 2019). This approach follows a traditional modularized dialogue system architecture, including separate components for NLU, DM, and NLG. These compo-nents are pre-trained and combined into an end-toend system. Each component output is used as a structured input to other components.\nLaRL (Zhao et al., 2019). This model uses a latent dialogue action framework instead of handcrafted dialogue acts. The latent variables are learned using unsupervised learning with stochastic variational inference. The model is trained in a reinforcement learning framework whereby the parameters are trained to yield a better Success rate. The model is the current state-of-the-art in terms of Success metric.\nGPT2 (Budzianowski and Vuli\u0107, 2019). Unsupervised pre-training language models have significantly improved machine learning performance in many NLP tasks. This baseline model leverages the power of a pre-trained model (Radford et al., 2019) and adapts to the context-to-text generation setting in task-oriented dialogues. All input components, including dialogue state and database state, are transformed into raw text format and concatenated as a single sequence. The sequence is used as input to a pre-trained GPT-2 model which is then fine-tuned with MultiWOZ data.\nDAMD . This is the current state-of-the-art model for context-to-text generation task in MultiWOZ 2.1. This approach augments training data with multiple responses of similar context. Each dialogue state is mapped to multiple valid dialogue acts to create additional state-act pairs.\nB.3 End-to-End TSCP (Lei et al., 2018). In addition to the DST task, we evaluate TSCP as an end-to-end dialogue system that can do both DST and NLG. We adapt the models to the multi-domain DST setting as described in Section B.1 and keep the original response decoder. Similar to the DST component, the response generator of TSCP also adopts a pointer network to generate tokens of the target system responses by copying tokens from source sequences.\nIn this setting, we test TSCP with two settings of the maximum length of the output dialogue state sequence: L = 8 and L = 20. HRED-TS (Peng et al., 2019). This model adopts a teacher-student framework to address multidomain task-oriented dialogues. Multiple teacher networks are trained for different domains and intermediate representations of dialogue acts and output responses are used to guide a universal student network. The student network uses these representations to directly generate responses from dialogue context without predicting dialogue states.", "n_publication_ref": 7, "n_figure_ref": 0}, {"heading": "C Qualitative Analysis", "text": "We examine an example of dialogue in the test data and compare our predicted outputs with the baseline TSCP (L = 20) (Lei et al., 2018) and the ground truth. From Figure 4, we observe that both our predicted dialogue state and system response are more correct than the baseline. Specifically, our dialogue state can detect the correct type slot in the attraction domain. As our dialogue state is correctly predicted, the queried results from DB is also more correct, resulting in better response with the right information (i.e. 'no attraction available'). In Figure 5, we show the visualization of domain-level and slot-level attention on the user utterance. We notice important tokens of the text sequences, i.e. 'entertainment' and 'close to', are attended with higher attention scores. Besides, at domain-level attention, we find a potential additional signal from the token 'restaurant', which is also the domain from the previous dialogue turn. We also observe that attention is more refined throughout the neural network layers. For example, in the domain-level processing, compared to the 2 nd layer, the 4 th layer attention is more clustered around specific tokens of the user utterance.\nIn Table 10 and 11, we reported the complete output of this example dialogue. Overall, our dialogue agent can carry a proper dialogue with the user throughout the dialogue steps. Specifically, we observed that our model can detect new domains at dialogue steps where the domains are introduced e.g. attraction domain at the 5 th turn and taxi domain at the 8 th turn. The dialogue agent can also detect some of the co-references among the domains. For example, at the 5 th turn, the dialogue agent can infer the slot area for the new domain attraction as the user mentioned 'close the restaurant'. We noticed that that at later dialogue steps such as the 6 th turn, our decoded dialogue state is not correct possibly due to the incorrect decoded dialogue state in the previous turn, i.e. 5 th turn.\nIn Figure 2 and 3, we plotted the Joint Goal Accuracy and BLEU metrics of our model by dialogue turn. As we expected, the Joint Accuracy metric tends to decrease as the dialogue history extends over time. The dialogue agent achieves the highest accuracy in state tracking at the 1 st turn and gradually reduces to zero accuracy at later dialogue steps, i.e. 15 th to 18 th turns. For response generation performance, the trend of BLEU score is less obvious. The dialogue agent obtains the highest BLEU scores at the 3 rd turn and fluctuates between the 2 nd and 13 th turn.      10. Each turn includes the input of past system response S t\u22121 and current user utterance U t , and the predicted dialogue dialogue state BS t and system response S t . The dialogue consists of 11 turns in total and extends across 3 domains sequentially: restaurant, attraction, and taxi.", "n_publication_ref": 1, "n_figure_ref": 3}, {"heading": "Acknowledgments", "text": "We thank all reviewers for their insightful feedback to the manuscript of this paper. The first author of this paper is supported by the Agency for Science, Technology and Research (A*STAR) Computing and Information Science scholarship.", "n_publication_ref": 0, "n_figure_ref": 0}], "references": [{"title": "", "journal": "", "year": "", "authors": "Jimmy Lei Ba; Jamie Ryan Kiros; Geoffrey E Hin"}, {"title": "Learning end-to-end goal-oriented dialog", "journal": "", "year": "2016", "authors": "Antoine Bordes; Y-Lan Boureau; Jason Weston"}, {"title": "Hello, it's GPT-2 -how can I help you? towards the use of pretrained language models for task-oriented dialogue systems", "journal": "", "year": "2019", "authors": "Pawe\u0142 Budzianowski; Ivan Vuli\u0107"}, {"title": "Multiwoz -a largescale multi-domain wizard-of-oz dataset for taskoriented dialogue modelling", "journal": "EMNLP", "year": "2018", "authors": "Pawe\u0142 Budzianowski; Tsung-Hsien Wen; Bo-Hsiang Tseng; I\u00f1igo Casanueva; Ultes Stefan"}, {"title": "Semantically conditioned dialog response generation via hierarchical disentangled self-attention", "journal": "Association for Computational Linguistics", "year": "2019", "authors": "Wenhu Chen; Jianshu Chen; Pengda Qin; Xifeng Yan; William Yang Wang"}, {"title": "Multiwoz 2.1: Multi-domain dialogue state corrections and state tracking baselines", "journal": "", "year": "2019", "authors": "Mihail Eric; Rahul Goel; Shachi Paul; Abhishek Sethi; Sanchit Agarwal; Shuyag Gao; Dilek Hakkani-Tur"}, {"title": "Key-value retrieval networks for task-oriented dialogue", "journal": "Association for Computational Linguistics", "year": "2017", "authors": "Mihail Eric; Lakshmi Krishnan; Francois Charette; Christopher D Manning"}, {"title": "A copyaugmented sequence-to-sequence architecture gives good performance on task-oriented dialogue", "journal": "", "year": "2017", "authors": "Mihail Eric; Christopher Manning"}, {"title": "Multi-level memory for task oriented dialogs", "journal": "Long and Short Papers", "year": "2019", "authors": "Danish Revanth Gangi Reddy; Dinesh Contractor; Sachindra Raghu;  Joshi"}, {"title": "Dialog state tracking: A neural reading comprehension approach", "journal": "Association for Computational Linguistics", "year": "2019", "authors": "Shuyang Gao; Abhishek Sethi; Sanchit Agarwal; Tagyoung Chung; Dilek Hakkani-Tur"}, {"title": "HyST: A Hybrid Approach for Flexible and Accurate Dialogue State Tracking", "journal": "", "year": "2019", "authors": "Rahul Goel; Shachi Paul; Dilek Hakkani-T\u00fcr"}, {"title": "The second dialog state tracking challenge", "journal": "", "year": "2014", "authors": "Matthew Henderson; Blaise Thomson; Jason D Williams"}, {"title": "Word-based dialog state tracking with recurrent neural networks", "journal": "", "year": "2014", "authors": "Matthew Henderson; Blaise Thomson; Steve Young"}, {"title": "Multi-action dialog policy learning with interactive human teaching", "journal": "Association for Computational Linguistics", "year": "2020", "authors": "Megha Jhunjhunwala; Caleb Bryant; Pararth Shah"}, {"title": "Efficient dialogue state tracking by selectively overwriting memory", "journal": "", "year": "2020", "authors": "Sungdong Kim; Sohee Yang; Gyuwan Kim; Sang-Woo Lee"}, {"title": "Adam: A method for stochastic optimization", "journal": "", "year": "2015", "authors": "P Diederick; Jimmy Kingma;  Ba"}, {"title": "Non-autoregressive dialog state tracking", "journal": "", "year": "2020", "authors": "Hung Le; Richard Socher; Steven C H Hoi"}, {"title": "SUMBT: Slot-utterance matching for universal and scalable belief tracking", "journal": "Association for Computational Linguistics", "year": "2019", "authors": "Hwaran Lee; Jinsik Lee; Tae-Yoon Kim"}, {"title": "Sequicity: Simplifying task-oriented dialogue systems with single sequence-to-sequence architectures", "journal": "", "year": "2018", "authors": "Wenqiang Lei; Xisen Jin; Min-Yen Kan; Zhaochun Ren; Xiangnan He; Dawei Yin"}, {"title": "End-to-end taskcompletion neural dialogue systems", "journal": "Long Papers", "year": "2017", "authors": "Xiujun Li; Yun-Nung Chen; Lihong Li; Jianfeng Gao; Asli Celikyilmaz"}, {"title": "An end-to-end trainable neural network model with belief tracking for taskoriented dialog", "journal": "", "year": "2017", "authors": "Bing Liu; Ian Lane"}, {"title": "How NOT to evaluate your dialogue system: An empirical study of unsupervised evaluation metrics for dialogue response generation", "journal": "Association for Computational Linguistics", "year": "2016", "authors": "Chia-Wei Liu; Ryan Lowe; Iulian Serban; Mike Noseworthy; Laurent Charlin; Joelle Pineau"}, {"title": "Gated end-to-end memory networks", "journal": "", "year": "2017", "authors": "Fei Liu; Julien Perez"}, {"title": "Mem2seq: Effectively incorporating knowledge bases into end-to-end task-oriented dialog systems", "journal": "", "year": "2018", "authors": "Andrea Madotto; Chien-Sheng Wu; Pascale Fung"}, {"title": "Structured fusion networks for dialog", "journal": "Association for Computational Linguistics", "year": "2019", "authors": "Shikib Mehri; Tejas Srinivasan; Maxine Eskenazi"}, {"title": "Bleu: a method for automatic evaluation of machine translation", "journal": "Association for Computational Linguistics", "year": "2002", "authors": "Kishore Papineni; Salim Roukos; Todd Ward; Wei-Jing Zhu"}, {"title": "A modular task-oriented dialogue system using a neural mixture", "journal": "", "year": "2019", "authors": "Jiahuan Pei; Pengjie Ren; Maarten De Rijke"}, {"title": "Deep Dyna-Q: Integrating planning for task-completion dialogue policy learning", "journal": "Association for Computational Linguistics", "year": "2018", "authors": "Baolin Peng; Xiujun Li; Jianfeng Gao; Jingjing Liu; Kam-Fai Wong"}, {"title": "Composite task-completion dialogue policy learning via hierarchical deep reinforcement learning", "journal": "", "year": "2017", "authors": "Baolin Peng; Xiujun Li; Lihong Li; Jianfeng Gao; Asli Celikyilmaz; Sungjin Lee; Kam-Fai Wong"}, {"title": "Teacherstudent framework enhanced multi-domain dialogue generation", "journal": "", "year": "2019", "authors": "Shuke Peng; Xinjing Huang; Zehao Lin; Feng Ji; Haiqing Chen; Yin Zhang"}, {"title": "Entity-consistent end-to-end task-oriented dialogue system with KB retriever", "journal": "", "year": "2019", "authors": "Libo Qin; Yijia Liu; Wanxiang Che; Haoyang Wen; Yangming Li; Ting Liu"}, {"title": "Language models are unsupervised multitask learners", "journal": "", "year": "2019", "authors": "Alec Radford; Jeff Wu; Rewon Child; David Luan; Dario Amodei; Ilya Sutskever"}, {"title": "Large-scale multi-domain belief tracking with knowledge sharing", "journal": "", "year": "2018", "authors": "Pawe\u0142 Osman Ramadan; Milica Budzianowski;  Gasic"}, {"title": "Scalable and accurate dialogue state tracking via hierarchical sequence generation", "journal": "Association for Computational Linguistics", "year": "2019", "authors": "Liliang Ren; Jianmo Ni; Julian Mcauley"}, {"title": "Building end-to-end dialogue systems using generative hierarchical neural network models", "journal": "", "year": "2016", "authors": "Alessandro Iulian V Serban; Yoshua Sordoni; Aaron Bengio; Joelle Courville;  Pineau"}, {"title": "Flexibly-structured model for task-oriented dialogues", "journal": "Association for Computational Linguistics", "year": "2019", "authors": "Lei Shu; Piero Molino; Mahdi Namazifar; Hu Xu; Bing Liu; Huaixiu Zheng; Gokhan Tur"}, {"title": "Dropout: a simple way to prevent neural networks from overfitting", "journal": "The Journal of Machine Learning Research", "year": "2014", "authors": "Nitish Srivastava; Geoffrey Hinton; Alex Krizhevsky; Ilya Sutskever; Ruslan Salakhutdinov"}, {"title": "Natural language generation by hierarchical decoding with linguistic patterns", "journal": "", "year": "2018", "authors": "Shang-Yu Su; Kai-Ling Lo; Yi-Ting Yeh; Yun-Nung Chen"}, {"title": "Sequence to sequence learning with neural networks", "journal": "", "year": "2014", "authors": "Ilya Sutskever; Oriol Vinyals; Quoc V Le"}, {"title": "Advances in Neural Information Processing Systems", "journal": "Curran Associates, Inc", "year": "", "authors": "K Q Lawrence;  Weinberger"}, {"title": "Rethinking the inception architecture for computer vision", "journal": "", "year": "2016", "authors": "Christian Szegedy; Vincent Vanhoucke; Sergey Ioffe; Jon Shlens; Zbigniew Wojna"}, {"title": "Attention is all you need", "journal": "Curran Associates, Inc", "year": "2017", "authors": "Ashish Vaswani; Noam Shazeer; Niki Parmar; Jakob Uszkoreit; Llion Jones; Aidan N Gomez; Illia Kaiser;  Polosukhin"}, {"title": "Conditional generation and snapshot learning in neural dialogue systems", "journal": "", "year": "2016", "authors": "Milica Tsung-Hsien Wen; Nikola Gasic; Lina M Mrk\u0161i\u0107; Pei-Hao Rojas Barahona; Stefan Su; David Ultes; Steve Vandyke;  Young"}, {"title": "Semantically conditioned LSTM-based natural language generation for spoken dialogue systems", "journal": "", "year": "2015", "authors": "Milica Tsung-Hsien Wen; Nikola Ga\u0161i\u0107; Pei-Hao Mrk\u0161i\u0107; David Su; Steve Vandyke;  Young"}, {"title": "A networkbased end-to-end trainable task-oriented dialogue system", "journal": "", "year": "2017", "authors": "David Tsung-Hsien Wen; Nikola Vandyke; Milica Mrk\u0161i\u0107; Lina M Gasic; Pei-Hao Rojas Barahona; Stefan Su; Steve Ultes;  Young"}, {"title": "Hybrid code networks: practical and efficient end-to-end dialog control with supervised and reinforcement learning", "journal": "Long Papers", "year": "2017", "authors": "Jason D Williams; Kavosh Asadi; Geoffrey Zweig"}, {"title": "Transferable multi-domain state generator for task-oriented dialogue systems", "journal": "", "year": "2019", "authors": "Chien-Sheng Wu; Andrea Madotto; Ehsan Hosseini-Asl; Caiming Xiong; Richard Socher; Pascale Fung"}, {"title": "Association for Computational Linguistics", "journal": "", "year": "", "authors": "Italy Florence"}, {"title": "Global-to-local memory pointer networks for task-oriented dialogue", "journal": "", "year": "2019", "authors": "Chien-Sheng Wu; Richard Socher; Caiming Xiong"}, {"title": "DeepCopy: Grounded response generation with hierarchical pointer networks", "journal": "Association for Computational Linguistics", "year": "2019", "authors": "Semih Yavuz; Abhinav Rastogi; Guan-Lin Chao; Dilek Hakkani-Tur"}, {"title": "Taskoriented dialog systems that consider multiple appropriate responses under the same context", "journal": "", "year": "2019", "authors": "Yichi Zhang; Zhijian Ou; Zhou Yu"}, {"title": "Generative encoder-decoder models for task-oriented spoken dialog systems with chatting capability", "journal": "Association for Computational Linguistics", "year": "2017", "authors": "Tiancheng Zhao; Allen Lu; Kyusong Lee; Maxine Eskenazi"}, {"title": "Rethinking action spaces for reinforcement learning in end-to-end dialog agents with latent variable models", "journal": "Long and Short Papers", "year": "2019", "authors": "Tiancheng Zhao; Kaige Xie; Maxine Eskenazi"}, {"title": "Global-locally self-attentive encoder for dialogue state tracking", "journal": "", "year": "2018", "authors": "Victor Zhong; Caiming Xiong; Richard Socher"}, {"title": "Multi-domain dialogue state tracking as dynamic knowledge graph enhanced question answering", "journal": "", "year": "2019", "authors": "Li Zhou; Kevin Small"}], "figures": [{"figure_label": "5", "figure_type": "", "figure_id": "fig_0", "figure_caption": "Figure 5 :5Figure 5: Visualization of attention to the user utterance sequence at slot-level (lower right) and domain-level (upper right) is also included. More red denotes higher attention score between domain or slot representation and token representation. Best viewed in color.", "figure_data": ""}, {"figure_label": "", "figure_type": "table", "figure_id": "tab_0", "figure_caption": "Human: hello Dialogue agent: hi ! how can i help you ? Dialogue state: {} Dialogue acts: [greeting] Human: i would like a place to eat in the expensive price range Dialogue agent: sure , what type of food are you interested in ? Dialogue state: {restaurant: {pricerange: expensive}} Dialogue acts: [request-food]", "figure_data": ""}, {"figure_label": "2", "figure_type": "table", "figure_id": "tab_3", "figure_caption": "Summary of MultiWOZ dataset", "figure_data": ""}, {"figure_label": "3", "figure_type": "table", "figure_id": "tab_4", "figure_caption": "Evaluation of DST on MultiWOZ2.1", "figure_data": "ModelInformSuccess BLEUBaseline"}, {"figure_label": "4", "figure_type": "table", "figure_id": "tab_6", "figure_caption": "Evaluation of context-to-text task on MultiWOZ2.0.", "figure_data": ""}, {"figure_label": "3", "figure_type": "table", "figure_id": "tab_7", "figure_caption": "Refer to Appendix B for description of DST baselines). Our model can outperform fixed-vocabulary approaches such as HJST and FJST, showing the advantage of generating unique slot values rather than relying on a slot ontology with a fixed set of candidates. DST Reader model does not perform well and we note that many slot values are not easily expressed as a text span in source text inputs. DST", "figure_data": "incor-"}, {"figure_label": "5", "figure_type": "table", "figure_id": "tab_8", "figure_caption": "Evaluation on MultiWOZ2.1 in the end-to-end setting.", "figure_data": "2019) which achieves significant performance gainin this task.End-to-End. From Table 5, our model outper-forms existing baselines in all metrics except theInform score (See Appendix B for a description ofbaseline models). In TSCP (Lei et al., 2018), in-creasing the maximum dialogue state span L from8 to 20 tokens helps to improve the DST perfor-mance, but also increases the training time signif-icantly. Compared with HRED-TS"}, {"figure_label": "7", "figure_type": "table", "figure_id": "tab_9", "figure_caption": "", "figure_data": ","}, {"figure_label": "6", "figure_type": "table", "figure_id": "tab_10", "figure_caption": "Ablation analysis on the MultiWOZ2.1 in DST (top), context-to-text (middle), and end-to-end (bottom).", "figure_data": ""}, {"figure_label": "7", "figure_type": "table", "figure_id": "tab_12", "figure_caption": "DST results on MultiWOZ2.1 by domains.Context-to-Text Generation For this task, we calculated the metrics for single-domain dialogues of the corresponding domain (as Inform and Success are computed per dialogue rather than per turn). We do not report the Inform metric of the taxi domain because no DB was available for this domain. From Table8, we observe some performance gap between Inform and Success scores on multi-domain dialogues and single-domain dialogues. However, in terms of BLEU score, our model performs better with multi-domain dialogues. This could be caused by the data bias in MultiWOZ corpus as the majority of dialogues in this corpus is multidomain. Hence, our models capture the semantics of multi-domain dialogue responses better than single-domain responses. For domain-specific re-sults, we note that our models perform not as well as other domains in attraction and taxi domains in terms of Success score.", "figure_data": "DomainInform Success BLEUMulti-domain85.01% 68.86% 18.68Single-domain 97.79% 85.84% 17.62Attraction91.67% 66.67% 19.17Hotel97.01% 91.04% 16.55Restaurant96.77% 88.71% 19.88Taxi-78.85% 13.85Train99.10% 87.88% 18.14"}, {"figure_label": "8", "figure_type": "table", "figure_id": "tab_13", "figure_caption": "", "figure_data": ""}, {"figure_label": "9", "figure_type": "table", "figure_id": "tab_16", "figure_caption": "Summary of slots and DB details by domain in the MultiWOZ dataset", "figure_data": ""}, {"figure_label": "", "figure_type": "table", "figure_id": "tab_17", "figure_caption": ": all set . your reference number is k2bo09vq . U 5 : thanks . i am also looking for some entertainment close to the restaurant . any suggestions ? Example dialogue with the input system response R t\u22121 and current user utterance U t , and the output state BS t and system response R t . Compared with TSCP, our dialogue state and response are more correct and closer to the ground truth.", "figure_data": "B 5 : {restaurant: {area: center, name: dojo noodle bar,pricerange: cheap}, attraction: { area: center, type:entertainment}}R 5 : i am sorry i do not have any attractions meeting thecriteria you listed . is there another type of attraction or areayou would like me to search ?B 5 tscp: {restaurant: {area: center, pricerange: cheap},attraction: { area: center}}R 5 tscp: there are many attractions in the restaurant_area . doyou have a preference?B 5 ours : {restaurant: {area: center, pricerange: cheap},attraction: { area: center, type: entertainment}}R 5 ours : there are no attraction_type attractions in therestaurant_area of town . would you like to try another area ?Figure 4: 2 nd Layer0.8 1 3 rd Layer4 th Layer0.6DomainGoals0.4-level DST0.20123456789101112131415161718Dialog turnFigure 2: Joint Accuracy metric by dialogue turn in the Slot test data. -levelDST0.250.20.15BLEU0.10.050-0.05123456789101112131415161718Dialog turnFigure 3: BLEU4 metric by dialogue turn in the testdata."}, {"figure_label": "", "figure_type": "table", "figure_id": "tab_18", "figure_caption": "R5: i am sorry i do not have any attractions meeting the criteria you listed . is there another type of attraction or area you would like me to search ? R5: there are no attraction_type attractions in the restaurant_area of town . would you like to try another area ?", "figure_data": "TurnInput DialogueGround-truth State and ResponseOur Predicted State and ResponseR0: <blank>B1:{restaurant:{area:centre,B1:{restaurant:{area:centre,pricerange: cheap}}pricerange: cheap}}1U1: i am looking for a cheapR1: do you have any specific type of foodR1: there are 15 restaurant_pricerangerestaurant in the center of theyou would like ?restaurant_type s in the restaurant_areacityof town . do you have a preference ?U1: do you have any specificB2:{restaurant:{area:centre,B2:{restaurant:{area:centre,type of food you would like ?pricerange: cheap}}pricerange: cheap}}2U2: no , i am not picky as longR2: there is a restaurant_pricerangeR2: how about restaurant_name ? it sas the price -s are low .restaurant_food restaurant_type calledan restaurant_pricerange restaurant_foodthe restaurant_name located in the restau-restaurant_type located in the restau-rant_area of town . would you like torant_area of town .book a table ?R2: there is a cheap chineseB3:{restaurant:{area:centre,B2:{restaurant:{area:centre,restaurant called the dojo noo-pricerange: cheap, name: dojo noodlepricerange: cheap}}dle bar located in the centre ofbar}}town . would you like to book atable ?3U3: yes please , for 8 people atR3: i am sorry but restaurant_name isR3: booking was successful . the table1830 on thursday .solidly booked at that time . i can try awill be reserved for 15 minutes . refer-different time or day for you .ence number is restaurant_reference .R3: i am sorry but dojo noodleB4:{restaurant:{area:centre,B4:{restaurant:{area:centre,bar is solidly booked at that timepricerange: cheap, name: dojo noodlepricerange: cheap}}. i can try a different time or daybar}}for you4U4: can you try to book it atR4: all set . your reference number isR4: booking was successful . the table1730 .restaurant_reference .will be reserved for 15 minutes . refer-ence number is restaurant_reference .R4: all set . your reference num-B5:{restaurant:{area:centre,B5:{restaurant:{area:centre,ber is k2bo09vq .pricerange: cheap, name: dojo noodlepricerange: cheap}, attraction: {area:bar}, attraction: {area: centre, type: en-centre, type: entertainment}}tertainment}}5U5: thanks . i am also lookingfor some entertainment close tothe restaurant . any suggestions?R5: i am sorry i do not have anyB6:{restaurant:{area:centre,B6:{restaurant:{area:centre,attractions meeting the criteriapricerange: cheap, name: dojo noodlepricerange: cheap}, attraction: {area:you listed . is there another typebar}, attraction: {area: centre, type:centre, type: architecture}}of attraction or area you wouldarchitecture}}like me to search ?6U6: why do not you try an archi-R6: attraction_name looks good , wouldR6: attraction_name is a great attrac-tectural attraction , instead .you like to head there ?tion_type in the center of town . wouldyou like more information ?R6: all saints church looks goodB7:{restaurant:{area:centre,B7:{restaurant:{area:centre,, would you like to head there ?pricerange: cheap, name: dojo noodlepricerange: cheap}, attraction: {area:bar}, attraction: {area: centre, type:centre, type: architecture}}architecture}}7U7: yes please . can you let meR7:its entrance fee is attrac-R7:the entrance fee is attrac-know what the entrance fee istion_pricerange .tion_pricerange . is there anythingtoo ?else i can help you with ?R7: its entrance fee is free .B8:{restaurant:{area:centre,B8:{restaurant:{area:centre,pricerange:cheap, name:dojopricerange: cheap}, attraction: {area:noodle bar}, attraction: {area: centre,centre, type:architecture}, taxi:type: architecture}, taxi: {departure:{destination: dojo noodle bar}}dojo noodle bar, destination: all saintschurch}}8U8: i also need to book a taxiR8: what time would you like the taxi toR8: what time would you like to leave orbetween the restaurant and thepick you up from restaurant_name ?arrive by ?church ."}, {"figure_label": "10", "figure_type": "table", "figure_id": "tab_19", "figure_caption": "Complete turns of an example multi-domain dialogue with each turn including the input of past system response R t\u22121 and current user utterance U t , and the predicted dialogue state B t and system response U t . The dialogue consists of 11 turns in total and extends across 3 domains sequentially: restaurant, attraction, and taxi.Dialogue continues inTable 11. R9: your taxi is booked . the car is a blue bmw and the contact number is 07239644669 . is there anything else i can help you with ? B10: {restaurant: {area: centre, pricerange: cheap, name: dojo noodle bar}, attraction: {area: centre, type: ar-chitecture}, taxi: {departure: dojo noodle bar, destination: all saints church, leaveAt: 1830}}", "figure_data": "TurnInput DialogueGround-truth State and ResponseOur Predicted State and ResponseR8: what time would you likeB9:{restaurant:{area:centre,B9:{restaurant:{area:centre,the taxi to pick you up from dojopricerange: cheap, name: dojo noodlepricerange: cheap}, attraction: {area:noodle bar ?bar}, attraction: {area: centre, type: ar-centre, type:architecture}, taxi:chitecture}, taxi: {departure: dojo noo-{destination: dojo noodle bar}}dle bar, destination: all saints church,leaveAt: 1830}}9U9: 1830 , please .R9: your taxi is booked . the car isR9: booking completed ! bookeda taxi_type and the contact number iscar type taxi_type contact numbertaxi_phone . is there anything else i cantaxi_phone can i help you with anythinghelp you with ?else ?B10: {restaurant: {area: centre,pricerange: cheap}, attraction: {area:centre, type: architecture}, taxi: {des-tination: dojo noodle bar}}10U10: that s it . thanks .R10: awesome , enjoy your trip !R10: you are welcome . have a great day!R10: awesome , enjoy your tripB11: {restaurant: {area: centre,B11: {restaurant: {area: centre,!pricerange: cheap, name: dojo noodlepricerange: cheap}, attraction: {area:bar}, attraction: {area: centre, type: ar-centre, type: architecture}, taxi: {des-chitecture}, taxi: {departure: dojo noo-tination: dojo noodle bar}}dle bar, destination: all saints church,leaveAt: 1830}}11U11: thanks ! i will definitelyR11: great ! goodbye and have a niceR11: thank you for using our services .try to .day .have a great day ."}, {"figure_label": "11", "figure_type": "table", "figure_id": "tab_20", "figure_caption": "Dialogue continues from Table", "figure_data": ""}], "doi": "10.18653/v1/D19-5602"}