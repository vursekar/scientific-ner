{"authors": "Daniel Fern\u00e1ndez-Gonz\u00e1lez; Carlos G\u00f3mez-Rodr\u00edguez", "pub_date": "", "title": "Left-to-Right Dependency Parsing with Pointer Networks", "abstract": "We propose a novel transition-based algorithm that straightforwardly parses sentences from left to right by building n attachments, with n being the length of the input sentence. Similarly to the recent stack-pointer parser by Ma et al. ( 2018), we use the pointer network framework that, given a word, can directly point to a position from the sentence. However, our left-to-right approach is simpler than the original top-down stack-pointer parser (not requiring a stack) and reduces transition sequence length in half, from 2n \u2212 1 actions to n. This results in a quadratic non-projective parser that runs twice as fast as the original while achieving the best accuracy to date on the English PTB dataset (96.04% UAS, 94.43% LAS) among fully-supervised singlemodel dependency parsers, and improves over the former top-down transition system in the majority of languages tested.", "sections": [{"heading": "Introduction", "text": "Dependency parsing, the task of automatically obtaining the grammatical structure of a sentence expressed as a dependency tree, has been widely studied by natural language processing (NLP) researchers in the last decades. Most of the models providing competitive accuracies fall into two broad families of approaches: graph-based (Mc-Donald et al., 2005a,b) and transition-based (Yamada and Matsumoto, 2003;Nivre, 2003) dependency parsers.\nGiven an input sentence, a graph-based parser scores trees by decomposing them into factors, and performs a search for the highest-scoring tree.\nIn the past two years, this kind of dependency parsers have been ahead in terms of accuracy thanks to the graph-based neural architecture developed by Dozat and Manning (2016), which not only achieved state-of-the-art accuracies on the Stanford Dependencies conversion of the English Penn Treebank (hereinafter, PTB-SD), but also obtained the best results in the majority of languages in the CoNLL 2017 Shared Task (Dozat et al., 2017). This tendency recently changed, since a transition-based parser developed by Ma et al. (2018) managed to outperform the best graphbased model in the majority of datasets tested.\nTransition-based parsers incrementally build a dependency graph for an input sentence by applying a sequence of transitions. This results in more efficient parsers with linear time complexity for parsing projective sentences, or quadratic for handling non-projective structures, when implemented with greedy or beam search. However, their main weakness is the lack of access to global context information when transitions are greedily chosen. This favours error propagation, mainly affecting long dependencies that require a larger number of transitions to be built (McDonald and Nivre, 2011).\nMany attempts have been made to alleviate the impact of error propagation in transition-based dependency parsing, but the latest and most successful approach was developed by Ma et al. (2018). In particular, they make use of pointer networks (Vinyals et al., 2015) to implement a new neural network architecture called stack-pointer network.\nThe proposed framework provides a global view of the input sentence by capturing information from the whole sentence and all the arcs previously built, crucial for reducing the effect of error propagation; and, thanks to an attention mechanism (Bahdanau et al., 2014;Luong et al., 2015), is able to return a position in that sentence that corresponds to a word related to the word currently on top of the stack. They take advantage of this and propose a novel transition system that follows a top-down depth-first strategy to perform the syntactic analysis. Concretely, it considers the word pointed by the neural network as the child of the word on top of the stack, and builds the corresponding dependency relation between them. This results in a transition-based algorithm that can process unrestricted non-projective sentences in O(n 2 ) time complexity and requires 2n-1 actions to successfully parse a sentence with n words.\nWe also take advantage of pointer network capabilities and use the neural network architecture introduced by Ma et al. (2018) to design a nonprojective left-to-right transition-based algorithm, where the position value pointed by the network has the opposite meaning: it denotes the index that corresponds to the head node of the current focus word. This results in a straightforward transition system that can parse a sentence in just n actions, without the need of any additional data structure and by just attaching each word from the sentence to another word (including the root node). Apart from increasing the parsing speed twofold (while keeping the same quadratic time complexity), it achieves the best accuracy to date among fully-supervised single-model dependency parsers on the PTB-SD, and obtains competitive accuracies on twelve different languages in comparison to the original top-down version.\n2 Preliminaries Ma et al. (2018) propose a novel neural network architecture whose main backbone is a pointer network (Vinyals et al., 2015). This kind of neural networks are able to learn the conditional probability of a sequence of discrete numbers that correspond to positions in an input sequence (in this case, indexes of words in a sentence) and, by means of attention (Bahdanau et al., 2014;Luong et al., 2015), implement a pointer that selects a position from the input at decoding time.\nTheir approach initially reads the whole sentence, composed of the n words w 1 , . . . , w n , and encodes each w i one by one into an encoder hidden state e i . As encoder, they employ a combination of CNNs and bi-directional LSTMs (Chiu and Nichols, 2016;Ma and Hovy, 2016). For each word, CNNs are used to obtain its character-level representation that is concatenated to the word and PoS embeddings to finally be fed into BiLSTMs that encode word context information.\nAs decoder they present a top-down transition system, where parsing configurations use the classic data structures (Nivre, 2008): a buffer (that contains unattached words) and a stack (that holds partially processed words).\nThe available parser actions are two transitions that we call Shift-Attach-p and Reduce. Given a configuration with word w i on top of the stack, as the pointer network just returns a position p from a given sentence, they proceed as follows to determine which transition should be applied:\n\u2022 If p = i, then the pointed word w p is considered as a child of w i ; so the parser chooses a Shift-Attach-p transition to move w p from the buffer to the stack and build an arc w i \u2192 w p . \u2022 On the other hand, if p = i, then w i is considered to have found all its children, and a Reduce transition is applied to pop the stack. The parsing process starts with a dummy root $ on the stack and, by applying 2n-1 transitions, a dependency tree is built for the input in a top-down depth-first fashion, where multiple children of a same word are forced during training to be created in an inside-out manner. More in detail, for each parsing configuration c t , the decoder (implemented as a uni-directional LSTM) receives the encoder hidden state e i of the word w i on top of the stack to generate a decoder hidden state d t . After that, d t , together with the sequence s i of encoder hidden states from words still in the buffer plus e i , are used to compute the attention vector a t as follows:\nv t i = score(d t , s i ) (1) a t = sof tmax(v t )(2)\nAs attention scoring function (score()), they adopt the biaffine attention mechanism described in (Luong et al., 2015;Dozat and Manning, 2016). Finally, the attention vector a t will be used to return the highest-scoring position p and choose the next transition. The parsing process ends when only the root remains on the stack. As extra high-order features, Ma et al. ( 2018) add grandparent and sibling information, whose encoder hidden states are added to that of the word on top of the stack to generate the corresponding decoder hidden state d t . They prove that these additions improve final accuracy, especially when children are attached in an inside-out fashion.\nAccording to the authors, the original stackpointer network is trained to maximize the likelihood of choosing the correct word for each possible top-down path from the root to a leaf. More in detail, a dependency tree can be represented as a sequence of top-down paths p 1 , . . . , p k , where each path p i corresponds to a sequence of words $, w i,1 , w i,2 , . . . , w i,l i from the root to a leaf. Thus, the conditional probability P \u03b8 (y|x) of the dependency tree y for an input sentence x can be factorized according to this top-down structure as:\nP \u03b8 (y|x) = k i=1 P \u03b8 (p i |p <i , x) = k i=1 l i j=1 P \u03b8 (w i,j |w i,<j , p <i , x)\nwhere \u03b8 represents model parameters, p <i stands for previous paths already explored, w i,j denotes the jth word in path p i and w i,<j represents all the previous words on p i .\nFor more thorough details of the stack-pointer network architecture and the top-down transition system, please read the original work by Ma et al. (2018).", "n_publication_ref": 22, "n_figure_ref": 0}, {"heading": "Our approach", "text": "We take advantage of the neural network architecture designed by Ma et al. (2018) and introduce a simpler left-to-right transition system that requires neither a stack nor a buffer to process the input sentence and where, instead of selecting a child of the word on top of the stack, the network points to the parent of the current focus word.\nIn particular, in our proposed approach, the parsing configuration just corresponds to a focus word pointer i, that is used to point to the word currently being processed. The decoding process starts with i pointing at the first word of the sentence and, at each parsing configuration, only one action is available: the parameterized Attach-p transition, that links the focus word w i to the head word w p in position p of the sentence (producing the dependency arc w p \u2192 w i ) and moves i one position to the right. Note that, in our algorithm, p can equal 0, attaching, in that case, w i to the dummy root node. The parsing process ends when the last word from the sentence is attached. This can be easily represented as a loop that traverses the input sentence from left to right, linking each word to another from the same sentence or to the dummy root. Therefore, we just need n steps to process the n words of a given sentence and build a dependency tree.\nWhile our novel transition system intrinsically holds the single-head constraint (since, after attaching the word w i , i points to the next word w i+1 in the sentence), it can produce an output with cycles. 1 Therefore, in order to build a wellformed dependency tree during decoding, attachments that generate cycles in the already-built dependency graph must be forbidden. Please note that the need of a cycle-checking extension does not increase the overall quadratic runtime complexity of the original implementation by Ma et al. (2018) since, as in other transition-based parsers such as (Covington, 2001;G\u00f3mez-Rodr\u00edguez and Nivre, 2010), cycles can be incrementally identified in amortized constant time by keeping track of connected components using path compression and union by rank. Therefore, the left-to-right algorithm requires n steps to produce a parse. In addition, at each step, the attention vector a t needs to be computed and cycles must be checked, both in O(n) + O(n) = O(n) runtime. This results in a O(n 2 ) time complexity for decoding. 2 On the other hand, while in the top-down decoding only available words in the buffer (plus the word on top of the stack) can be pointed to by the network and they are reduced as arcs are created (basically to keep the single-head constraint); our proposed approach is less rigid: all words from the sentence (including the root node and excluding w i ) can be pointed to, as long as they satisfy the acyclicity constraint. This is necessary because two different words might be attached to the same head node and the latter can be located in the sentence either before or after w i . Therefore, the sequence s i , required by the attention score function (Eq.(1)), is composed of the encoder hidden states of all words from the input, excluding e i , and prepending a special vector representation denoting the root node.\nWe also add extra features to represent the current focus word. Instead of using grandparent and sibling information (more beneficial for a topdown approach), we just add the encoder hidden states of the previous and next words in the sentence to generate d t , which seems to be more suitable for a left-to-right decoding.\nIn dependency parsing, a tree for an input sentence of length n can be represented as a set of n directed and binary links l 1 , . . . , l n . Each link l i is characterized by the word w i in position i in the sentence and its head word w h , resulting in a pair (w i , w h ). Therefore, to train this novel variant, we factorize the conditional probability P \u03b8 (y|x) to a set of head-dependent pairs as follows:\nP \u03b8 (y|x) = n i=1 P \u03b8 (l i |l <i , x) = n i=1 P \u03b8 (w h |w i , l <i , x)\nTherefore, the left-to-right parser is trained by maximizing the likelihood of choosing the correct head word w h for the word w i in position i, given the previous predicted links l <i .\nFinally, following a widely-used approach (also implemented in (Ma et al., 2018)), dependency labels are predicted by a multiclass classifier, which is trained in parallel with the parser by optimizing the sum of their objectives.", "n_publication_ref": 6, "n_figure_ref": 0}, {"heading": "Experiments", "text": "", "n_publication_ref": 0, "n_figure_ref": 0}, {"heading": "Data and Settings", "text": "We use the same implementation as Ma et al. (2018) and conduct experiments on the Stanford Dependencies (de Marneffe and Manning, 2008) conversion (using the Stanford parser v3.3.0) 3 of the English Penn Treebank (Marcus et al., 1993), with standard splits and predicted PoS tags. In addition, we compare our approach to the original top-down parser on the same twelve languages from the Universal Dependency Treebanks 4 (UD) that were used by Ma et al. (2018). 5 Following standard practice, we just exclude punctuation for evaluating on PTB-SD and, for each experiment, we report the average Labelled and Unlabelled Attachment Scores (LAS and UAS) over 3 and 5 repetitions for UD and PTB-SD, respectively.\n3 https://nlp.stanford.edu/software/ lex-parser.shtml 4 http://universaldependencies.org 5 Please note that, since they used a former version of UD datasets, we reran also the top-down algorithm on the latest treebank version (2.2) in order to perform a fair comparison.", "n_publication_ref": 4, "n_figure_ref": 0}, {"heading": "Parser", "text": "UAS LAS Chen and Manning (2014) 91.8 89.6 Dyer et al. (2015) 93.1 90.9  93.99 92.05  93.56 91.42 Kiperwasser and Goldberg (2016) 93.9 91.9  94.23 92.36  94.3 92.2 Fern\u00e1ndez-G and G\u00f3mez-R (2018)   Systems marked with * , including the improved variant described in (Ma et al., 2018) of the graph-based parser by (Dozat and Manning, 2016), are implemented under the same framework as our approach and use the same training settings. Like (Ma et al., 2018), we report the average accuracy over 5 repetitions.\nFinally, we use the same hyper-parameter values, pre-trained word embeddings and beam size (10 for PTB-SD and 5 for UD) as Ma et al. (2018).", "n_publication_ref": 8, "n_figure_ref": 0}, {"heading": "Results", "text": "By outperforming the two current state-of-theart graph-based (Dozat and Manning, 2016) and transition-based (Ma et al., 2018) models on the PTB-SD, our approach becomes the most accurate fully-supervised dependency parser developed so far, as shown in Table 1. 6 In addition, in Table 2 we can see how, under the exactly same conditions, the left-to-right algorithm improves over the original top-down variant in nine out of twelve languages in terms of LAS, obtaining competitive results in the remaining three datasets.\nFinally, in spite of requiring a cycle-checking procedure, our approach proves to be twice as fast as the top-down alternative in decoding time,  achieving, under the exact same conditions, a 23.08-sentences-per-second speed on the PTB-SD compared to 10.24 of the original system. 7", "n_publication_ref": 3, "n_figure_ref": 0}, {"heading": "Related work", "text": "There is previous work that proposes to implement dependency parsing by independently selecting the head of each word in a sentence, using neural networks. In particular, Zhang et al. (2017) make use of a BiLSTM-based neural architecture to compute the probability of attaching each word to one of the other input words, in a similar way as pointer networks do. During decoding, a postprocessing step is needed to produce well-formed trees by means of a maximum spanning tree algorithm. Our approach does not need this postprocessing, as cycles are forbidden during parsing instead, and achieves a higher accuracy thanks to the pointer network architecture and the use of information about previous dependencies.\nBefore Ma et al. (2018) presented their topdown parser, Chorowski et al. (2017) had already employed pointer networks (Vinyals et al., 2015) for dependency parsing. Concretely, they developed a pointer-network-based neural architecture with multitask learning able to perform preprocessing, tagging and dependency parsing exclusively by reading tokens from an input sen-tence, without needing POS tags or pre-trained word embeddings. Like our approach, they also use the capabilities provided by pointer networks to undertake the parsing task as a simple process of attaching each word as dependent of another. They also try to improve the network performance with POS tag prediction as auxiliary task and with different approaches to perform label prediction. They do not exclude cycles, neither by forbidding them at parsing time or by removing them by post-processing, as they report that their system produces parses with a negligible amount of cycles, even with greedy decoding (matching our observation for our own system, in our case with beam-search decoding). Finally, the system developed by Chorowski et al. (2017) is constrained to projective dependencies, while our approach can handle unrestricted non-projective structures.", "n_publication_ref": 5, "n_figure_ref": 0}, {"heading": "Conclusion", "text": "We present a novel left-to-right dependency parser based on pointer networks. We follow the same neural network architecture as the stack-pointerbased approach developed by Ma et al. (2018), but just using a focus word index instead of a buffer and a stack. Apart from doubling their system's speed, our approach proves to be a competitive alternative on a variety of languages and achieves the best accuracy to date on the PTB-SD.\nThe good performance of our algorithm can be explained by the shortening of the transition sequence length. In fact, it has been proved by several studies (Fern\u00e1ndez-Gonz\u00e1lez and G\u00f3mez-Rodr\u00edguez, 2012;Fern\u00e1ndez-Gonz\u00e1lez and G\u00f3mez-Rodr\u00edguez, 2018) that by reducing the number of applied transitions, the impact of error propagation is alleviated, yielding more accurate parsers.\nOur system's source code is freely available at https://github.com/danifg/ Left2Right-Pointer-Parser.", "n_publication_ref": 3, "n_figure_ref": 0}, {"heading": "Acknowledgments", "text": "This work has received funding from the European Research Council (ERC), under the European Union's Horizon 2020 research and innovation programme (FASTPARSE, grant agreement No 714150), from MINECO (FFI2014-51978-C2-2-R, TIN2017-85160-C2-1-R) and from Xunta de Galicia (ED431B 2017/01).", "n_publication_ref": 0, "n_figure_ref": 0}], "references": [{"title": "Improved transition-based parsing and tagging with neural networks", "journal": "", "year": "2015-09-17", "authors": "Chris Alberti; David Weiss; Greg Coppola; Slav Petrov"}, {"title": "Globally normalized transition-based neural networks", "journal": "Long Papers", "year": "2016-08-07", "authors": "Daniel Andor; Chris Alberti; David Weiss; Aliaksei Severyn; Alessandro Presta; Kuzman Ganchev; Slav Petrov; Michael Collins"}, {"title": "Neural machine translation by jointly learning to align and translate", "journal": "CoRR", "year": "2014", "authors": "Dzmitry Bahdanau; Kyunghyun Cho; Yoshua Bengio"}, {"title": "Training with exploration improves a greedy stack LSTM parser", "journal": "", "year": "2016-11-01", "authors": "Miguel Ballesteros; Yoav Goldberg; Chris Dyer; Noah A Smith"}, {"title": "A fast and accurate dependency parser using neural networks", "journal": "", "year": "2014", "authors": "Danqi Chen; Christopher Manning"}, {"title": "Bi-directional attention with agreement for dependency parsing", "journal": "Association for Computational Linguistics", "year": "2016", "authors": "Hao Cheng; Hao Fang; Xiaodong He; Jianfeng Gao; Li Deng"}, {"title": "Named entity recognition with bidirectional lstm-cnns", "journal": "", "year": "2016", "authors": "Jason Chiu; Eric Nichols"}, {"title": "Read, tag, and parse all at once, or fully-neural dependency parsing", "journal": "CoRR", "year": "2017", "authors": "Jan Chorowski; Michal Zapotoczny; Pawel Rychlikowski"}, {"title": "A fundamental algorithm for dependency parsing", "journal": "ACM", "year": "2001", "authors": "Michael A Covington"}, {"title": "Deep biaffine attention for neural dependency parsing", "journal": "CoRR", "year": "2016", "authors": "Timothy Dozat; Christopher D Manning"}, {"title": "Stanford's graph-based neural dependency parser at the conll 2017 shared task", "journal": "", "year": "2017-08-03", "authors": "Timothy Dozat; Peng Qi; Christopher D Manning"}, {"title": "Transitionbased dependency parsing with stack long shortterm memory", "journal": "Long Papers", "year": "2015-07-26", "authors": "Chris Dyer; Miguel Ballesteros; Wang Ling; Austin Matthews; Noah A Smith"}, {"title": "Improving transition-based dependency parsing with buffer transitions", "journal": "Association for Computational Linguistics", "year": "2012", "authors": "Daniel Fern\u00e1ndez; - Gonz\u00e1lez; Carlos G\u00f3mez-Rodr\u00edguez"}, {"title": "Non-projective dependency parsing with non-local transitions", "journal": "Association for Computational Linguistics", "year": "2018", "authors": "Daniel Fern\u00e1ndez; - Gonz\u00e1lez; Carlos G\u00f3mez-Rodr\u00edguez"}, {"title": "A transition-based parser for 2-planar dependency structures", "journal": "", "year": "2010", "authors": "Carlos G\u00f3mez; -Rodr\u00edguez ; Joakim Nivre"}, {"title": "Simple and accurate dependency parsing using bidirectional LSTM feature representations", "journal": "TACL", "year": "2016", "authors": "Eliyahu Kiperwasser; Yoav Goldberg"}, {"title": "Distilling an ensemble of greedy dependency parsers into one mst parser", "journal": "Association for Computational Linguistics", "year": "2016", "authors": "Adhiguna Kuncoro; Miguel Ballesteros; Lingpeng Kong; Chris Dyer; Noah A Smith"}, {"title": "Effective approaches to attention-based neural machine translation", "journal": "Association for Computational Linguistics", "year": "2015", "authors": "Thang Luong; Hieu Pham; Christopher D Manning"}, {"title": "End-to-end sequence labeling via bi-directional lstm-cnns-crf", "journal": "Association for Computational Linguistics", "year": "2016", "authors": "Xuezhe Ma; Eduard Hovy"}, {"title": "Neural probabilistic model for non-projective mst parsing", "journal": "Long Papers", "year": "2017", "authors": "Xuezhe Ma; Eduard Hovy"}, {"title": "Stackpointer networks for dependency parsing", "journal": "Long Papers", "year": "2018-07-15", "authors": "Xuezhe Ma; Zecong Hu; Jingzhou Liu; Nanyun Peng; Graham Neubig; Eduard H Hovy"}, {"title": "Building a large annotated corpus of English: The Penn Treebank", "journal": "Computational Linguistics", "year": "1993", "authors": "Mitchell P Marcus; Beatrice Santorini; Mary Ann Marcinkiewicz"}, {"title": "The stanford typed dependencies representation", "journal": "", "year": "2008", "authors": "Marie-Catherine De Marneffe; Christopher D Manning"}, {"title": "Online large-margin training of dependency parsers", "journal": "", "year": "2005", "authors": "Ryan Mcdonald; Koby Crammer; Fernando Pereira"}, {"title": "Analyzing and integrating dependency parsers", "journal": "Comput. Linguist", "year": "2011", "authors": "Ryan Mcdonald; Joakim Nivre"}, {"title": "Non-projective dependency parsing using spanning tree algorithms", "journal": "", "year": "2005", "authors": "Ryan Mcdonald; Fernando Pereira; Kiril Ribarov"}, {"title": "An efficient algorithm for projective dependency parsing", "journal": "ACL/SIGPARSE", "year": "2003", "authors": "Joakim Nivre"}, {"title": "Algorithms for deterministic incremental dependency parsing", "journal": "Computational Linguistics", "year": "2008", "authors": "Joakim Nivre"}, {"title": "Arc-swift: A novel transition system for dependency parsing", "journal": "Short Papers", "year": "2017-07-30", "authors": "Peng Qi; Christopher D Manning"}, {"title": "", "journal": "", "year": "2015", "authors": "Oriol Vinyals; Meire Fortunato; Navdeep Jaitly"}, {"title": "Advances in Neural Information Processing Systems", "journal": "Curran Associates, Inc", "year": "", "authors": "D D Lawrence; M Lee; R Sugiyama;  Garnett"}, {"title": "Graph-based dependency parsing with bidirectional lstm", "journal": "Association for Computational Linguistics", "year": "2016", "authors": "Wenhui Wang; Baobao Chang"}, {"title": "Structured training for neural network transition-based parsing", "journal": "Long Papers", "year": "2015-07-26", "authors": "David Weiss; Chris Alberti; Michael Collins; Slav Petrov"}, {"title": "Statistical dependency analysis with support vector machines", "journal": "", "year": "2003", "authors": "Hiroyasu Yamada; Yuji Matsumoto"}, {"title": "Dependency parsing as head selection", "journal": "Long Papers", "year": "2017-04-03", "authors": "Xingxing Zhang; Jianpeng Cheng; Mirella Lapata"}], "figures": [{"figure_label": "1", "figure_type": "table", "figure_id": "tab_1", "figure_caption": "", "figure_data": ": Accuracy comparison of state-of-the-artfully-supervised single-model dependency parsers onPT-SD. The first block contains transition-based al-gorithms and the second one, graph-based models."}, {"figure_label": "", "figure_type": "table", "figure_id": "tab_2", "figure_caption": "42\u00b10.02 90.70\u00b10.04 94.28\u00b10.06 90.66\u00b10.11 ca 93.83\u00b10.02 91.96\u00b10.01 94.07\u00b10.06 92.26\u00b10.05 cs 93.97\u00b10.02 91.23\u00b10.03 94.19\u00b10.04 91.45\u00b10.05 de 87.28\u00b10.07 82.99\u00b10.07 87.06\u00b10.05 82.63\u00b10.01 en 90.86\u00b10.15 88.92\u00b10.19 90.93\u00b10.11 88.99\u00b10.11 es 93.09\u00b10.05 91.11\u00b10.03 93.23\u00b10.03 91.28\u00b10.02 fr 90.97\u00b10.09 88.22\u00b10.12 90.90\u00b10.04 88.14\u00b10.10 it 94.08\u00b10.04 92.24\u00b10.06 94.28\u00b10.06 92.48\u00b10.02 nl 93.23\u00b10.09 90.67\u00b10.07 93.13\u00b10.07 90.74\u00b10.08 no 95.02\u00b10.05 93.75\u00b10.05 95.23\u00b10.06 93.99\u00b10.07 ro 91.44\u00b10.11 85.80\u00b10.14 91.58\u00b10.08 86.00\u00b10.07 ru 94.43\u00b10.01 93.08\u00b10.03 94.71\u00b10.07 93.38\u00b10.09", "figure_data": "Top-downLeft-to-rightUASLASUASLASbu 94."}, {"figure_label": "2", "figure_type": "table", "figure_id": "tab_3", "figure_caption": "Parsing accuracy of the top-down and left-toright pointer-network-based parsers on test datasets of twelve languages from UD. Best results for each language are shown in bold and, apart from the average UAS and LAS, we also report the corresponding standard deviation over 3 runs.", "figure_data": ""}], "doi": "10.18653/v1/D16-1238"}