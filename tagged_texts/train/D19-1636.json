[{"text": "Proceedings of the 2019 Conference on Empirical Methods in Natural Language Processing and the 9th International Joint Conference on Natural Language Processing , pages 6144\u20136154 , Hong Kong , China , November 3\u20137 , 2019 .", "entities": []}, {"text": "c", "entities": []}, {"text": "2019 Association for Computational Linguistics6144A Modular Architecture for Unsupervised Sarcasm Generation Abhijit Mishra , Tarun Tater , Karthik Sankaranarayanan IBM Research fabhijimi , ttater24,kartsank g@in.ibm.com", "entities": []}, {"text": "Abstract", "entities": []}, {"text": "In this paper , we propose a novel framework for sarcasm generation ; the system takes a literal negative opinion as input and translates it into a sarcastic version .", "entities": []}, {"text": "Our framework does not require any paired data for training .", "entities": []}, {"text": "Sarcasm emanates from context - incongruity which becomes apparent as the sentence unfolds .", "entities": []}, {"text": "Our framework introduces incongruity into the literal input version through modules that : ( a ) \ufb01lter factual content from the input opinion , ( b ) retrieve incongruous phrases related to the \ufb01ltered facts and ( c ) synthesize sarcastic text from the \ufb01ltered and incongruous phrases .", "entities": []}, {"text": "The framework employs reinforced neural sequence to sequence learning and information retrieval and is trained only using unlabeled non - sarcastic and sarcastic opinions .", "entities": [[5, 8, "MethodName", "sequence to sequence"], [10, 12, "TaskName", "information retrieval"]]}, {"text": "Since no labeled dataset exists for such a task , for evaluation , we manually prepare a benchmark dataset containing literal opinions and their sarcastic paraphrases .", "entities": []}, {"text": "Qualitative and quantitative performance analyses on the data reveal our system \u2019s superiority over baselines , built using known unsupervised statistical and neural machine translation and style transfer techniques .", "entities": [[23, 25, "TaskName", "machine translation"], [26, 28, "TaskName", "style transfer"]]}, {"text": "1 Introduction Sarcasm1is an intensive , ironic construct that is intended to express contempt or ridicule .", "entities": []}, {"text": "It is often linked with intelligence , creativity , and wit , and therefore empowering machines to generate sarcasm is in line with the key goals of Strong AI2 .", "entities": []}, {"text": "From the perspective of Natural Language Generation ( NLG ) , sarcasm generation remains an important problem and can prove useful in downstream applications such as conversation systems , recommenders , and online content generators .", "entities": []}, {"text": "For instance , in a conversational setting , a 1https://www.thefreedictionary.com/Sarcasm 2https://en.wikipedia.org/wiki/Arti\ufb01cial general intelligencemore natural and intriguing form of conversation between humans and machines could happen if machines can intermittently generate sarcastic responses , like their human counterparts .", "entities": []}, {"text": "Over the years , a lot of research and development efforts have gone into the problem of detecting sarcasm in text , which aims to classify whether a given text contains sarcasm or not ( Joshi et al .", "entities": []}, {"text": "( 2017b ) provide an overview ) .", "entities": []}, {"text": "However , systems for generation of sarcasm have been elusive .", "entities": []}, {"text": "This is probably due to the fact that in sarcasm generation both selection of contents for sarcastic opinion generation and surface realization of contents in natural language form are highly nuanced .", "entities": []}, {"text": "In the broader area of style transformation of texts , most of the existing works have focused narrowly on transformations at lexical and syntax levels , i.e. , text simpli\ufb01cation ( Siddharthan , 2014 ) , text formalization ( Jain et al . , 2018 ) , sentiment style transfer ( Shen et al . , 2017 ; Xu et", "entities": [[48, 50, "TaskName", "style transfer"]]}, {"text": "al . , 2018 ) , sentiment \ufb02ipping ( Li et al . , 2018 ) and understanding humor ( West and Horvitz , 2019 ) .", "entities": []}, {"text": "However , very little work has been done ( ( Piwek , 2003),(Hovy , 1987 ) ) on incorporating pragmaticsinto generation tasks such as sarcasm .", "entities": []}, {"text": "Sarcasm generation offers a rich playground to study this challenge and push the state - of - the - art in text transformation .", "entities": []}, {"text": "Moreover , being a pragmatic task , sarcasm construction offers diverse ways to convey the same intent , based on cultural , social and demographic backgrounds .", "entities": []}, {"text": "Hence , a supervised treatment of sarcasm generation using paired labeled data ( such as parallel sentences ) will be highly restrictive .", "entities": []}, {"text": "This further motivates the need for exploring unsupervised approaches as the one we propose in this paper .", "entities": []}, {"text": "We make the \ufb01rst attempt towards automatic sarcasm generation where the generation is conditioned on a literal input sentence .", "entities": []}, {"text": "For example , the literal opinion \u201c I hate it when my bus is late . \u201d", "entities": []}, {"text": "6145should be transformed into \u201c Absolutely love waiting for the bus \u201d .", "entities": []}, {"text": "As sarcasm conveys a negative sentiment , our system expects a negative sentiment opinion as input .", "entities": []}, {"text": "Out of various possible theories proposed to explain the phenomenon of sarcasm construction ( Joshi et al . , 2017b ) , our framework relies on the theory of context incongruity ( Campbell and Katz , 2012 ) .", "entities": []}, {"text": "Context incongruity is prevalent in textual sarcasm ( Riloff et al . , 2013 ; Joshi et", "entities": []}, {"text": "al . , 2015b ) .", "entities": []}, {"text": "The theory presents sarcasm as a contrast between positive sentiment context ( e.g. , absolutely loved it ) and negative situational context ( e.g. , my bus is late ) .", "entities": []}, {"text": "In our framework , translation of literal sentences to sarcastic ones happens in four stages viz . , ( 1 ) Sentiment Neutralization , during which sentiment - bearing words and phrases are \ufb01ltered from the input , ( 2 ) Positive Sentiment Induction , where the neutralized input is translated into phrases conveying a strong positive sentiment , ( 3 ) Negative Situation Retrieval , during which a negative situation related to the input is retrieved , and ( 4 ) Sarcasm Synthesis , where appropriate sarcastic constructs are formed from the positive sentiment and negative situation phrases gathered in the \ufb01rst three stages .", "entities": []}, {"text": "Training and development of these modules require only three unpaired corpora of positive , negative , and sarcastic opinions .", "entities": []}, {"text": "For evaluating the system , we manually prepare a small benchmark dataset which contains a set of literal opinions and their corresponding sarcastic paraphrases .", "entities": []}, {"text": "Quantitative evaluation of our system is done using popular translation - evaluation metrics , and document similarity measurement metrics .", "entities": []}, {"text": "For qualitative evaluation , we consider the human judgment of sarcastic intensity , \ufb02uency , and adequacy of the generated sentences .", "entities": []}, {"text": "As baselines , we consider some of our simplistic model variants and existing systems for unsupervised machine translation and style transfer .", "entities": [[15, 18, "TaskName", "unsupervised machine translation"], [19, 21, "TaskName", "style transfer"]]}, {"text": "Our overall observation is that our system often generates sarcasm of better quality than the baselines .", "entities": []}, {"text": "The code , data , and resources are available at https://github.com/ TarunTater / sarcasm generation .", "entities": []}, {"text": "2 Challenges in Sarcasm Generation Generation of sarcasm , unlike other language generation tasks , is highly nuanced .", "entities": []}, {"text": "If we reconsider the example in the introductory section , the output sentence is sarcastic as it presents an unusualsituation where the opinion holder has liked the rather boring act of waiting for a bus .", "entities": []}, {"text": "The unusualness ( and hence , the sarcasm ) arises from two implicitly opposing ( incongruous ) contexts : love andwaiting for the bus .", "entities": []}, {"text": "Such a form of sarcasm , based on the context incongruity theory ( Campbell and Katz , 2012 ) , is more common in text than other forms such as prepositional , embedded or illocutionary sarcasm ( Camp , 2012 ) .", "entities": []}, {"text": "For any textual sarcasm generator , \ufb01guring out contextually incongruous phrases will be as dif\ufb01cult as generating a \ufb02uent sentence .", "entities": []}, {"text": "Moreover , most of the existing language generators are known to work on large scale literal / non - sarcastic texts ( e.g. , language models trained on Wikipedia articles ) , and are agnostic of the possible collocations of contextually incongruous phrases ( Joshi et al . , 2017a ) .", "entities": []}, {"text": "We try to overcome these challenges through our modular system design , discussed as follows .", "entities": []}, {"text": "3 System Architecture", "entities": []}, {"text": "The overall system architecture is presented in Figure 1 .", "entities": []}, {"text": "For development of the modules three corpora are needed : ( a ) a corpus of positive sentiment sentences ( P ) , ( b ) a corpus of negative sentiment sentences ( N ) , and ( c ) a corpus of sarcastic sentences ( S ) .", "entities": []}, {"text": "The framework performs transformation of literal text into sarcastic ones in four stages as given below : 3.1 Sentiment Neutralization", "entities": []}, {"text": "The neutralization module is designed to \ufb01lter sentiment information out from the input text .", "entities": []}, {"text": "For example , the input hate when my bus is late should be \ufb01ltered to produce a neutral statement like bus is late .", "entities": []}, {"text": "Neutralization is performed by a neural sentiment classi\ufb01cation module .", "entities": []}, {"text": "Each word in the input sentence of length N(x = fx1;x2;:::;xNg ) ( inone - hot representation , padded wherever necessary ) is transformed into K - dimensional embedding .", "entities": []}, {"text": "The embeddings are then passed through a layer of recurrent units such as Long Short Term Memory ( LSTM)(Hochreiter and Schmidhuber , 1997 ) .", "entities": []}, {"text": "The output of the LSTM layers are then sent to a self - attention layer before passing through a softmax based classi\ufb01er .", "entities": [[4, 5, "MethodName", "LSTM"], [19, 20, "MethodName", "softmax"]]}, {"text": "The classi\ufb01er is trained with the supervision from sentiment positive / negative labels using corpora PandN.", "entities": []}, {"text": "During testing , for a given input of length N , the self attention vector \u000b = \u000b 1 ; \u000b 2 ; : : : ; \u000b Nis \ufb01rst extracted ( details skipped for brevity , refer Xu", "entities": []}, {"text": "6146 IhatebusislateContextSelfAttentionitwhen Neutralized ContextClassifierIloveiswhenbuslateRetrievalSystem2NegativeSituationswaiting for the bus Pos / NegContextAttention buslove waitinglateabsolutelylovewaiting forthebusSarcasm Classifier Processing andStopwordRemovalReconstructionLossSarcasm Content based Reward ScoreSarcasm ContentReward ( A)(B)(D ) INPUT : OUTPUT : Ilatewhenbus AttentionContext(C ) is < EOS > Figure 1 : System Architecture .", "entities": []}, {"text": "Input to the system are literal sentences .", "entities": []}, {"text": "The blue and green boxed represent layers of embedding and LSTMs .", "entities": []}, {"text": "The components are ( A ) Sentiment Neutralizer ( B ) Positive Sentiment Inducer ( C ) Negative Situation Retriever , and ( D ) Sarcasm Synthesizer .", "entities": [[26, 27, "MethodName", "Synthesizer"]]}, {"text": "et al .", "entities": []}, {"text": "( 2018 ) ) .", "entities": []}, {"text": "We then inverse and discretize the self attention vector as follows : ^ \u000b i= ( 0;if \u000b i>\u0016+ 2\u001b 1;otherwise(1 ) where \u000b iis the attention weight for the ithword,\u0016 and\u001bare the mean and standard deviation for the attention vector .", "entities": []}, {"text": "For each word in the input , if the discretized attention weight is 0 , it is \ufb01ltered out .", "entities": [[13, 14, "DatasetName", "0"]]}, {"text": "The motivation behind such a design is that if the classi\ufb01er is trained well , the attention weights will represent the contribution of each word to the overall sentiment decision ( Xu et al . , 2018 ) .", "entities": []}, {"text": "Sentiment bearing words will receive higher attention whereas neutral words will have lower attention weights .", "entities": []}, {"text": "It is worth noting that neutralization can be done in several other ways such as \ufb01ltering based on a sentiment lexicon .", "entities": []}, {"text": "However , such operations would require additional resources such as sentiment dictionary , sense disambiguation tools , whereas the neural classi\ufb01cation based \ufb01ltering can only work with binary sentiment labeled data .", "entities": []}, {"text": "Also , for computing word - level sentiment contributions , recent techniques ( such as gradient - based methods ( Sundararajan et al . , 2017 ) ) can be used .", "entities": []}, {"text": "For simplicity , we use attention based \ufb01ltering.3.2 Positive Sentiment Induction Once the neutralized output is extracted , it is passed to the positive sentiment induction module which transforms it into a positive sentiment sentence .", "entities": []}, {"text": "For this , we use a traditional sequence to sequence pipeline ( Bahdanau et al . , 2014 ) with attention and copy mechanisms ( Gulcehre et al . , 2016 ) .", "entities": [[7, 10, "MethodName", "sequence to sequence"]]}, {"text": "The input is a set of words coming from the neutralization module .", "entities": []}, {"text": "These are transformed into embeddings and are then encoded with the help of LSTM layers .", "entities": [[13, 14, "MethodName", "LSTM"]]}, {"text": "The decoder attends over the encoded output and produces the output tokens based on the attended vector and the previously generated tokens .", "entities": []}, {"text": "This is a standard technique , typically used in neural machine translation .", "entities": [[10, 12, "TaskName", "machine translation"]]}, {"text": "As the output from the system is expected to be positive in sentiment , for training the framework , we use only a set of positive sentences from P. Each sentence in the data is \ufb01ltered using the neutralization module .", "entities": []}, {"text": "The \ufb01ltered version , and the original positive sentence are used ashsource;targetipairs .", "entities": []}, {"text": "3.3 Negative Situation Retrieval Negative situations present in sarcastic opinions are typically extrinsic and are loosely related to the semantics of its literal version .", "entities": []}, {"text": "Hence , a sequence to sequence module analogous to Section", "entities": [[3, 6, "MethodName", "sequence to sequence"]]}, {"text": "61475 - grams : getting up for school facts , getting yelled at by people , trying to schedule my classes , feeling like every single person , walking to class in pouring , making people who already hate , working on my last day , spending countless hours at doctors , getting overdraft statements in mail 4 - grams : talking about world politics , stuck in a generation , sitting in class wondering , canceled at short notice , distancing myself from certain , wipe my own tears 3 - grams : born not breathing , paid to sleep , scared those faces , taking a shower , starting your monday , accused of everything , worrying about someone , \ufb01ght jealousy arguments , license to trill , awarded literature prize 2 - grams : scratching itchy , looking chair , getting hiv , shot \ufb01rst , collecting death , lost respect 1 - gram : canceled , sleeping , trying , buying , stapling Table", "entities": []}, {"text": "1 : Example negative situations extracted using bootstrapping technique ( Riloff et al . , 2013 ) 3.2 may not be very useful .", "entities": []}, {"text": "Moreover , for sarcasm generation , for a certain topic , it is safe to assume that there can be a \ufb01nite set of negative situations .", "entities": []}, {"text": "From this set appropriate situation phrases can be \u201c retrieved \u201d depending on the given input .", "entities": []}, {"text": "Thus , \ufb01nding out appropriate negative situations boils down to two sub - problems of ( a ) preparing a \ufb01nite set of negative situations , and ( b ) setting up the negative situation retrieval process .", "entities": []}, {"text": "We discuss each of these two steps below .", "entities": []}, {"text": "3.3.1 Building Negative Situation Gazetteer This is a one - time process and is done using the unsupervised bootstrapping technique similar to Riloff", "entities": []}, {"text": "et al .", "entities": []}, {"text": "( 2013 ) .", "entities": []}, {"text": "For each sentence in the sarcasm corpus S , a candidate negative situation phrase is extracted .", "entities": []}, {"text": "A candidate negative situation phrase is a word n - gram ( n\u00145 ) that follows a positive sentiment phrase in a sarcastic sentence 3 .", "entities": []}, {"text": "After the candidates for a positive phrase are obtained , their Part of Speech tags are extracted with the help of a POS tagger .", "entities": []}, {"text": "Speci\ufb01c patterns of n - gram are then obtained using the POS tags .", "entities": []}, {"text": "This ensures that the phrases extracted are mostly verb phrases , noun - phrases , and to - in\ufb01nitive verb phrases that describe situations .", "entities": []}, {"text": "In our setting we use 30 prede\ufb01ned POS n - gram patterns following Riloff et al .", "entities": []}, {"text": "( 2013 ) .", "entities": []}, {"text": "Once the candidate negative situation phrases are extracted , they are \ufb01ltered based on a scoring function as given below : scorei=#nsiinS # nsiinS;P;N(2 ) wherensiis theithnegative situation extracted for a certain positive phrase .", "entities": []}, {"text": "The scoring function returns a real value indicating the exclusiveness of the negative situation w.r.t the sarcastic sentences .", "entities": []}, {"text": "If the score exceeds 3the word \u201c love \u201d is considered as the seed positive sentiment phrase to begin the bootstrapping procedurea threshold ( i.e. ,p>0:5 ) , the candidate phrase is added to the gazetteer .", "entities": []}, {"text": "Once all the possible negative situation phrases are extracted , each phrase is used to extract more positive sentiment phrases similarly as above .", "entities": []}, {"text": "This process of positive phrase and negative situation extraction is repeated until no new phrases are found .", "entities": []}, {"text": "Table 1 shows some example negative situation phrases extracted from our dataset .", "entities": []}, {"text": "3.3.2 Retrieval Process The idea is to \ufb01nd negative situations relevant to the input sentence .", "entities": []}, {"text": "We implement an information retrieval system based on PyLucene .", "entities": [[3, 5, "TaskName", "information retrieval"]]}, {"text": "All the negative situations from the gazetteer ( Sec . 3.3.1 ) are \ufb01rst indexed .", "entities": []}, {"text": "The input sentence is considered as the query for which the most relevant negative situation is retrieved from the indexed list .", "entities": []}, {"text": "The factors involved in PyLucene \u2019s retrieval algorithm include tf - idf , number of matching terms in the query sentence and the retrieved sentence , and importance measure of a term according to the total number of terms in the search .", "entities": []}, {"text": "Once the positive sentiment and negative situations are generated for the input sentence , they undergo a post - processing step where stopwords and redundant words are removed and given as input to the sarcasm synthesis module .", "entities": []}, {"text": "3.4 Sarcasm Synthesis The sarcasm synthesis module is a sequence - tosequence network that expects a set of keywords related to positive sentiment and negative situation phrases .", "entities": []}, {"text": "For training this module , the sarcasm corpusSis used .", "entities": []}, {"text": "To prepare the input , we implement a keyword extraction technique based on POS tagging .", "entities": [[8, 10, "TaskName", "keyword extraction"]]}, {"text": "Sentences in Sare POS - tagged and then stopwords are removed , and then based on the POS tags noun , verb , adjective and adverbs are retained .", "entities": []}, {"text": "This way , the input keywords to the system would somewhat be similar to the keywords expected in real time scenario .", "entities": []}, {"text": "6148The module follows an encode - attend - decode style architecture like the positive sentiment induction module , but with a different learning objective .", "entities": []}, {"text": "Keywords in the input ( in one - hot representation , padded wherever necessary ) are transformed into a sequence of embeddings and then encoded by layers of LSTMs , which produces a hidden representations for each input word .", "entities": []}, {"text": "The decoder , consisting of a single layer of LSTMs stacked on the top of a decoder embedding layer , attend over the encoded hidden representations and generate target words .", "entities": []}, {"text": "In general , for T training instances of keywords and sarcastic texts , fxi;yigT i=1 , the training objective is to maximize the likelihood of a target yigivenxi , which is similar to minimizing the cross entropy between the target distribution and the predicted output distribution .", "entities": []}, {"text": "For training the neural network , the crossentropy loss is back propagated .", "entities": [[8, 9, "MetricName", "loss"]]}, {"text": "In other words , the gradient of the negative cross - entropy loss is considered to update the model parameters .", "entities": [[12, 13, "MetricName", "loss"]]}, {"text": "The gradient is given by : r\u0012L(\u0012 )", "entities": []}, {"text": "= r\u0012TX i=1yilogPM\u0012(^yijxi ) ( 3 ) whereLis the loss function and M\u0012is the translation system with parameter \u0012.^yiis the predicted sentence .", "entities": [[9, 10, "MetricName", "loss"]]}, {"text": "In our setting , where the input is not a proper sentence , the problem with the above objective is that it does not strongly enforce the decoder to learn and produce sarcastic output .", "entities": []}, {"text": "We speculate that minimizing the token - level cross entropy loss in Eq . 3 may help produce an output that is grammatically correct but not sarcastic enough .", "entities": [[10, 11, "MetricName", "loss"]]}, {"text": "For instance , the decoder may incur insigni\ufb01cant cross - entropy loss after generating a sentence like absolutely loved it , as this sentence has considerable overlap with the reference sarcastic text that provides supervision .", "entities": [[11, 12, "MetricName", "loss"]]}, {"text": "One possible idea to tackle such problems is to employ a sarcasm scorer that can determine the sarcasm content in the generated output , and use the scores given by the sarcasm scorer for better training of the generator .", "entities": []}, {"text": "However , the sarcasm scorer may be external to the sequence - tosequence pipeline , and the scoring function may not be differentiable with respect to the model M\u0012.", "entities": []}, {"text": "For this , we apply reinforcement learning which considers sarcasm content score as a form ofreward and use it to \ufb01ne - tune the learning process .", "entities": []}, {"text": "For learning , the policy gradient theorem(Williams , 1992 ) is used .", "entities": []}, {"text": "The system is trained under a modi\ufb01ed learning objective i.e. ,to maximize the expected reward score for a set of produced candidate sentences .", "entities": []}, {"text": "The generator , operating with a policy of PM\u0012(^yijxi ) , producing an output^yiwith an expected reward score computed using a scorer , will thus have the following gradient : r\u0012RL(\u0012 ) = r\u0012E^yi\u0018PM\u0012(^yijxi)[R(^yi ) ]", "entities": []}, {"text": "= E[R(^yi)r\u0012log(PM\u0012(^yijxi))](4 ) whereRL is the modi\ufb01ed learning objective which has to be maximized and Ris a reward function that is computed using an external scorer .", "entities": []}, {"text": "In practice , the expected reward is computed by ( a ) sampling candidate outputs from the policy PM\u0012 , ( b ) computing the reward score for each candidate and ( c ) averaging the rewards so obtained .", "entities": []}, {"text": "In typical RL settings , the learner is typically initialized to a random policy distribution .", "entities": []}, {"text": "However , in our case , since some supervision is already available in the form of target sarcastic sentences , we pretrain the model with the loss minimization objective given in Eq .", "entities": [[26, 27, "MetricName", "loss"]]}, {"text": "3 and then \ufb01ne - tune the model based on the policy gradient scheme following Eq .", "entities": []}, {"text": "4 .", "entities": []}, {"text": "Thus , the learner gets initialized with a better policy distribution .", "entities": []}, {"text": "For reward calculation , we consider the con\ufb01dence score of a sarcasm classi\ufb01er ( probability of being sarcastic ) trained using Sas positive examples and PandNtaken as negative examples .", "entities": []}, {"text": "For our setting , the classi\ufb01er is analogous to the classi\ufb01er used for neutralization .", "entities": []}, {"text": "The classi\ufb01er is based on embedding , LSTM and softmax layers .", "entities": [[7, 8, "MethodName", "LSTM"], [9, 10, "MethodName", "softmax"]]}, {"text": "Since the input to the system is a list of words , it may seem that the sarcasm synthesis module may not require sequence to sequence learning , and a much simpler approach like bag - of - words to sequence generation could have been used .", "entities": [[23, 26, "MethodName", "sequence to sequence"]]}, {"text": "However , note that the input to the generator is obtained after dropping words during neutralization and later appending the negative situation phrase .", "entities": []}, {"text": "The sequentiality is , thus , not completely lost .", "entities": []}, {"text": "This makes sequence to sequence model an intuitive choice .", "entities": [[2, 5, "MethodName", "sequence to sequence"]]}, {"text": "We now explain our experimental setup .", "entities": []}, {"text": "61494 Experiment Setup 4.1 Datasets As stated earlier , our system does not rely on any paired data for training .", "entities": []}, {"text": "It requires three corpora of positive sentences , negative sentences , and sarcastic sentences collected independently .", "entities": []}, {"text": "For positive and negative sentiment corpora PandN , we considered short sentences / snippets from the following well - known sources such as ( a ) Stanford Sentiment Treebank Dataset , ( b ) Amazon Product Reviews , ( c ) Yelp Reviews ( d ) Sentiment 140 dataset ( See Kotzias et al . ( 2015 ) for sources ) .", "entities": []}, {"text": "The above datasets primarily contain tweets and short snippets .", "entities": []}, {"text": "Tweets are normalized by removing hashtags , usernames , and performing spell checking and lexical normalization using NLTK ( Loper and Bird , 2002 ) .", "entities": [[14, 16, "TaskName", "lexical normalization"]]}, {"text": "We then \ufb01ltered out sentences with more than 30words .", "entities": []}, {"text": "Approximately 50;000sentences from each category are retained .", "entities": []}, {"text": "Then , based on the vocabulary overlap with our sarcasm corpus S,47;827sentences are \ufb01nally retained from each category ( total number of instances is 95654 ) .", "entities": []}, {"text": "For the unlabelled sarcasm corpus S , we relied on popular datasets used for sarcasm detection tasks such as the ones by Ghosh and Veale ( 2016 ) , Riloff et al .", "entities": [[14, 16, "TaskName", "sarcasm detection"]]}, {"text": "( 2013 ) , and the Reddit Sarcasm Corpus4 .", "entities": [[6, 7, "DatasetName", "Reddit"]]}, {"text": "Sentences are denoised , spell corrected and normalized .", "entities": []}, {"text": "Average sentence length is kept as 30words .", "entities": []}, {"text": "A total number of 306;141sentences are thus collected .", "entities": []}, {"text": "A common vocabulary of size 20;000 is extracted ( based on frequency ) for all the modules from the three corpora .", "entities": []}, {"text": "Each corpus is divided into a train - valid - test split of 80%-10%10 % .", "entities": []}, {"text": "4.1.1 Benchmark Dataset for Evaluation Since no dataset containing paired examples of literal and sarcastic utterances are available , we created a small test - set for evaluating our system .", "entities": []}, {"text": "From the test split of the sarcasm corpus S , 250 sentences on diverse topics are selected and are manually translated into literal versions by two linguists .", "entities": []}, {"text": "From this , only 203 sentences could be selected by the linguists who mutually decided whether the sentences were sarcastic enough to keep in the test dataset or not .", "entities": []}, {"text": "4https://www.kaggle.com/danofer/sarcasm4.2", "entities": []}, {"text": "Model Con\ufb01guration For the neutralization module , the embedding dimension size is set to 128 , two layers of LSTMs of hidden dimension of 200are used .", "entities": [[8, 10, "HyperparameterName", "embedding dimension"]]}, {"text": "The classi\ufb01er trains for 10epochs with a batch size of 32 , and achieves a validation accuracy of 96 % and training accuracy of 98 % .", "entities": [[7, 9, "HyperparameterName", "batch size"], [16, 17, "MetricName", "accuracy"], [22, 23, "MetricName", "accuracy"]]}, {"text": "For positive sentiment induction module , the embedding dimensions for both encoder and decoder are set to 500 .", "entities": []}, {"text": "Both the encoder and decoder have only one layer of LSTM , with a hidden dimension of 500 .", "entities": [[10, 11, "MethodName", "LSTM"]]}, {"text": "The module is built on top of the OpenNMT ( Klein et al . , 2017 ) framework .", "entities": []}, {"text": "Training happens in 100;000iterations and the batch size is set to 64 .", "entities": [[6, 8, "HyperparameterName", "batch size"]]}, {"text": "The positive sentiment induction module , at the end of the training , produces a bigram BLEU ( Papineni et", "entities": [[16, 17, "MetricName", "BLEU"]]}, {"text": "al . , 2002 ) score of62:25 % .", "entities": []}, {"text": "For bootstrapping negative situations and other purposes , the POS tagger from Spacy5 is used .", "entities": []}, {"text": "The Lucene - IR framework is set up to retrieve negative situations .", "entities": []}, {"text": "The model con\ufb01guration and training parameters for the sarcasm synthesizer is the same as the positive sentiment induction module .", "entities": []}, {"text": "For the RL scheme , for each instance , the expected reward is computed over 100candidate samples .", "entities": []}, {"text": "At the end of the training , the bigram BLEU score on the validation set turns out to be 59:3 % .", "entities": [[9, 11, "MetricName", "BLEU score"]]}, {"text": "For reward computation , we use a classi\ufb01er similar to the one used for neutralization .", "entities": []}, {"text": "The embedding size for this classi\ufb01er is 300 and it uses two layers of unidirectional LSTMs with a hidden dimension of 300 .", "entities": []}, {"text": "It trains with a batch size of 64and produces a validation accuracy of 78:3 % .", "entities": [[4, 6, "HyperparameterName", "batch size"], [11, 12, "MetricName", "accuracy"]]}, {"text": "The probability estimates given by the classi\ufb01er for any input text are taken as reward scores .", "entities": []}, {"text": "For optimization , cross entropy loss criterion is used .", "entities": [[5, 6, "MetricName", "loss"]]}, {"text": "4.3 Evaluation Criteria Absence of automatic evaluation metrics capable of capturing subtleties of sarcasm makes it dif\ufb01cult to evaluate sarcasm generators .", "entities": []}, {"text": "For evaluation , we still use the popular translation and summarization evaluation metrics METEOR ( Banerjee and Lavie , 2005 ) and ROUGE ( Lin , 2004 ) .", "entities": [[10, 11, "TaskName", "summarization"], [13, 14, "DatasetName", "METEOR"]]}, {"text": "Additionally , to check the semantic relatedness between the input and output , we use Skip - thought sentence similarity metric6 .", "entities": []}, {"text": "Note that using BLEU ( Papineni et al . , 2002 ) will be futile here as direct 5http://spacy.io 6https://github.com/Maluuba/nlg-eval", "entities": [[3, 4, "MetricName", "BLEU"]]}, {"text": "6150n - gram overlaps between the predicted and goldstandard sentences are not expected to be signi\ufb01cantly higher for such a task .", "entities": []}, {"text": "We still include it as an evaluation metric for completion .", "entities": []}, {"text": "We employ an additional metric to judge the percentage of length increment ( abbreviated as WL ) to see the if the length of the output is generally more than that of the input ( for the reference text it is 67 % ) .", "entities": []}, {"text": "The notion behind this metric is that sarcasm typically requires more context than its literal version , requiring to have more words present at the target side .", "entities": []}, {"text": "4.3.1 Human Judgement based Evaluation We also consider human judgment scores indicating whether the generated output is nonsarcastic / sarcastic ( 0/1 labels ) , how \ufb02uent it is ( in a scale of 1 - 5 , 1 being lower ) , and to what extent it is related to the input ( in a scale of 1 - 5 ) .", "entities": []}, {"text": "The relatedness measure is important as the objective of the task is to produce a sarcastic version of the input text without altering the semantics much .", "entities": []}, {"text": "For human evaluation , we consider only the 30 sentences randomly picked from the benchmark ( test ) dataset .", "entities": [[13, 15, "DatasetName", "the benchmark"]]}, {"text": "Sarcasm is a dif\ufb01cult topic , so we stuck to only two annotators who had a better understanding of the language and socio - cultural diversities .", "entities": []}, {"text": "4.4 Systems for Comparison For comparison , we consider the following four systems : 1.SarcasmBot :", "entities": []}, {"text": "This is an open - sourced sarcasm generation chatbot released by Joshi et al . ( 2015a ) .", "entities": [[8, 9, "TaskName", "chatbot"]]}, {"text": "The system generates a sarcastic response to an input utterance .", "entities": []}, {"text": "2.UNMT : This system is based on Unsupervised Neural Machine Translation technique by Artetxe et", "entities": [[9, 11, "TaskName", "Machine Translation"]]}, {"text": "al . ( 2017 ) , which can be extended to any translation task .", "entities": []}, {"text": "In our setting , the source and target side are literal and sarcastic utterances , i.e.the direction of translation is non - sarcastic to sarcastic .", "entities": []}, {"text": "3.Monoses : This is similar to UNMT but based on unsupervised Statistical Machine Translation ( Artetxe et al . , 2018 ) .", "entities": [[12, 14, "TaskName", "Machine Translation"]]}, {"text": "4.ST : This is based on the cross alignment technique proposed by Shen et al . ( 2017 ) , used for the task of sentiment translation.5.FLIP : This is based on heuristics for sentiment reversal .", "entities": []}, {"text": "For this , the input sentence is \ufb01rst dependency - parsed .", "entities": []}, {"text": "The root verb is determined along with its tense and aspects with the help of its part - of - speech tags7 .", "entities": [[16, 19, "DatasetName", "part - of"]]}, {"text": "The sentiment of root verb is determined using sentiment lexicon8 .", "entities": []}, {"text": "If the verb has non - zero positive or negative sentiment score , its antonym is found using WordNet .", "entities": []}, {"text": "Appropriate tense and aspect form of the antonym is then obtained9 .", "entities": []}, {"text": "The modi\ufb01ed antonym replaces the original root verb .", "entities": []}, {"text": "Similarly , we replace adjective and adverbs with words carrying opposite sentiment .", "entities": []}, {"text": "For training the above systems ( except FLIP ) , we used Sat one side and a larger version of combinedPandNcontaining 558;235sentences on the other side , curated from the same sources as mentioned earlier .", "entities": []}, {"text": "Apart from this system , we also tested some of our model variants , which are presumably inferior and can be considered as baselines .", "entities": []}, {"text": "These are termed as : 1.SGNORMAL : a system with only the sarcasm synthesizer module which takes the input directly ( after removing stopwords from the input ) , 2.SGRL : , same as SGNORMAL but also applies reinforcement learning , 3.ALL NORMAL : , the complete system , with sarcasm synthesizer trained without reinforcement learning strategy .", "entities": []}, {"text": "4.ALL", "entities": []}, {"text": "RL : , the complete system with reinforcement learning .", "entities": []}, {"text": "5 Results and Analysis Tables 2 and 3 present evaluation results .", "entities": []}, {"text": "While it was expected that the automatic metrics may not be able to capture the subtleties of sarcasm , the WL measure indicates that a carefully designed modular approach like ours often generates longer sentences with more context .", "entities": []}, {"text": "This is also corroborated by the human evaluation where annotators have judged that the output generated from 7For parsing and POS - tagging spaCy ( http://spacy.io/ ) is used 8https://www.nltk.org/ modules / nltk / sentiment / vader .", "entities": []}, {"text": "html 9https://www.nodebox.net/code/index.php/Linguistics", "entities": []}, {"text": "6151System BLEU METEOR ROUGE - L SkipT WL SarcasmBot 0.002 0.012 0.01 0.20 -43 % UNMT 0.17 0.15 0.33 0.45 -1.1 % Monoses 0.12 0.13 0.25 0.42 -3.4 % ST 0.017 0.04 0.11 0.24 -4.3 % FLIP 0.10 0.17 0.34 0.45 0.003 % SGNORM 0.09 0.13 0.24 0.41 -3.3 % SGRL 0.09 0.13 0.24 0.40 -4.18 ALL NORM 0.12 0.13 0.23 0.37 32.3 % ALL RL 0.11 0.13 0.23 0.37 31.2 Table 2 : Evaluation results for our system and various baselines .", "entities": [[1, 2, "MetricName", "BLEU"], [2, 3, "DatasetName", "METEOR"], [3, 6, "MetricName", "ROUGE - L"]]}, {"text": "SkipT!skip thought similarity System Sarcasm Fluency Adequacy SarcasmBot 86.6 % 4.3 1.2 UNMT 20 % 3.9 3.8 Monoses 33.3 % 3.7 3.5 ST 16 % 2.8 2.3 FLIP 20 % 4.1 3.8 SGNORM 56.6 % 3.7 3.2 SGRL 63.3 % 3.9 3.6 ALL NORM 63.3 % 3.7 3.9 ALL RL 73.3 % 3.7 3.8 Table 3 : Human judgment scores for various systems our system are more sarcastic than the comparison systems .", "entities": []}, {"text": "SarcasmBot , being a heuristic driven sarcasm generator produces sarcastic responses but is not related to the input topic .", "entities": []}, {"text": "Moreover , it ends up generating only 20different responses for our entire test dataset making its output redundant and unrelated to the input .", "entities": []}, {"text": "Other existing systems such asUNMT andMonoses converge to autoencoding and end up replicating the input as output .", "entities": []}, {"text": "FLIP , performs transformations at lexical level , hence achieves better \ufb02uency but certainly fails to induce sarcasm in most of the cases .", "entities": []}, {"text": "Table 4 presents example generations from different systems .", "entities": []}, {"text": "It is quite interesting to note that due to the RL , the model tends to produce longer sentences and brings additional context necessary for sarcasm .", "entities": []}, {"text": "The \ufb02uency is however compromised .", "entities": []}, {"text": "A close inspection of the outputs from each module suggests that the overall error committed by the system is due to accumulation of different types of errors , mainly ( a ) error during neutralization due to inappropriate assignment of weights to the words in the input , ( b ) dropping of words and/or insertion of spurious words during positive sentiment induction , and ( c ) error in scoring the sarcasm content in the RL setting .", "entities": []}, {"text": "These can be addressed through better hyper - parameter tuning , gathering more training data for training the individual modules ( especially the sarcasm synthe - Input : worrying because did not \ufb01nish my homework .", "entities": []}, {"text": "Reference : did not \ufb01nish any homework & i still need to shower !", "entities": []}, {"text": "lol !", "entities": []}, {"text": "love stressing out .", "entities": []}, {"text": "SarcasmBot : How exciting ! ?", "entities": []}, {"text": "rolls eyes ?", "entities": []}, {"text": ":", "entities": []}, {"text": "Monoses : whining because actually \ufb01nish my homework .", "entities": []}, {"text": "UNMT : worrying because i did not \ufb01nish my homework .", "entities": []}, {"text": "ST : if do not work my mom hurts .", "entities": []}, {"text": "FLIP : reassuring because did not \ufb01nish my homework .", "entities": []}, {"text": "SG ( NORMAL ) :", "entities": []}, {"text": "i am worrying about the worrying of homework .", "entities": []}, {"text": "SG ( RL ) : worrying about \ufb01nish homework .", "entities": []}, {"text": "ALL ( NORMAL ): no worrying , i \ufb01nish doing homework great .", "entities": []}, {"text": "ALL ( RL ): worrying about \ufb01nish homework is great .", "entities": []}, {"text": "Input : swimming lessons are very costly in nyc .", "entities": []}, {"text": "Reference : you have to sacri\ufb01ce your \ufb01rst born child for swimming lessons in nyc .", "entities": []}, {"text": "SarcasmBot : That is a very useful piece of information !", "entities": []}, {"text": "Yawn !", "entities": []}, {"text": "Monoses :", "entities": []}, {"text": "Dry lessons are very costly \ufb01nancially .", "entities": []}, {"text": "UNMT : swimming lessons are very costly in nyc .", "entities": []}, {"text": "ST : a will was in bed .", "entities": []}, {"text": "FLIP : swimming lessons are very costly in nyc .", "entities": []}, {"text": "SG ( NORMAL )", "entities": []}, {"text": ": this is so costly to me swimming lessons in nyc .", "entities": []}, {"text": "SG ( RL ) : swimming lessons is so costly in nyc .", "entities": []}, {"text": "ALL ( NORMAL ): loving the swimming lessons in nyc ch .", "entities": []}, {"text": "ALL ( RL ): i am loving the swimming lessons .", "entities": []}, {"text": "going to be a very costly in nyc ch .", "entities": []}, {"text": "Table 4 : Examples of generated outputs from different systems .", "entities": []}, {"text": "Reference!human written sarcastic text sizer ) , and \ufb01ne - tuning the sarcasm scorer .", "entities": [[4, 5, "DatasetName", "sizer"]]}, {"text": "6 Related Work As stated earlier , not many systems for sarcasm generation exist today .", "entities": []}, {"text": "The closest work to ours is the one by Joshi et al .", "entities": []}, {"text": "( 2015a ) which employs a heuristic driven approach for generating a sarcastic response to an input utterance .", "entities": []}, {"text": "Since , the output of the system is a response , the system is not suitable for translating a literal input text into a sarcastic version .", "entities": []}, {"text": "Unlike sarcasm generation , sar-", "entities": []}, {"text": "6152casm detection has been a well - known problem with several available solutions .", "entities": []}, {"text": "For this problem , traditional supervised and deep neural network based solutions have been proposed .", "entities": []}, {"text": "The supervised approaches rely on : ( a ) Unigrams and Pragmatic features ( Gonz \u00b4 alez - Ib \u00b4 anez et al . , 2011 ; Barbieri et al . , 2014 ; Joshi et al . , 2015b ) ( b ) Stylistic patterns ( Davidov et al . , 2010 ) and patterns related to situational disparity ( Riloff et al . , 2013 ) and ( c ) Cognitive features extracted from gaze patterns ( Mishra et al . , 2016 , 2017 ) .", "entities": []}, {"text": "Recent systems are based on variants of deep neural networks built on the top of embeddings .", "entities": []}, {"text": "Deep neural networks based solutions for sarcasm detection include ( Ghosh and Veale , 2016 ) who uses a combination of RNNs and CNNs for sarcasm detection , and ( Tay et al . , 2018 ) , who propose a variant of CNN for extracting features related to context incongruity .", "entities": [[6, 8, "TaskName", "sarcasm detection"], [25, 27, "TaskName", "sarcasm detection"]]}, {"text": "A few works exist in the domains of irony , pun and humour generation and are summarized by Wallace ( 2015 ) , Ritchie ( 2005 ) and Strapparava et", "entities": []}, {"text": "al .", "entities": []}, {"text": "( 2011 ) respectively .", "entities": []}, {"text": "However , most of these are heuristic driven and , hence , may not be easily scaled to new domains and languages .", "entities": []}, {"text": "From the perspective of language style transfer .", "entities": [[5, 7, "TaskName", "style transfer"]]}, {"text": "Shen et al .", "entities": []}, {"text": "( 2017 ) propose an unsupervised scheme to learn latent content distribution across different text corpora and use it for sentiment style transfer .", "entities": [[21, 23, "TaskName", "style transfer"]]}, {"text": "Xu et", "entities": []}, {"text": "al .", "entities": []}, {"text": "( 2018 ) introduce an unsupervised sentiment translation technique through sentiment neutralization and reinforced sequence generation .", "entities": []}, {"text": "Zhang et al .", "entities": []}, {"text": "( 2018 ) propose a style transfer technique based on unsupervised MT inspired by Artetxe et al .", "entities": [[5, 7, "TaskName", "style transfer"]]}, {"text": "( 2017 ) .", "entities": []}, {"text": "Artetxe et", "entities": []}, {"text": "al .", "entities": []}, {"text": "( 2018 ) have recently proposed an unsupervised statistical machine translation scheme .", "entities": [[9, 11, "TaskName", "machine translation"]]}, {"text": "We adopt some of these modules for the task of sarcasm generation .", "entities": []}, {"text": "As far as we know , our proposed model is the \ufb01rst of its kind for end - to - end neural sarcasm generation .", "entities": []}, {"text": "7 Conclusion and Future Work", "entities": []}, {"text": "We proposed a \ufb01rst of its kind approach for textual sarcasm generation from literal opinionated texts .", "entities": []}, {"text": "We designed a modular framework for extracting facts from the input , generating incongruous positive and negative situational phrases related to the facts , and \ufb01nally generating sarcastic variations .", "entities": []}, {"text": "For evaluation , we prepared a benchmark dataset containing literal opinions and their sarcastic versions .", "entities": []}, {"text": "Through qualitative and quantitative anal - ysis of the system \u2019s performance on the benchmark dataset , we observed that our system often generates better sarcastic sentences compared to some of our trivial model variants , and unsupervised systems used for machine translation and sentiment style transfer .", "entities": [[13, 15, "DatasetName", "the benchmark"], [41, 43, "TaskName", "machine translation"], [45, 47, "TaskName", "style transfer"]]}, {"text": "In the future , we would like to extend this framework for cross - lingual and cross - cultural sarcasm and irony generation .", "entities": []}, {"text": "References Mikel Artetxe , Gorka Labaka , and Eneko Agirre .", "entities": []}, {"text": "2018 .", "entities": []}, {"text": "Unsupervised statistical machine translation .", "entities": [[2, 4, "TaskName", "machine translation"]]}, {"text": "arXiv preprint arXiv:1809.01272 .", "entities": [[0, 1, "DatasetName", "arXiv"]]}, {"text": "Mikel Artetxe , Gorka Labaka , Eneko Agirre , and Kyunghyun Cho . 2017 .", "entities": []}, {"text": "Unsupervised neural machine translation .", "entities": [[2, 4, "TaskName", "machine translation"]]}, {"text": "arXiv preprint arXiv:1710.11041 .", "entities": [[0, 1, "DatasetName", "arXiv"]]}, {"text": "Dzmitry Bahdanau , Kyunghyun Cho , and Yoshua Bengio .", "entities": []}, {"text": "2014 .", "entities": []}, {"text": "Neural machine translation by jointly learning to align and translate .", "entities": [[1, 3, "TaskName", "machine translation"]]}, {"text": "arXiv:1409.0473 .", "entities": []}, {"text": "Satanjeev Banerjee and Alon Lavie .", "entities": []}, {"text": "2005 .", "entities": []}, {"text": "Meteor : An automatic metric for mt evaluation with improved correlation with human judgments .", "entities": [[0, 1, "DatasetName", "Meteor"]]}, {"text": "In Proceedings of the acl workshop on intrinsic and extrinsic evaluation measures for machine translation and/or summarization , pages 65\u201372 .", "entities": [[13, 15, "TaskName", "machine translation"], [16, 17, "TaskName", "summarization"]]}, {"text": "Francesco Barbieri , Horacio Saggion , and Francesco Ronzano .", "entities": []}, {"text": "2014 .", "entities": []}, {"text": "Modelling sarcasm in twitter , a novel approach .", "entities": []}, {"text": "ACL 2014 , page 50 .", "entities": []}, {"text": "Elisabeth Camp .", "entities": []}, {"text": "2012 .", "entities": []}, {"text": "Sarcasm , pretense , and the semantics / pragmatics distinction .", "entities": []}, {"text": "No\u02c6us , 46(4):587 \u2013 634 .", "entities": []}, {"text": "John D Campbell and Albert N Katz .", "entities": []}, {"text": "2012 .", "entities": []}, {"text": "Are there necessary conditions for inducing a sense of sarcastic irony ?", "entities": []}, {"text": "Discourse Processes , 49(6):459\u2013480 .", "entities": []}, {"text": "Dmitry Davidov , Oren Tsur , and Ari Rappoport . 2010 .", "entities": []}, {"text": "Semi - supervised recognition of sarcastic sentences in twitter and amazon .", "entities": []}, {"text": "In Proceedings of the Fourteenth Conference on Computational Natural Language Learning , pages 107\u2013116 .", "entities": []}, {"text": "Association for Computational Linguistics .", "entities": []}, {"text": "Aniruddha Ghosh and Tony Veale .", "entities": []}, {"text": "2016 .", "entities": []}, {"text": "Fracking sarcasm using neural network .", "entities": []}, {"text": "In Proceedings of the 7th workshop on computational approaches to subjectivity , sentiment and social media analysis , pages 161\u2013169 .", "entities": []}, {"text": "Roberto Gonz \u00b4 alez - Ib \u00b4 anez , Smaranda Muresan , and Nina Wacholder .", "entities": []}, {"text": "2011 .", "entities": []}, {"text": "Identifying sarcasm in twitter : a closer look .", "entities": []}, {"text": "In Proceedings of the 49th Annual Meeting of the Association for Computational Linguistics : Human Language Technologies : short papers - Volume 2 , pages 581\u2013586 .", "entities": []}, {"text": "Association for Computational Linguistics .", "entities": []}, {"text": "6153Caglar Gulcehre , Sungjin Ahn , Ramesh Nallapati , Bowen Zhou , and Yoshua Bengio .", "entities": []}, {"text": "2016 .", "entities": []}, {"text": "Pointing the unknown words .", "entities": []}, {"text": "arXiv preprint arXiv:1603.08148 .", "entities": [[0, 1, "DatasetName", "arXiv"]]}, {"text": "Sepp Hochreiter and J \u00a8urgen Schmidhuber .", "entities": []}, {"text": "1997 .", "entities": []}, {"text": "Long short - term memory .", "entities": [[0, 5, "MethodName", "Long short - term memory"]]}, {"text": "Neural computation , 9(8):1735\u20131780 .", "entities": []}, {"text": "Eduard Hovy .", "entities": []}, {"text": "1987 .", "entities": []}, {"text": "Generating natural language under pragmatic constraints .", "entities": []}, {"text": "Journal of Pragmatics , 11(6):689\u2013719 .", "entities": []}, {"text": "Parag Jain , Abhijit Mishra , Amar Prakash Azad , and Karthik Sankaranarayanan .", "entities": []}, {"text": "2018 .", "entities": []}, {"text": "Unsupervised controllable text formalization .", "entities": []}, {"text": "arXiv preprint arXiv:1809.04556 .", "entities": [[0, 1, "DatasetName", "arXiv"]]}, {"text": "Aditya Joshi , Samarth Agrawal , Pushpak Bhattacharyya , and Mark J Carman .", "entities": []}, {"text": "2017a .", "entities": []}, {"text": "Expect the unexpected : Harnessing sentence completion for sarcasm detection .", "entities": [[5, 7, "TaskName", "sentence completion"], [8, 10, "TaskName", "sarcasm detection"]]}, {"text": "In International Conference of the Paci\ufb01c Association for Computational Linguistics , pages 275\u2013287 .", "entities": []}, {"text": "Springer .", "entities": []}, {"text": "Aditya Joshi , Pushpak Bhattacharyya , and Mark J Carman .", "entities": []}, {"text": "2017b .", "entities": []}, {"text": "Automatic sarcasm detection : A survey .", "entities": [[1, 3, "TaskName", "sarcasm detection"]]}, {"text": "ACM Computing Surveys ( CSUR ) , 50(5):73 .", "entities": [[0, 1, "DatasetName", "ACM"]]}, {"text": "Aditya Joshi , Anoop Kunchukuttan , Pushpak Bhattacharyya , and Mark James Carman .", "entities": []}, {"text": "2015a .", "entities": []}, {"text": "Sarcasmbot : An open - source sarcasm - generation module for chatbots .", "entities": []}, {"text": "In WISDOM Workshop at KDD .", "entities": [[1, 2, "DatasetName", "WISDOM"]]}, {"text": "Aditya Joshi , Vinita Sharma , and Pushpak Bhattacharyya . 2015b .", "entities": []}, {"text": "Harnessing context incongruity for sarcasm detection .", "entities": [[4, 6, "TaskName", "sarcasm detection"]]}, {"text": "In Proceedings of the 53rd Annual Meeting of the Association for Computational Linguistics and the 7th International Joint Conference on Natural Language Processing ( Volume 2 : Short Papers ) , volume 2 , pages 757\u2013762 .", "entities": []}, {"text": "Guillaume Klein , Yoon Kim , Yuntian Deng , Jean Senellart , and Alexander M Rush . 2017 .", "entities": []}, {"text": "Opennmt : Open - source toolkit for neural machine translation .", "entities": [[8, 10, "TaskName", "machine translation"]]}, {"text": "arXiv preprint arXiv:1701.02810 .", "entities": [[0, 1, "DatasetName", "arXiv"]]}, {"text": "Dimitrios Kotzias , Misha Denil , Nando De Freitas , and Padhraic Smyth . 2015 .", "entities": []}, {"text": "From group to individual labels using deep features .", "entities": []}, {"text": "In Proceedings of the 21th ACM SIGKDD International Conference on Knowledge Discovery and Data Mining , pages 597\u2013606 .", "entities": [[5, 6, "DatasetName", "ACM"]]}, {"text": "ACM .", "entities": [[0, 1, "DatasetName", "ACM"]]}, {"text": "Juncen Li , Robin Jia , He He , and Percy Liang .", "entities": []}, {"text": "2018 .", "entities": []}, {"text": "Delete , retrieve , generate : A simple approach to sentiment and style transfer .", "entities": [[12, 14, "TaskName", "style transfer"]]}, {"text": "arXiv preprint arXiv:1804.06437 .", "entities": [[0, 1, "DatasetName", "arXiv"]]}, {"text": "Chin - Yew Lin .", "entities": []}, {"text": "2004 .", "entities": []}, {"text": "Rouge :", "entities": []}, {"text": "A package for automatic evaluation of summaries .", "entities": []}, {"text": "Text Summarization Branches Out .", "entities": [[0, 2, "TaskName", "Text Summarization"]]}, {"text": "Edward Loper and Steven Bird .", "entities": []}, {"text": "2002 .", "entities": []}, {"text": "Nltk : the natural language toolkit .", "entities": []}, {"text": "arXiv preprint cs/0205028 .Abhijit", "entities": [[0, 1, "DatasetName", "arXiv"]]}, {"text": "Mishra , Kuntal Dey , and Pushpak Bhattacharyya . 2017 .", "entities": []}, {"text": "Learning cognitive features from gaze data for sentiment and sarcasm classi\ufb01cation using convolutional neural network .", "entities": []}, {"text": "In Proceedings of the 55th Annual Meeting of the Association for Computational Linguistics ( Volume 1 : Long Papers ) , volume 1 , pages 377\u2013387 .", "entities": []}, {"text": "Abhijit Mishra , Diptesh Kanojia , Seema Nagar , Kuntal Dey , and Pushpak Bhattacharyya .", "entities": []}, {"text": "2016 .", "entities": []}, {"text": "Harnessing cognitive features for sarcasm detection .", "entities": [[4, 6, "TaskName", "sarcasm detection"]]}, {"text": "ACL 2016 , page 156 .", "entities": []}, {"text": "Kishore Papineni , Salim Roukos , Todd Ward , and WeiJing Zhu . 2002 .", "entities": []}, {"text": "Bleu : a method for automatic evaluation of machine translation .", "entities": [[0, 1, "MetricName", "Bleu"], [8, 10, "TaskName", "machine translation"]]}, {"text": "In ACL , 2002 .", "entities": []}, {"text": "Paul Piwek .", "entities": []}, {"text": "2003 .", "entities": []}, {"text": "A \ufb02exible pragmatics - driven language generator for animated agents .", "entities": []}, {"text": "arXiv preprint cs/0312050 .", "entities": [[0, 1, "DatasetName", "arXiv"]]}, {"text": "Ellen Riloff , Ashequl Qadir , Prafulla Surve , Lalindra De Silva , Nathan Gilbert , and Ruihong Huang .", "entities": []}, {"text": "2013 .", "entities": []}, {"text": "Sarcasm as contrast between a positive sentiment and negative situation .", "entities": []}, {"text": "In Proceedings of the 2013 Conference on Empirical Methods in Natural Language Processing , pages 704\u2013714 .", "entities": []}, {"text": "Graeme Ritchie .", "entities": []}, {"text": "2005 .", "entities": []}, {"text": "Computational mechanisms for pun generation .", "entities": []}, {"text": "In Proceedings of the Tenth European Workshop on Natural Language Generation ( ENLG-05 ) .", "entities": []}, {"text": "Tianxiao Shen , Tao Lei , Regina Barzilay , and Tommi Jaakkola . 2017 .", "entities": []}, {"text": "Style transfer from non - parallel text by cross - alignment .", "entities": [[0, 2, "TaskName", "Style transfer"]]}, {"text": "In Advances in neural information processing systems , pages 6830\u20136841 .", "entities": []}, {"text": "Advaith Siddharthan .", "entities": []}, {"text": "2014 .", "entities": []}, {"text": "A survey of research on text simpli\ufb01cation .", "entities": []}, {"text": "ITL - International Journal of Applied Linguistics , 165(2):259\u2013298 .", "entities": []}, {"text": "Carlo Strapparava , Oliviero Stock , and Rada Mihalcea .", "entities": []}, {"text": "2011 .", "entities": []}, {"text": "Computational humour .", "entities": []}, {"text": "In Emotion - oriented systems , pages 609\u2013634 .", "entities": []}, {"text": "Springer .", "entities": []}, {"text": "Mukund Sundararajan , Ankur Taly , and Qiqi Yan . 2017 .", "entities": []}, {"text": "Axiomatic attribution for deep networks .", "entities": []}, {"text": "In Proceedings of the 34th International Conference on Machine Learning - Volume 70 , pages 3319\u20133328 . JMLR .", "entities": []}, {"text": "org .", "entities": []}, {"text": "Yi Tay , Luu Anh Tuan , Siu Cheung Hui , and Jian Su . 2018 .", "entities": []}, {"text": "Reasoning with sarcasm by reading inbetween .", "entities": []}, {"text": "arXiv preprint arXiv:1805.02856 .", "entities": [[0, 1, "DatasetName", "arXiv"]]}, {"text": "Byron C Wallace .", "entities": []}, {"text": "2015 .", "entities": []}, {"text": "Computational irony : A survey and new perspectives .", "entities": []}, {"text": "Arti\ufb01cial Intelligence Review , 43(4):467\u2013483 .", "entities": []}, {"text": "Robert West and Eric Horvitz .", "entities": []}, {"text": "2019 .", "entities": []}, {"text": "Reverseengineering satire , or \u201d paper on computational humor accepted despite making serious advances \u201d .", "entities": []}, {"text": "arXiv preprint arXiv:1901.03253 .", "entities": [[0, 1, "DatasetName", "arXiv"]]}, {"text": "6154Ronald J Williams .", "entities": []}, {"text": "1992 .", "entities": []}, {"text": "Simple statistical gradientfollowing algorithms for connectionist reinforcement learning .", "entities": []}, {"text": "Machine learning , 8(3 - 4):229\u2013256 .", "entities": []}, {"text": "Jingjing Xu , Xu Sun , Qi Zeng , Xuancheng Ren , Xiaodong Zhang , Houfeng Wang , and Wenjie Li .", "entities": []}, {"text": "2018 .", "entities": []}, {"text": "Unpaired sentiment - to - sentiment translation : A cycled reinforcement learning approach .", "entities": []}, {"text": "arXiv preprint arXiv:1805.05181 .", "entities": [[0, 1, "DatasetName", "arXiv"]]}, {"text": "Zhirui Zhang , Shuo Ren , Shujie Liu , Jianyong Wang , Peng Chen , Mu Li , Ming Zhou , and Enhong Chen .", "entities": []}, {"text": "2018 .", "entities": []}, {"text": "Style transfer as unsupervised machine translation .", "entities": [[0, 2, "TaskName", "Style transfer"], [3, 6, "TaskName", "unsupervised machine translation"]]}, {"text": "arXiv preprint arXiv:1808.07894 .", "entities": [[0, 1, "DatasetName", "arXiv"]]}]