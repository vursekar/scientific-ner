UniConv : A Uniﬁed Conversational Neural Architecture for Multi - domain Task - oriented Dialogues
Hung Le†§ , Doyen Sahoo‡ , Chenghao Liu† , Nancy F. Chen§ , Steven C.H. Hoi†‡ † Singapore Management University { hungle.2018,chliu}@smu.edu.sg ‡
Salesforce Research Asia { dsahoo,shoi}@salesforce.com § Institute for Infocomm Research , A*STAR nfychen@i2r.a-star.edu.sg
Abstract
Building an end - to - end conversational agent for multi - domain task - oriented dialogues has been an open challenge for two main reasons .
First , tracking dialogue states of multiple domains is non - trivial as the dialogue agent must obtain complete states from all relevant domains , some of which might have shared slots among domains as well as unique slots specifically for one domain only .
Second , the dialogue agent must also process various types of information across domains , including dialogue context , dialogue states , and database , to generate natural responses to users .
Unlike the existing approaches that are often designed to train each module separately , we propose “ UniConv " — a novel uniﬁed neural architecture for end - to - end conversational systems in multi - domain task - oriented dialogues , which is designed to jointly train ( i ) a Bi - level State Tracker which tracks dialogue states by learning signals at both slot and domain level independently , and ( ii ) a Joint Dialogue Act and Response Generator which incorporates information from various input components and models dialogue acts and target responses simultaneously .
We conduct comprehensive experiments in dialogue state tracking , contextto - text , and end - to - end settings on the MultiWOZ2.1 benchmark , achieving superior performance over competitive baselines .
1
Introduction
A conventional approach to task - oriented dialogues is to solve four distinct tasks : ( 1 ) natural language understanding ( NLU ) which parses user utterance into a semantic frame , ( 2 ) dialogue state tracking ( DST ) which updates the slots and values from semantic frames to the latest values for knowledge base retrieval , ( 3 ) dialogue policy which determines an appropriate dialogue act for the next system response , and ( 4 ) response generation which generates a natural language sequence conditioned on
the dialogue act .
This traditional pipeline modular framework has achieved remarkable successes in task - oriented dialogues ( Wen et al , 2017 ; Liu and Lane , 2017 ; Williams et al , 2017 ; Zhao et al , 2017 ) .
However , such kind of dialogue system is not fully optimized as the modules are loosely integrated and often not trained jointly in an end - to - end manner , and thus may suffer from increasing error propagation between the modules as the complexity of the dialogues evolves .
A typical case of a complex dialogue setting is when the dialogue extends over multiple domains .
A dialogue state in a multi - domain dialogue should include slots of all applicable domains up to the current turn ( See Table 1 ) .
Each domain can have shared slots that are common among domains or unique slots that are not shared with any .
Directly applying single - domain DST to multi - domain dialogues is not straightforward because the dialogue states extend to multiple domains .
A possible approach is to process a dialogue of ND domains multiple times , each time obtaining a dialogue state of one domain .
However , this approach does not allow learning co - reference in dialogues in which users can switch from one domain to another .
As the number of dialogue domains increases , traditional pipeline approaches propagate errors from dialogue states to dialogue policy and subsequently , to natural language generator .
Recent efforts ( Eric et al , 2017 ; Madotto et al , 2018 ; Wu et al , 2019b ) address this problem with an integrated sequence - to - sequence structure .
These approaches often consider knowledge bases as memory tuples rather than relational entity tables .
While achieving impressive performance , these approaches are not scalable to large - scale knowledgebases , e.g. thousands of entities , as the memory cost to query entity attributes increases substantially .
Another limitation of these approaches is the absence of dialogue act modelling .
Dialogue act
Proceedingsofthe2020ConferenceonEmpiricalMethodsinNaturalLanguageProcessing , pages1860–1877,November16–20,2020.c(cid:13)2020AssociationforComputationalLinguistics1860  Human : hello Dialogue state : { } Human : i would like a place to eat in the expensive price range Dialogue state : { restaurant : { pricerange : expensive } }
Human : could you make a suggestion ?
one in the centre ?
Dialogue agent : hi !
how can i help you ?
Dialogue acts : [ greeting ] Dialogue agent : sure , what type of food are you interested in ?
Dialogue acts : [ request - food ] Dialogue agent : ﬁtzbillies restaurant is an expensive british restaurant in the centre .
can i book that for you ?
Dialogue state : { restaurant : { pricerange : expensive , area : centre } } Dialogue acts : [ inform - restaurant , request - booking ] ...
... Dialogue agent : the phone number for the pool is 01234567 , is there something else i can help you ?
Human : also , i need the number for kings hedges learner pool .
Dialogue state : { restaurant : { pricerange : expensive , area : centre , name=ﬁzbillies restaurant , request=[address ] } , attraction : { name : kings hedges learner pool , request=[phone ] } }
Dialogue acts : [ inform - phone ]
Table 1 : Example of a multi - domain dialogue with two domains : restaurant and attraction .
is particularly important in task - oriented dialogues as it determines the general decision towards task completion before a dialogue agent can materialize it into natural language response ( See Table 1 ) .
To tackle the challenges in multi - domain taskoriented dialogues while reducing error propagation among dialogue system modules and keeping the models scalable , we propose UniConv , a uniﬁed neural network architecture for end - to - end dialogue systems .
UniConv consists of a Bi - level State Tracking ( BDST ) module which embeds natural language understanding as it can directly parse dialogue context into a structured dialogue state rather than relying on the semantic frame output from an NLU module in each dialogue turn .
BDST implicitly models and integrates slot representations from dialogue contextual cues to directly generate slot values in each turn and thus , remove the need for explicit slot tagging features from an NLU .
This approach is more practical than the traditional pipeline models as we do not need slot tagging annotation .
Furthermore , BDST tracks dialogue states in dialogue context in both slot and domain levels .
The output representations from two levels are combined in a late fusion approach to learn multi - domain dialogue states .
Our dialogue state tracker disentangles slot and domain representation learning while enabling deep learning of shared representations of slots common among domains .
UniConv integrates BDST with a Joint Dialogue Act and Response Generator ( DARG ) that simultaneously models dialogue acts and generates system responses by learning a latent variable representing dialogue acts and semantically conditioning output response tokens on this latent variable .
The multitask setting of DARG allows our models to model dialogue acts and utilize the distributed representations of dialogue acts , rather than hard discrete
output values from a dialogue policy module , on output response tokens .
Our response generator incorporates information from dialogue input components and intermediate representations progressively over multiple attention steps .
The output representations are reﬁned after each step to obtain high - resolution signals needed to generate appropriate dialogue acts and responses .
We combine both BDST and DARG for end - to - end neural dialogue systems , from input dialogues to output system responses .
We evaluate our models on the large - scale MultiWOZ benchmark ( Budzianowski et al , 2018 ) , and compare with the existing methods in DST , context - to - text generation , and end - to - end settings .
The promising performance in all tasks validates the efﬁcacy of our method .
2 Related Work
Dialogue State Tracking .
Traditionally , DST models are designed to track states of singledomain dialogues such as WOZ ( Wen et al , 2017 ) and DSTC2 ( Henderson et al , 2014a ) benchmarks .
There have been recent efforts that aim to tackle multi - domain DST such as ( Ramadan et al , 2018 ; Lee et al , 2019 ; Wu et al , 2019a ; Goel et al , 2019 ) .
These models can be categorized into two main categories : Fixed vocabulary models ( Zhong et al , 2018 ; Ramadan et
al , 2018 ; Lee et al , 2019 ) , which assume known slot ontology with a ﬁxed candidate set for each slot .
On the other hand , open - vocabulary models ( Lei et al , 2018 ; Wu et al , 2019a ; Gao et al , 2019 ; Ren et al , 2019 ; Le et al , 2020 ) derive the candidate set based on the source sequence i.e. dialogue history , itself .
Our approach is more related to the open - vocabulary approach as we aim to generate unique dialogue states depending on the input dialogue .
Different from previous
1861  Figure 1 : Our uniﬁed architecture has three components : ( 1 ) Encoders encode all text input into continuous representations ; ( 2 ) Bi - level State Tracker ( BDST ) includes 2 modules for slot - level and domain - level representation learning ; and ( 3 ) Joint Dialogue Act and Response Generator ( DARG ) obtains dependencies between the target response representations and other dialogue components .
generation - based approaches
, our state tracker can incorporate contextual information into domain and slot representations independently .
Context - to - Text Generation .
This task was traditionally solved by two separate dialogue modules :
Dialogue Policy ( Peng et al , 2017 , 2018 ) and NLG ( Wen et al , 2016 ; Su et al , 2018 ) .
Recent work attempts to combine these two modules to directly generate system responses with or without modeling dialogue acts .
Zhao et al ( 2019 ) models action space of dialogue agent as latent variables .
Chen et al ( 2019 ) predicts dialogue acts using a hierarchical graph structure with each path representing a unique act .
Pei et al ( 2019 ) ; Peng et al ( 2019 ) use multiple dialogue agents , each trained for a speciﬁc dialogue domain , and combine them through a common dialogue agent .
Mehri et al ( 2019 ) models dialogue policy and NLG separately and fuses feature representations at different levels to generate responses .
Our models simultaneously learn dialogue acts as a latent variable while allowing semantic conditioning on distributed representations of dialogue acts rather than hard discrete features .
End - to - End Dialogue Systems .
In this task , conventional approaches combine Natural Language Understanding ( NLU ) , DST , Dialogue Policy , and NLG , into a pipeline architecture ( Wen
et al , 2017 ; Bordes et al , 2016 ; Liu and Lane , 2017 ; Li et al , 2017 ; Liu and Perez , 2017 ; Williams et al , 2017 ; Zhao et al , 2017 ; Jhunjhunwala et al , 2020 ) .
Another framework does not explicitly modularize these components but incorporate them through a sequence - to - sequence framework ( Serban et al , 2016 ;
Lei et al , 2018 ; Yavuz et al , 2019 ) and a memory - based entity dataset of triplets ( Eric and Manning , 2017 ; Eric et al , 2017 ; Madotto et al , 2018 ; Qin et al , 2019 ; Gangi Reddy et al , 2019 ; Wu et al , 2019b ) .
These approaches bypass dialogue state and/or act modeling and aim to generate output responses directly .
They achieve impressive success in generating dialogue responses in open - domain dialogues with unstructured knowledge bases .
However , in a task - oriented setting with an entity dataset , they might suffer from an explosion of memory size when the number of entities from multiple dialogue domains increases .
Our work is more related to the traditional pipeline strategy but we integrate our dialogue models by unifying two major components rather than using the traditional four - module architecture , to alleviate error propagation from upstream to downstream components .
Different from prior work such as ( Shu et al , 2019 ) , our model facilitates multi - domain state tracking and allows learning dialogue acts
1862Ut : I am also looking for a restaurant in the eastSlot   EncoderDomain EncoderSlot Self - AttnDomain Self - AttnSlot→Context AttnDomain→Context AttnSlot→State AttnDomain→UtteranceAttnSlot→UtteranceAttnDialogue
Context EncoderUser Utt .
EncoderState EncoderDomain - Slot Self - AttnRNN RNN Linear ...
<sos>0 or 1easteast < eos > Act+ResSelf - AttnAct+Res→State AttnAct+Res→DBAttnAct+Res→ContextAttnAct+Res→UtteranceAttnZctxZDZsZuttzstprevTarget Res .
EncoderZres+actLinearRt ZctxZuttSelect
* from restaurant
where location = east ... 0100 .. 10ZdbBt#entitiesSlot - level DSTDomain - level DSTJoint Dialogue Act and Response Generatorx NSdstx NgenZactLinearAt(inform slot i)(request slot j)(dialogue acts)(response)(U1 , R1 … ,Ut-1 , Rt-1)D : ( restaurant , hotel , taxi … )Zuttx NDdstBt-1 : abc < inf_name> ... <hotel > cambridge < inf_depart> ...
<train > S : ( < inf_type > , < inf_name> … <req_address>, … )ZctxBt : abc < inf_name> ... <hotel > east
< inf_location><restaurant > State EncoderZstcurr(shifted )
Rt : There are 8 restaurants in the < res_location > .
Zdst  during response generation .
3 Method
The input consists of dialogue context of t−1 turns , each including a pair of user utterance U and system response R , ( U1 , R1 ) , ... , ( Ut−1 , Rt−1 ) , and the user utterance at current turn Ut .
A taskoriented dialogue system aims to generate the next response Rt .
The information for responses is typically queried from a database based on the user ’s provided information i.e. inform slots tracked by a DST .
We assume access to a database of all domains with each column corresponding to a speciﬁc slot being tracked .
We denote the intermediate output , including the dialogue state of current turn Bt and dialogue act as At .
We denote the list of all domains D = ( d1 , d2 , ... ) , all slots S = ( s1 , s2 , ... ) , and all acts A = ( a1 , a2 , ... ) .
We also denote the list of all ( domain , slot ) pairs as DS = ( ds1 , ds2 , ... ) .
Note that ( cid:107)DS(cid:107 ) ≤ ( cid:107)D(cid:107)×(cid:107)S(cid:107 ) as some slots might not be applicable in all domains .
Given the current dialogue turn t , we represent each text input as a sequence of tokens , each of which is a unique token index from a vocabulary set V : dialogue context Xctx , current user utterance Xutt , and target system response Xres .
Similarly , we also represent the list of domains as XD and the list of slots as XS .
In DST , we consider the raw text form of dialogue state of the previous turn Bt−1 , similarly as ( Lei et al , 2018 ; Budzianowski and Vuli´c , 2019 ) .
In the context - to - text setting , we assume access to the ground - truth dialogue states of current turn Bt .
The dialogue state of the previous and current turn can then be represented as a sequence of tokens X prev and X curr respectively .
For a fair comparison with current approaches , during inference , we use the model predicted dialogue states ˆX prev and do not use X curr in DST and end - to - end tasks .
Following ( Wen et al , 2015 ; Budzianowski et al , 2018 ) , we consider the delexicalized target response X dl res by replacing tokens of slot values by their corresponding generic tokens to allow learning valueindependent parameters .
Our model consists of 3 major components ( See Figure 1 ) .
First , Encoders encode all text input into continuous representations .
To make it consistent , we encode all input with the same embedding dimension .
Secondly , our Bi - level State Tracker ( BDST ) is used to detect contextual dependencies to generate dialogue states .
The DST includes 2
st
st
st
st
modules for slot - level and domain - level representation learning .
Each module comprises attention layers to project domain or slot representations and incorporate important information from dialogue context , dialogue state of the previous turn , and current user utterance .
The outputs are combined as a context - aware vector to decode the corresponding inform or request slots in each domain .
Lastly , our Joint Dialogue Act and Response Generator ( DARG ) projects the target system response representations and enhances them with information from various dialogue components .
Our response generator can also learn a latent representation to generate dialogue acts , which condition all target tokens during each generation step .
3.1 Encoders
An encoder encodes a text sequence X to a sequence of continuous representation Z ∈ RLX ×d .
LX is the length of sequence X and d is the embedding dimension .
Each encoder includes a token - level embedding layer .
The embedding layer is a trainable embedding matrix E ∈ R(cid:107)V ( cid:107)×d .
Each row represents a token in the vocabulary set V as a d - dimensional vector .
We denote E(X ) as the embedding function that transform the sequence X by looking up the respective token index :
Zemb = E(X ) ∈ RLX ×d .
We inject the positional attribute of each token as similarly adopted in ( Vaswani et al , 2017 ) .
The positional encoding is denoted as P
E. The ﬁnal embedding is the element - wise summation between token - embedded representations and positional encoded representations with layer normalization ( Ba et al , 2016 ):
Z = LayerNorm(Zemb + P E(X ) ) ∈ RLX ×d .
st
st
and Zcurr
The encoder outputs include representations of dialogue context Zctx , current user utterance Zutt , and target response Zdl res .
We also encode the dialogue states of the previous turn and current turn and obtain Zprev respectively .
We encode XS and XD using only token - level embedding layer : ZS = LayerNorm(E(XS ) ) and ZD = LayerNorm(E(XD ) ) .
During training , we shift the target response by one position to the left side to allow auto - regressive prediction in each generation step .
We share the embedding matrix E to encode all text tokens except for tokens of target responses as the delexicalized outputs contain different semantics from natural language inputs .
1863  3.2 Bi - level Dialogue State Tracker ( BDST )
S , ctx = Att(Zctx , Zdst
Slot - level DST .
We adopt the Transformer attention ( Vaswani et al , 2017 ) , which consists of a dot - product attention with skip connection , to integrate dialogue contextual information into each slot representation .
We denote Att(Z1 , Z2 ) as the attention operation from Z2 on Z1 .
We ﬁrst enable models to process all slot representations together rather than separately as in previous DST models ( Ramadan et al , 2018 ; Wu et al , 2019a ) .
This strategy allows our models to explicitly learn dependencies between all pairs of slots .
Many pairs of slots could exhibit correlation such as time - wise relation ( “ departure_time " and “ arrival_time " ) .
We SS = Att(ZS , ZS ) ∈ R(cid:107)S(cid:107)×d
.
obtain Zdst We incorporate the dialogue information by learning dependencies between each slot representation and each token in the dialogue history .
Previous approaches such as ( Budzianowski and Vuli´c , 2019 ) consider all dialogue history as a single sequence but we separate them into two inputs because the information in Xutt is usually more important to generate responses while Xctx includes more background information .
We then SS ) ∈ R(cid:107)S(cid:107)×d and obtain Zdst S , utt = Att(Zutt , Zdst Zdst Following ( Lei et al , 2018 ) , we incorporate dialogue state of the previous turn Bt−1 which is a more compact representation of dialogue context .
Hence , we can replace the full dialogue context to only Rt−1 as the remaining part is represented in Bt−1 .
This approach avoids taking in all dialogue history and is scalable as the conversation grows longer .
We add the attention layer to obS , ctx ) ∈ R(cid:107)S(cid:107)×d ( See tain Zdst Figure 1 ) .
We further improve the feature representations by repeating the attention sequence over times .
We denote the ﬁnal output Zdst N dst S .
S
Domain - level DST .
We adopt a similar architecture to learn domain - level representations .
The representations learned in this module exhibit global information while slot - level representations contain local dependencies to decode multi - domain dialogue states .
First , we enable the domain - level DST to capture dependencies between all pairs of domains .
For example , some domains such as “ taxi ” are typically paired with other domains such as “ attraction ” , but usually not with the “ train ” domain .
DD = Att(ZD , ZD ) ∈ R(cid:107)D(cid:107)×d .
We then obtain Zdst
We then allow models to capture dependencies between each domain representation and each token
S , st = Att(Zprev
S , ctx ) ∈ R(cid:107)S(cid:107)×d .
, Zdst
st
D , utt = Att(Zutt , Zdst
in dialogue context and current user utterance .
By segregating dialogue context and current utterance , our models can potentially detect changes of dialogue domains from past turns to the current turn .
Especially in multi - domain dialogues , users can switch from one domain to another and the next system response should address the latest domain .
We DD ) ∈ R(cid:107)D(cid:107)×d then obtain Zdst D , ctx = Att(Zctx , Zdst D , ctx )
∈ R(cid:107)D(cid:107)×d seand Zdst quentially .
Similar to the slot - level module , we reﬁne feature representations over N dst D times and denote the ﬁnal output as Zdst D .
Domain - Slot DST .
We combined domain and slot representations by expanding the tensors to identical dimensions i.e. ( cid:107)D(cid:107 ) × ( cid:107)S(cid:107 ) × d.
We then apply Hadamard product , resulting in domain - slot DS ∈ R(cid:107)D(cid:107)×(cid:107)S(cid:107)×d .
We then joint features Zdst apply a self - attention layer to allow learning of dependencies between joint domain - slot features : DS ) ∈ R(cid:107)D(cid:107)×(cid:107)S(cid:107)×d .
In this Zdst = Att(Zdst attention , we mask the intermediate representations in positions of invalid domain - slot pairs .
Compared to previous work such as ( Wu et al , 2019a ) , we adopt a late fusion method whereby domain and slot representations are integrated in deeper layers .
DS , Zdst
3.2.1 State Generator The representations Zdst are used as context - aware representations to decode individual dialogue states .
Given a domain index i and slot index j , the feature vector Zdst[i , j , :] ∈ Rd is used to generate value of the corresponding ( domain , slot ) pair .
The vector is used as an initial hidden state for an RNN decoder to decode an inform slot value .
Given the k - th ( domain , slot ) pair and decoding step l , the output hidden state in each recurrent step hkl is passed through a linear transformation with softmax to obtain output distribution over vocabukl = Softmax(hklWinf )
∈ R(cid:107)V ( cid:107 ) lary set V : P inf dst ∈ Rdrnn×(cid:107)V ( cid:107 ) .
For request slot of where W inf k - th ( domain , slot ) pair , we pass the corresponding vector Zdst vector through a linear layer with sigmoid activation to predict a value of 0 or 1 .
P req
k = Sigmoid(Zdst k Wreq ) .
Optimization .
The DST is optimized by the crossentropy loss functions of inform and request slots :
Ldst = Linf + Lreq =
− log(P inf
kl ( ykl ) )
( cid:107)DS(cid:107 ) ( cid:88 )
( cid:107)Yk(cid:107 ) ( cid:88 )
k=1
l=1
−yk log(P req
) − ( 1 − yk)(1 − log(P req
)
)
k
k
( cid:107)DS(cid:107 ) ( cid:88 )
+
k=1
1864  3.3
Joint Dialogue Act and Response Generator ( DARG )
i xd
ctx = Att(Zctx , Zgen
Database Representations .
Following ( Budzianowski et al , 2018 ) , we create a db ∈ { 0 , 1}6 one - hot vector for each domain d :
xd and ( cid:80)6 db , i = 1 .
Each position of the vector indicates a number or a range of entities .
The vectors of all domains are concatenated to create a multi - domain vector Xdb ∈ R6×(cid:107)D(cid:107 ) .
We embed this vector as described in Section 3.1 .
Response Generation .
We adopt a stackedattention architecture that sequentially learns dependencies between each token in target responses with each dialogue component representation .
First , we obtain Zgen res = Att(Zres , Zres ) ∈ RLres×d .
This attention layer can learn semantics within the target response to construct a more semantically structured sequence .
We then use attention to capture dependencies in background information contained in dialogue context and user utterance .
The outputs are Zgen res ) ∈ RLres×d and utt = Att(Zutt , Zgen Zgen ctx )
∈ RLres×d sequentially .
To incorporate information of dialogue states and DB results , we apply attention steps to capture dependencies between each response token representation and state or DB representation .
Specifically , we ﬁrst obtain Zgen utt ) ∈ RLres×d .
In the context - to - text setting , as we directly use the ground - truth dialogue states , we simply replace Zdst with Zcurr .
Then we obtain db = Att(Zdb , Zgen Zgen dst ) ∈ RLres×d .
These attention layers capture the information needed to generate tokens that are towards task completion and supplement the contextual cues obtained in previous attention layers .
We let the models to progressively capture these dependencies for N gen times and denote the ﬁnal output as Zgen .
The ﬁnal output is passed to a linear layer with softmax activation to decode system responses auto - regressively : P res = Softmax(ZgenWgen ) ∈ RLres×(cid:107)Vres(cid:107 ) Dialogue Act Modeling .
We couple response generation with dialogue act modeling by learning a latent variable Zact ∈ Rd .
We place the vector in the ﬁrst position of Zres , resulting in Zres+act ∈ R(Lres+1)×d .
We then pass this tensor to the same stacked attention layers as above .
By adding the latent variable in the ﬁrst position , we allow our model to semantically condition all downstream tokens from second position , i.e. all tokens in the target response , on this latent variable .
The output representation of the latent vector i.e.
dst
= Att(Zdst , Zgen
st
Domain
Restaurant Hotel Attraction Train Taxi Police Hospital
# dialogues
train 3,817 3,387 2,718 3,117 1,655 245 287
val 438 416 401 484 207 0 0
test 437 394 396 495 195 0 0
2 :
Table ( Budzianowski et al , 2018 ) by domain
Summary
of MultiWOZ dataset
ﬁrst row in Zgen , incorporates contextual signals accumulated from all attention layers and is used to predict dialogue acts .
We denote this representation as Zgen act and pass it through a linear layer to obtain a multi - hot encoded tensor .
We apply Sigmoid on this tensor to classify each dialogue act as 0 or 1 : P act = Sigmoid(Zgen Optimization .
The response generator is jointly trained by the cross - entropy loss functions of generated responses and dialogue acts :
act Wact ) ∈ R(cid:107)A(cid:107 ) .
Lgen = Lres +
Lact =
− log(P res
l
( yl ) )
( cid:107)Yres(cid:107 ) ( cid:88 )
l=1
−ya log(P act
a ) − ( 1 − ya)(1 − log(P act
a ) )
+
( cid:107)A(cid:107 ) ( cid:88 )
a=1
4 Experiments
4.1 Dataset
We evaluate our models with the multi - domain dialogue corpus MultiWOZ 2.0 ( Budzianowski et al , 2018 ) and 2.1 ( Eric et al , 2019 ) ( The latter includes corrected state labels for the DST task ) .
From the dialogue state annotation of the training data , we identiﬁed all possible domains and slots .
We identiﬁed ( cid:107)D(cid:107 ) = 7 domains and ( cid:107)S(cid:107 ) = 30 slots , including 19 inform slots and 11 request slots .
We also identiﬁed ( cid:107)A(cid:107 ) = 32 acts .
The corpus includes 8,438 dialogues in the training set and 1,000 in each validation and test set .
We present a summary of the dataset in Table 2 .
For additional information of data pre - processing procedures , domains , slots , and entity DBs , please refer to Appendix A.
4.2 Experiment Setup We select d = 256 , hatt = 8 , N dst D = N gen = 3 .
We employed dropout ( Srivastava et al , 2014 ) of 0.3 and label smoothing ( Szegedy et al , 2016 ) on target system responses during training .
S = N dst
1865  Model HJST ( Eric et al , 2019 ) DST Reader ( Gao et al , 2019 )
TSCP ( Lei et al , 2018 ) FJST ( Eric et al , 2019 ) HyST ( Goel et al , 2019 ) TRADE ( Wu et al , 2019a ) NADST ( Le et al , 2020 ) DSTQA ( Zhou and Small , 2019 )
SOM - DST ( Kim et al , 2020 ) BDST ( Ours )
Joint Acc .
35.55 % 36.40 % 37.12 % 38.00 % 38.10 % 45.60 % 49.04 % 51.17 % 53.01 % 49.55 %
Model Baseline Budzianowski et al ( 2018 ) TokenMoE ( Pei et al , 2019 ) HDSA ( Chen et al , 2019 ) Structured Fusion ( Mehri et al , 2019 ) LaRL (
Zhao et al , 2019 ) GPT2 ( Budzianowski and Vuli´c , 2019 ) DAMD ( Zhang et al , 2019 ) DARG ( Ours )
Inform Success BLEU 71.29 % 60.96 % 18.80 75.30 % 59.70 % 16.81 82.90 % 68.90 % 23.60 82.70 % 72.10 % 16.34 82.78 % 79.20 % 12.80 70.96 % 61.36 % 19.05 89.50 % 75.80 % 18.30 87.80 % 73.60 % 18.80
Table 3 : Evaluation of DST on MultiWOZ2.1
Table 4 : Evaluation of context - to - text task on MultiWOZ2.0 .
We adopt a teacher - forcing training strategy by simply using the ground - truth inputs of dialogue state of the previous turn and the gold DB representations .
During inference in DST and end - to - end tasks , we decode system responses sequentially turn by turn , using the previously decoded state as input in the current turn , and at each turn , using the new predicted state to query DBs .
We train all networks with Adam optimizer ( Kingma and Ba , 2015 ) and a decaying learning rate schedule .
All models are trained up to 30 epochs and the best models are selected based on validation loss .
We used a greedy approach to decode all slots and a beam search with beam size 5 .
To evaluate the models , we use the following metrics : Joint Accuracy and Slot Accuracy ( Henderson et al , 2014b ) , Inform and Success ( Wen et al , 2017 ) , and BLEU score ( Papineni et al , 2002 ) .
As suggested by Liu et al ( 2016 ) , human evaluation , even though popular in dialogue research , might not be necessary in tasks with domain constraints such as MultiWOZ .
We implemented all models using Pytorch and will release our code on github1 .
4.3 Results
DST .
We test our state tracker ( i.e. using only Ldst ) and compare the performance with the baseline models in Table 3 ( Refer to Appendix B for description of DST baselines ) .
Our model can outperform ﬁxed - vocabulary approaches such as HJST and FJST , showing the advantage of generating unique slot values rather than relying on a slot ontology with a ﬁxed set of candidates .
DST Reader model ( Gao et al , 2019 ) does not perform well and we note that many slot values are not easily expressed as a text span in source text inputs .
DST approaches that separate domain and slot representations such as TRADE ( Wu et al , 2019a ) reveal
1https://github.com/henryhungle/
UniConv
competitive performance .
However , our approach has better performance as we adopt a late fusion strategy to explicitly obtain more ﬁne - grained contextual dependencies in each domain and slot representation .
In this aspect , our model is related to TSCP ( Lei et al , 2018 ) which decodes output state sequence auto - regressively .
However , TSCP attempts to learn domain and slot dependencies implicitly and the model is limited by selecting the maximum output state length ( which can vary signiﬁcantly in multi - domain dialogues ) .
Context - to - Text Generation .
We compare with existing baselines in Table 4 ( Refer to Appendix B for description of the baseline models ) .
Our model achieves very competitive Inform , Success , and BLEU scores .
Compared to TokenMOE ( Pei et al , 2019 ) , our single model can outperform multiple domain - speciﬁc dialogue agents as each attention module can sufﬁciently learn contextual features of multiple domains .
Compared to HDSA ( Chen et al , 2019 ) which uses a graph structure to represent acts , our approach is simpler yet able to outperform HDSA in Inform score .
Our work is related to Structured Fusion ( Mehri et al , 2019 ) as we incorporate intermediate representations during decoding .
However , our approach does not rely on pretraining individual sub - modules but simultaneously learning both act representations and predicting output tokens .
Similarly , our stacked attention architecture can achieve good performance in BLEU score , competitively with a GPT-2 based model ( Budzianowski and Vuli´c , 2019 ) , while consistently improve other metrics .
For completion , we tested our models on MultiWOZ2.1 and achieved similar results : 87.90 % Inform , 72.70 % Success , and 18.52 BLEU score .
Future work may further improve Success by optimizing the models towards a higher success rate using strategies such as LaRL ( Zhao et al , 2019 ) .
Another direction is a data augmentation approach such as DAMD ( Zhang et al ,
1866  Model TSCP ( L=8 ) ( Lei et al , 2018 )
TSCP ( L=20 ) ( Lei et al , 2018 ) HRED - TS ( Peng et al , 2019 ) Structured Fusion ( Mehri et al , 2019 ) DAMD ( Zhang et al , 2019 )
UniConv ( Ours )
Joint Acc 31.64 % 37.53 % 50.14 %
Inform Success BLEU Slot
Acc 45.31 % 38.12 % 11.63 95.53 % 66.41 % 45.32 % 15.54 96.23 % 70.00 % 58.00 % 17.50 73.80 % 58.60 % 16.90 76.30 % 60.40 % 16.60 97.30 % 72.60 % 62.90 % 19.80
Table 5 : Evaluation on MultiWOZ2.1 in the end - to - end setting .
2019 ) which achieves signiﬁcant performance gain in this task .
End - to - End .
From Table 5 , our model outperforms existing baselines in all metrics except the Inform score ( See Appendix B for a description of baseline models ) .
In TSCP ( Lei et al , 2018 ) , increasing the maximum dialogue state span L from 8 to 20 tokens helps to improve the DST performance , but also increases the training time significantly .
Compared with HRED - TS ( Peng et al , 2019 ) , our single model generates better responses in all domains without relying on multiple domainspeciﬁc teacher models .
We also noted that the performance of DST improves in contrast to the previous DST task .
This can be explained as additional supervision from system responses not only contributes to learn a natural response but also positively impact the DST component .
Other baseline models such as ( Eric and Manning , 2017 ; Wu et al , 2019b ) present challenges in the MultiWOZ benchmark as the models could not fully optimize due to the large scale entity memory .
For example , following GLMP ( Wu et al , 2019b ) , the restaurant domain alone has over 1,000 memory tuples of ( Subject , Relation , Object ) .
Ablation .
We conduct a comprehensive ablation analysis with several model variants in Table 6 and have the following observations :
•
The model variant with a single - level DST ( by considering S = DS and N dst D = 0 ) ( Row A2 ) performs worse than the Bi - level DST ( Row A1 ) .
In addition , using the dual architecture also improves the latency in each attention layers as typically ( cid:107)D(cid:107 ) + ( cid:107)S(cid:107 ) ( cid:28 ) ( cid:107)DS(cid:107 ) .
The performance gap also indicates the potential of separating global and local dialogue state dependencies by domain and slot level .
• Using Bt−1 and only the last user utterance as the dialogue context ( Row A1 and B1 ) performs as well as using Bt−1 and a full - length dialogue history ( Row A5 and B3 ) .
This demonstrates that the information from the
last dialogue state is sufﬁcient to represent the dialogue history up to the last user utterance .
One beneﬁt from not using the full dialogue history is that it reduces the memory cost as the number of tokens in a full - length dialogue history is much larger than that of a dialogue state ( particularly as the conversation evolves over many turns ) .
• We note that removing the loss function to learn the dialogue act latent variable ( Row B2 ) can hurt the generation performance , especially by the task completion metrics Inform and Success .
This is interesting as we expect dialogue acts affect the general semantics of output sentences , indicated by BLEU score , rather than the model ability to retrieve correct entities .
This reveals the beneﬁt of our approach .
By enforcing a semantic condition on each token of the target response , the model can facility the dialogue ﬂow towards successful task completion .
• In both state tracker and response generator modules , we note that learning feature representations through deeper attention networks can improve the quality of predicted states and system responses .
This is consistent with our DST performance as compared to baseline models of shallow networks .
• Lastly , in the end - to - end task , our model achieves better performance as the number of attention heads increases , by learning more high - resolution dependencies .
5 Domain - dependent Results
DST .
For state tracking , the metrics are calculated for domain - speciﬁc slots of the corresponding domain at each dialogue turn .
We also report the DST separately for multi - domain and single - domain dialogues to evaluate the challenges in multi - domain dialogues and our DST performance gap as compared to single - domain dialogues .
From Table 7 ,
1867  Bt−1 N dst
N gen Lact
# A1 A2 A3 A4 A5 B1 B2 B3 B4 B5 C1 C2
C3 C4 C5
Xctx Rt−1 Rt−1 Rt−1 Rt−1 ( U , R)1 : t−1 Rt−1 Rt−1 ( U , R)1 : t−1 Rt−1 Rt−1 Rt−1 Rt−1 Rt−1 Rt−1 Rt−1
( cid:88 ) ( cid:88 ) ( cid:88 ) ( cid:88 ) ( cid:88 )
( cid:88 ) ( cid:88 ) ( cid:88 ) ( cid:88 ) ( cid:88 )
S 3 3 2 1 3 0 0 0 0 0 3 3 3 3 3
N dst D 3 0 2 1 3 0 0 0 0 0 3 3 3 3 3
0 0 0 0 0 3 3 3 2 1 3 3 3 3 3
d 256 256 256 256 256 256 256 256 256 256 256 128 256 256 256
hatt 8 8 8 8 8 8 8 8 8 8 8 8 4 2 1
Joint Acc . 49.55 % 47.91 % 47.80 % 46.20 % 49.20 % 50.14 % 45.70 % 47.30 % 45.90 % 43.30 %
BLEU Inform Success Slot Acc . 97.32 % 97.25 % 97.22 % 97.08 % 97.34 % 97.30 % 97.00 % 97.10 % 97.00 % 96.70 %
87.90 % 72.70 % 18.52 82.70 % 70.60 % 18.51 87.14 % 71.52 % 18.90 81.60 % 66.40 % 18.48 77.70 % 62.80 % 18.50 72.60 % 62.90 % 19.80 67.40 % 58.30 % 19.90 68.70 % 57.10 % 19.60 66.10 % 55.60 % 19.80 62.30 % 52.60 % 19.90
( cid:88 )
( cid:88 ) ( cid:88 ) ( cid:88 ) ( cid:88 ) ( cid:88 ) ( cid:88 ) ( cid:88 ) ( cid:88 )
Table 6 : Ablation analysis on the MultiWOZ2.1 in DST ( top ) , context - to - text ( middle ) , and end - to - end ( bottom ) .
our DST performs consistently well in the 3 domains attraction , restaurant , and train domains .
However , the performance drops in the taxi and hotel domain , signiﬁcantly in the taxi domain .
We note that dialogues with the taxi domain is usually not single - domain but typically entangled with other domains .
Secondly , we observe that there is a signiﬁcant performance gap of about 10 points absolute score between DST performances in singledomain and multi - domain dialogues .
State tracking in multi - domain dialogues is , hence , could be further improved to boost the overall performance .
Domain Multi - domain Single - domain Attraction Hotel Restaurant Taxi Train
Joint Acc 48.40 % 59.63 % 66.76 % 47.86 % 65.11 % 30.84 % 63.77 %
Slot Acc 97.14 % 98.36 % 98.94 % 97.54 % 98.68 % 96.86 % 98.53 %
Table 7 : DST results on MultiWOZ2.1 by domains .
Context - to - Text Generation For this task , we calculated the metrics for single - domain dialogues of the corresponding domain ( as Inform and Success are computed per dialogue rather than per turn ) .
We do not report the Inform metric of the taxi domain because no DB was available for this domain .
From Table 8 , we observe some performance gap between Inform and Success scores on multi - domain dialogues and single - domain dialogues .
However , in terms of BLEU score , our model performs better with multi - domain dialogues .
This could be caused by the data bias in MultiWOZ corpus as the majority of dialogues in this corpus is multidomain .
Hence , our models capture the semantics of multi - domain dialogue responses better than single - domain responses .
For domain - speciﬁc results , we note that our models perform not as well as other domains in attraction and taxi domains in terms of Success score .
Domain Multi - domain Single - domain Attraction Hotel Restaurant Taxi Train
Inform Success BLEU 85.01 % 68.86 % 18.68 97.79 % 85.84 % 17.62 91.67 % 66.67 % 19.17 97.01 % 91.04 % 16.55 96.77 % 88.71 % 19.88 78.85 % 13.85 99.10 % 87.88 % 18.14
Table 8 : Context - to - text generation results on MultiWOZ2.1 .
by domains .
Additionally , we report qualitative analysis and the insights can be seen in Appendix C.
6 Conclusion
We proposed UniConv , a novel uniﬁed neural architecture of conversational agents for Multi - domain Task - oriented Dialogues , which jointly trains ( 1 ) a Bi - level State Tracker to capture dependencies in both domain and slot levels simultaneously , and ( 2 ) a Joint Dialogue Act and Response Generator to model dialogue act latent variable and semantically conditions output responses with contextual cues .
The promising performance of UniConv on the MultiWOZ benchmark ( including three tasks : DST , context - to - text generation , and end - to - end dialogues ) validates the efﬁcacy of our method .
Acknowledgments
We thank all reviewers for their insightful feedback to the manuscript of this paper .
The ﬁrst author of this paper is supported by the Agency for Science , Technology and Research ( A*STAR ) Computing and Information Science scholarship .
1868  References
Jimmy Lei Ba , Jamie Ryan Kiros , and Geoffrey E HinarXiv preprint
ton .
2016 .
Layer normalization .
arXiv:1607.06450 .
Antoine Bordes , Y - Lan Boureau , and Jason Weston .
2016 .
Learning end - to - end goal - oriented dialog .
arXiv preprint arXiv:1605.07683 .
Paweł Budzianowski and Ivan Vuli´c . 2019 .
Hello , it ’s GPT-2 - how can I help you ?
towards the use of pretrained language models for task - oriented dialogue In Proceedings of the 3rd Workshop on systems .
Neural Generation and Translation , pages 15–22 , Hong Kong .
Association for Computational Linguistics .
Paweł Budzianowski , Tsung - Hsien Wen , Bo - Hsiang Tseng , Iñigo Casanueva , Ultes Stefan , Ramadan Osman , and Milica Gaši´c . 2018 .
Multiwoz - a largescale multi - domain wizard - of - oz dataset for taskoriented dialogue modelling .
In Proceedings of the 2018 Conference on Empirical Methods in Natural Language Processing ( EMNLP ) .
Wenhu Chen , Jianshu Chen , Pengda Qin , Xifeng Yan , and William Yang Wang .
2019 .
Semantically conditioned dialog response generation via hierarchical In Proceedings of the disentangled self - attention .
57th Annual Meeting of the Association for Computational Linguistics , pages 3696–3709 , Florence , Italy .
Association for Computational Linguistics .
Mihail Eric , Rahul Goel , Shachi Paul , Abhishek Sethi , Sanchit Agarwal , Shuyag Gao , and Dilek HakkaniTur .
2019 .
Multiwoz 2.1 : Multi - domain dialogue state corrections and state tracking baselines .
arXiv preprint arXiv:1907.01669 .
Mihail Eric , Lakshmi Krishnan , Francois Charette , and Christopher D. Manning .
2017 .
Key - value retrieval networks for task - oriented dialogue .
In Proceedings of the 18th Annual SIGdial Meeting on Discourse and Dialogue , pages 37–49 , Saarbrücken , Germany . Association for Computational Linguistics .
Mihail Eric and Christopher Manning . 2017 .
A copyaugmented sequence - to - sequence architecture gives good performance on task - oriented dialogue .
In Proceedings of the 15th Conference of the European Chapter of the Association for Computational Linguistics : Volume 2 , Short Papers , pages 468–473 , Valencia , Spain .
Association for Computational Linguistics .
Revanth Gangi Reddy , Danish Contractor , Dinesh Raghu , and Sachindra Joshi .
2019 .
Multi - level In Proceedings memory for task oriented dialogs .
of the 2019 Conference of the North American Chapter of the Association for Computational Linguistics : Human Language Technologies , Volume 1 ( Long and Short Papers ) , pages 3744–3754 , Minneapolis , Minnesota .
Association for Computational Linguistics .
Shuyang Gao , Abhishek Sethi , Sanchit Agarwal , Tagyoung Chung , and Dilek Hakkani - Tur . 2019 .
Dialog state tracking : A neural reading comprehension approach .
In Proceedings of the 20th Annual SIGdial Meeting on Discourse and Dialogue , pages 264–273 , Stockholm , Sweden . Association for Computational Linguistics .
Rahul Goel , Shachi Paul , and Dilek Hakkani - Tür . 2019 .
HyST :
A Hybrid Approach for Flexible and Accurate Dialogue State Tracking .
In Proc .
Interspeech 2019 , pages 1458–1462 .
Matthew Henderson , Blaise Thomson , and Jason D Williams .
2014a .
The second dialog state tracking challenge .
In Proceedings of the 15th Annual Meeting of the Special Interest Group on Discourse and Dialogue ( SIGDIAL ) , pages 263–272 .
Matthew Henderson , Blaise Thomson , and Steve Young . 2014b .
Word - based dialog state tracking In Proceedings with recurrent neural networks .
of the 15th Annual Meeting of the Special Interest Group on Discourse and Dialogue ( SIGDIAL ) , pages 292–299 .
Megha Jhunjhunwala , Caleb Bryant , and Pararth Shah . 2020 .
Multi - action dialog policy learning with interactive human teaching .
In Proceedings of the 21th Annual Meeting of the Special Interest Group on Discourse and Dialogue , pages 290–296 , 1st virtual meeting .
Association for Computational Linguistics .
Sungdong Kim , Sohee Yang , Gyuwan Kim , and SangWoo Lee . 2020 .
Efﬁcient dialogue state tracking by selectively overwriting memory .
In Proceedings of the 58th Annual Meeting of the Association for Computational Linguistics , pages 567–582 , Online .
Association for Computational Linguistics .
Diederick P Kingma and Jimmy Ba . 2015 .
Adam : A method for stochastic optimization .
In International Conference on Learning Representations ( ICLR ) .
Hung Le , Richard Socher , and Steven C.H. Hoi . 2020 .
Non - autoregressive dialog state tracking .
In International Conference on Learning Representations .
Hwaran Lee , Jinsik Lee , and Tae - Yoon Kim . 2019 .
SUMBT : Slot - utterance matching for universal and scalable belief tracking .
In Proceedings of the 57th Annual Meeting of the Association for Computational Linguistics , pages 5478–5483 , Florence , Italy .
Association for Computational Linguistics .
Wenqiang Lei , Xisen Jin , Min - Yen Kan , Zhaochun Ren , Xiangnan He , and Dawei Yin .
2018 .
Sequicity : Simplifying task - oriented dialogue systems with single sequence - to - sequence architectures .
In Proceedings of the 56th Annual Meeting of the Association for Computational Linguistics ( Volume 1 : Long Papers ) , pages 1437–1447 .
Xiujun Li , Yun - Nung Chen , Lihong Li , Jianfeng Gao , and Asli Celikyilmaz . 2017 .
End - to - end taskcompletion neural dialogue systems .
In Proceedings
1869  of the Eighth International Joint Conference on Natural Language Processing ( Volume 1 : Long Papers ) , pages 733–743 , Taipei , Taiwan .
Asian Federation of Natural Language Processing .
Bing Liu and Ian Lane . 2017 .
An end - to - end trainable neural network model with belief tracking for taskoriented dialog .
In Interspeech 2017 .
Chia - Wei Liu , Ryan Lowe , Iulian Serban , Mike Noseworthy , Laurent Charlin , and Joelle Pineau . 2016 .
How NOT to evaluate your dialogue system : An empirical study of unsupervised evaluation metrics for dialogue response generation .
In Proceedings of the 2016 Conference on Empirical Methods in Natural Language Processing , pages 2122–2132 , Austin , Texas .
Association for Computational Linguistics .
Fei Liu and Julien Perez . 2017 .
Gated end - to - end memIn Proceedings of the 15th Conferory networks .
ence of the European Chapter of the Association for Computational Linguistics : Volume 1 , Long Papers , pages 1–10 , Valencia , Spain .
Association for Computational Linguistics .
Andrea Madotto , Chien - Sheng Wu , and Pascale Fung .
2018 .
Mem2seq : Effectively incorporating knowledge bases into end - to - end task - oriented dialog systems .
In Proceedings of the 56th Annual Meeting of the Association for Computational Linguistics ( Volume 1 : Long Papers ) , pages 1468–1478 . Association for Computational Linguistics .
Shikib Mehri , Tejas Srinivasan , and Maxine Eskenazi .
2019 .
Structured fusion networks for dialog .
In Proceedings of the 20th Annual SIGdial Meeting on Discourse and Dialogue , pages 165–177 , Stockholm , Sweden .
Association for Computational Linguistics .
Kishore Papineni , Salim Roukos , Todd Ward , and WeiJing Zhu . 2002 .
Bleu : a method for automatic evalIn Proceedings of uation of machine translation .
the 40th annual meeting on association for computational linguistics , pages 311–318 .
Association for Computational Linguistics .
Jiahuan Pei , Pengjie Ren , and Maarten de Rijke .
2019 .
A modular task - oriented dialogue system using a neural mixture - of - experts .
arXiv preprint arXiv:1907.05346 .
Baolin Peng , Xiujun Li , Jianfeng Gao , Jingjing Liu , and Kam - Fai Wong .
2018 .
Deep Dyna - Q : Integrating planning for task - completion dialogue policy learning .
In Proceedings of the 56th Annual Meeting of the Association for Computational Linguistics ( Volume 1 : Long Papers ) , pages 2182–2192 , Melbourne , Australia . Association for Computational Linguistics .
Baolin Peng , Xiujun Li , Lihong Li , Jianfeng Gao , Asli Celikyilmaz , Sungjin Lee , and Kam - Fai Wong . 2017 .
Composite task - completion dialogue policy learning via hierarchical deep reinforcement learning .
In Proceedings of the 2017 Conference on Empirical Methods in Natural Language Processing ,
pages 2231–2240 , Copenhagen , Denmark .
Association for Computational Linguistics .
Shuke Peng , Xinjing Huang , Zehao Lin , Feng Ji , Haiqing Chen , and Yin Zhang .
2019 .
Teacherstudent framework enhanced multi - domain dialogue generation .
arXiv preprint arXiv:1908.07137 .
Libo Qin , Yijia Liu , Wanxiang Che , Haoyang Wen , Yangming Li , and Ting Liu . 2019 .
Entity - consistent end - to - end task - oriented dialogue system with KB retriever .
In Proceedings of the 2019 Conference on Empirical Methods in Natural Language Processing and the 9th International Joint Conference on Natural Language Processing ( EMNLP - IJCNLP ) , pages 133–142 , Hong Kong , China . Association for Computational Linguistics .
Alec Radford , Jeff Wu , Rewon Child , David Luan , Dario Amodei , and Ilya Sutskever . 2019 .
Language models are unsupervised multitask learners .
Osman Ramadan , Paweł Budzianowski , and Milica Gasic .
2018 .
Large - scale multi - domain belief tracking with knowledge sharing .
In Proceedings of the 56th Annual Meeting of the Association for Computational Linguistics , volume 2 , pages 432–437 .
Liliang Ren , Jianmo Ni , and Julian McAuley .
2019 .
Scalable and accurate dialogue state tracking via hiIn Proceedings of erarchical sequence generation .
the 2019 Conference on Empirical Methods in Natural Language Processing and the 9th International Joint Conference on Natural Language Processing ( EMNLP - IJCNLP ) , pages 1876–1885 , Hong Kong , China . Association for Computational Linguistics .
Iulian V Serban , Alessandro Sordoni , Yoshua Bengio , Aaron Courville , and Joelle Pineau .
2016 .
Building end - to - end dialogue systems using generative hierarchical neural network models .
In Thirtieth AAAI Conference on Artiﬁcial Intelligence .
Lei Shu , Piero Molino , Mahdi Namazifar , Hu Xu , Bing Liu , Huaixiu Zheng , and Gokhan Tur . 2019 .
Flexibly - structured model task - oriented dialogues .
In Proceedings of the 20th Annual SIGdial Meeting on Discourse and Dialogue , pages 178–187 , Stockholm , Sweden .
Association for Computational Linguistics .
for
Nitish Srivastava , Geoffrey Hinton , Alex Krizhevsky , Ilya Sutskever , and Ruslan Salakhutdinov .
2014 .
Dropout : a simple way to prevent neural networks from overﬁtting .
The Journal of Machine Learning Research , 15(1):1929–1958 .
Shang - Yu Su , Kai - Ling Lo , Yi - Ting Yeh , and YunNung Chen .
2018 .
Natural language generation by hierarchical decoding with linguistic patterns .
In Proceedings of the 2018 Conference of the North American Chapter of the Association for Computational Linguistics : Human Language Technologies , Volume 2 ( Short Papers ) , pages 61–66 , New Orleans , Louisiana .
Association for Computational Linguistics .
1870  Florence , Italy .
Association for Computational Linguistics .
Chien - Sheng Wu , Richard Socher , and Caiming Xiong . 2019b .
Global - to - local memory pointer networks In Proceedings of the for task - oriented dialogue .
International Conference on Learning Representations ( ICLR ) .
Semih Yavuz , Abhinav Rastogi , Guan - Lin Chao , and Dilek Hakkani - Tur . 2019 .
DeepCopy :
Grounded response generation with hierarchical pointer networks .
In Proceedings of the 20th Annual SIGdial Meeting on Discourse and Dialogue , pages 122–132 , Stockholm , Sweden .
Association for Computational Linguistics .
Yichi Zhang , Zhijian Ou , and Zhou Yu . 2019 .
Taskoriented dialog systems that consider multiple appropriate responses under the same context .
arXiv preprint arXiv:1911.10484 .
Tiancheng Zhao , Allen Lu , Kyusong Lee , and Maxine Eskenazi . 2017 .
Generative encoder - decoder models for task - oriented spoken dialog systems with chatting capability .
In Proceedings of the 18th Annual SIGdial Meeting on Discourse and Dialogue , pages 27–36 , Saarbrücken , Germany . Association for Computational Linguistics .
Tiancheng Zhao , Kaige Xie , and Maxine Eskenazi .
2019 .
Rethinking action spaces for reinforcement learning in end - to - end dialog agents with latent variable models .
In Proceedings of the 2019 Conference of the North American Chapter of the Association for Computational Linguistics : Human Language Technologies , Volume 1 ( Long and Short Papers ) , pages 1208–1218 , Minneapolis , Minnesota .
Association for Computational Linguistics .
Victor Zhong , Caiming Xiong , and Richard Socher .
2018 .
Global - locally self - attentive encoder for dialogue state tracking .
In ACL .
Li Zhou and Kevin Small . 2019 .
Multi - domain dialogue state tracking as dynamic knowledge graph arXiv preprint enhanced question answering .
arXiv:1911.06192 .
Ilya Sutskever , Oriol Vinyals , and Quoc V Le . 2014 .
Sequence to sequence learning with neural networks .
In Z. Ghahramani , M. Welling , C. Cortes , N. D. Lawrence , and K. Q. Weinberger , editors , Advances in Neural Information Processing Systems 27 , pages 3104–3112 .
Curran Associates , Inc.
Christian Szegedy , Vincent Vanhoucke , Sergey Ioffe , Jon Shlens , and Zbigniew Wojna .
2016 .
Rethinking the inception architecture for computer vision .
In Proceedings of the IEEE conference on computer vision and pattern recognition , pages 2818–2826 .
Ashish Vaswani , Noam Shazeer , Niki Parmar , Jakob Uszkoreit , Llion Jones , Aidan N Gomez , Ł ukasz Kaiser , and Illia Polosukhin . 2017 .
Attention is all you need .
In I. Guyon , U. V. Luxburg , S. Bengio , H. Wallach , R. Fergus , S. Vishwanathan , and R. Garnett , editors , Advances in Neural Information Processing Systems 30 , pages 5998–6008 .
Curran Associates , Inc.
Tsung - Hsien Wen , Milica Gasic , Nikola Mrkši´c , Lina M. Rojas Barahona , Pei - Hao Su , Stefan Ultes , David Vandyke , and Steve Young .
2016 .
Conditional generation and snapshot learning in neural diIn Proceedings of the 2016 Conalogue systems .
ference on Empirical Methods in Natural Language Processing , pages 2153–2162 , Austin , Texas .
Association for Computational Linguistics .
Tsung - Hsien Wen , Milica Gaši´c , Nikola Mrkši´c , PeiHao Su , David Vandyke , and Steve Young . 2015 .
Semantically conditioned LSTM - based natural lanIn guage generation for spoken dialogue systems .
Proceedings of the 2015 Conference on Empirical Methods in Natural Language Processing , pages 1711–1721 , Lisbon , Portugal . Association for Computational Linguistics .
Tsung - Hsien Wen , David Vandyke , Nikola Mrkši´c , Milica Gasic , Lina M. Rojas Barahona , Pei - Hao Su , Stefan Ultes , and Steve Young . 2017 .
A networkbased end - to - end trainable task - oriented dialogue In Proceedings of the 15th Conference of system .
the European Chapter of the Association for Computational Linguistics : Volume 1 , Long Papers , pages 438–449 , Valencia , Spain . Association for Computational Linguistics .
Jason D. Williams , Kavosh Asadi , and Geoffrey Zweig .
2017 .
Hybrid code networks : practical and efﬁcient end - to - end dialog control with supervised and reinforcement learning .
In Proceedings of the 55th Annual Meeting of the Association for Computational Linguistics ( Volume 1 : Long Papers ) , pages 665 – 677 , Vancouver , Canada . Association for Computational Linguistics .
Chien - Sheng Wu , Andrea Madotto , Ehsan HosseiniAsl , Caiming Xiong , Richard Socher , and Pascale Fung . 2019a .
Transferable multi - domain state genIn Proerator for task - oriented dialogue systems .
ceedings of the 57th Annual Meeting of the Association for Computational Linguistics , pages 808–819 ,
1871  A Data Pre - processing
First , we delexicalize each target system response sequence by replacing the matched entity attribute that appears in the sequence to the canonical tag ( cid:104)domain_slot(cid:105 ) .
For example , the original target response ‘ the train i d is tr8259 departing from cambridge ’ is delexicalized into ‘ the train i d is train_id departing from train_departure ’ .
We use the provided entity databases ( DBs ) to match potential attributes in all target system responses .
To construct dialogue history , we keep the original version of all text , including system responses of previous turns , rather than the delexicalized form .
We split all sequences of dialogue history , user utterances of the current turn , dialogue states , and delexicalized target responses , into case - insensitive tokens .
We share the embedding weights of all source sequences , including dialogue history , user utterance , and dialogue states , but use a separate embedding matrix to encode the target system responses .
We summarize the number of dialogues in each domain in Table 2 .
For each domain , a dialogue is selected as long as the whole dialogue ( i.e. singledomain dialogue ) or parts of the dialogue ( i.e. in multi - domain dialogue ) is involved with the domain .
For each domain , we also build a set of possible inform and request slots using the dialogue state annotation in the training data .
The details of slots and database in each domain can be seen in Table 9 .
The DBs of 3 domains taxi , police , and hospital are not available as part of the benchmark .
On average , each dialogue has 1.8 domains and extends over 13 turns .
We describe our baseline models in DST , contextto - text generation , and end - to - end dialogue tasks .
B Baselines
B.1 DST
FJST and HJST ( Eric et al , 2019 ) .
These models adopt a ﬁxed - vocabulary DST approach .
Both models include encoder modules ( either bidirectional LSTM or hierarchical LSTM ) to encode the dialogue history .
The models pass the context hidden states to separate linear transformation to obtain ﬁnal vectors to predict individual slots separately .
The output vector is used to measure a score of each candidate from a predeﬁned candidate set .
DST Reader ( Gao et al , 2019 ) .
This model considers the DST task as a reading comprehension task and predicts each slot as a span over tokens within
dialogue history .
DST Reader utilizes attentionbased neural networks with additional modules to predict slot type and carryover probability .
TSCP ( Lei et al , 2018 ) .
The model adopts a sequence - to - sequence framework with a pointer network to generate dialogue states .
The source sequence is a combination of the last user utterance , dialogue state of the previous turn , and user utterance .
To compare with TSCP in a multi - domain task - oriented dialogue setting , we adapt the model to multi - domain dialogues by formulating the dialogue state of the previous turn similarly as our models .
We reported the performance when the maximum length of the output dialogue state sequence L is set to 20 tokens ( original default parameter is 8 tokens but we expect longer dialogue state in MultiWOZ benchmark and selected 20 tokens ) .
HyST ( Goel et al , 2019 ) .
This model combines the advantage of ﬁxed - vocabulary and openvocabulary approaches .
The model uses an openvocabulary approach in which the set of candidates of each slot is constructed based on all word ngrams in the dialogue history .
Both approaches are applied in all slots and depending on their performance in the validation set , the better approach is used to predict individual slots during test time .
TRADE ( Wu et al , 2019a ) .
The model adopts a sequence - to - sequence framework with a pointer network to generate individual slot token - by - token .
The prediction is additionally supported by a slot gating component that decides whether the slot is “ none " , “ dontcare " , or “ generate " .
When the gate of a slot is predicted as “ generate " , the model will generate value as a natural output sequence for that slot .
NADST ( Le et al , 2020 ) .
The model proposes a non - autoregressive approach for dialogue state tracking which enables learning dependencies between domain - level and slot - level representations as well as token - level representations of slot values .
DSTQA ( Zhou and Small , 2019 ) .
The model treats dialogue state tracking as a question answering problem in which state values can be predicted through lexical spans or unique generated values .
It is enhanced with a knowledge graph where each node represent a slot and edges are based on overlaps of their value sets .
SOM - DST ( Kim et al , 2020 ) .
This is the current state - of - the - art model on the MultiWOZ2.1 dataset .
The model exploits a selectively overwriting mechanism on a ﬁxed - sized memory of dialogue states .
1872  Domain Restaurant
Hotel
Attraction
Train
Taxi
Police
Hospital
inf_bookstay ,
Slots inf_area , inf_food , inf_name , inf_pricerange , inf_bookday , inf_booktime , inf_bookpeople , req_address , req_area , req_food , req_phone , req_postcode inf_area , inf_internet , inf_name , inf_parking , inf_pricerange , inf_stars , inf_type , inf_bookday , inf_bookpeople , req_address , req_area , req_internet , req_parking , req_phone , req_postcode , req_stars , req_type inf_area , inf_type , inf_name , req_area , req_phone , req_postcode , req_type inf_arriveBy , inf_departure , inform_day , inf_destination , inf_leaveAt , inf_bookpeople , req_duration , req_price inf_arriveBy , inf_leaveAt , req_phone inf_department , req_postcode req_address , req_phone , req_postcode
inf_destination ,
inf_departure ,
req_address ,
req_address ,
req_phone ,
33
79
2,828
# entities 110
DB attributes i d , address , area , food , introduction , name , phone , postcode , pricerange , signature , type
i d , address , area , internet , parking , single , double , family , name , phone , postcode , pricerange ’ , takesbookings , stars , type
i d , address , area , entrance , name , phone , postcode , pricerange , openhours , type trainID , arriveBy , day , departure , destination , duration , leaveAt , price
Table 9 : Summary of slots and DB details by domain in the MultiWOZ dataset ( Budzianowski et al , 2018 )
At each dialogue turn , the mechanism involve decision making on whether to update or carryover the state values from previous turns .
nents are pre
- trained and combined into an end - toend system .
Each component output is used as a structured input to other components .
B.2 Context - to - Text Generation
Baseline .
( Budzianowski et al , 2018 ) provides a baseline for this setting by following the sequenceto - sequence model ( Sutskever et al , 2014 ) .
The source sequence is all past dialogue turns and the target sequence is the system response .
The initial hidden state of the RNN decoder is incorporated with additional signals from the dialogue states and database representations .
TokenMoE ( Pei et al , 2019 ) .
TokenMoE refers to Token - level Mixture - of - Expert model .
The model follows a modularized approach by separating different components known as expert bots for different dialogue scenarios .
A dialogue scenario can be dependent on a domain , a type of dialogue act , etc .
A chair bot is responsible for controlling expert bots to dynamically generate dialogue responses .
HDSA ( Chen et al , 2019 ) .
This is the current stateof - the - art in terms of Inform and BLEU score in the context - to - text generation setting in MultiWOZ2.0 .
HDSA leverages the structure of dialogue acts to build a multi - layer hierarchical graph .
The graph is incorporated as an inductive bias in a self - attention network to improve the semantic quality of generated dialogue responses .
Structured Fusion ( Mehri et al , 2019 ) .
This approach follows a traditional modularized dialogue system architecture , including separate components for NLU , DM , and NLG .
These compoLaRL ( Zhao et al , 2019 ) .
This model uses a latent dialogue action framework instead of handcrafted dialogue acts .
The latent variables are learned using unsupervised learning with stochastic variational inference .
The model is trained in a reinforcement learning framework whereby the parameters are trained to yield a better Success rate .
The model is the current state - of - the - art in terms of Success metric .
GPT2 ( Budzianowski and Vuli´c , 2019 ) .
Unsupervised pre - training language models have signiﬁcantly improved machine learning performance in many NLP tasks .
This baseline model leverages the power of a pre - trained model ( Radford et al , 2019 ) and adapts to the context - to - text generation setting in task - oriented dialogues .
All input components , including dialogue state and database state , are transformed into raw text format and concatenated as a single sequence .
The sequence is used as input to a pre - trained GPT-2 model which is then ﬁne - tuned with MultiWOZ data .
DAMD ( Zhang et al , 2019 ) .
This is the current state - of - the - art model for context - to - text generation task in MultiWOZ 2.1 .
This approach augments training data with multiple responses of similar context .
Each dialogue state is mapped to multiple valid dialogue acts to create additional state - act pairs .
1873  B.3 End - to - End
TSCP ( Lei et al , 2018 ) .
In addition to the DST task , we evaluate TSCP as an end - to - end dialogue system that can do both DST and NLG .
We adapt the models to the multi - domain DST setting as described in Section B.1 and keep the original response decoder .
Similar to the DST component , the response generator of TSCP also adopts a pointer network to generate tokens of the target system responses by copying tokens from source sequences .
In this setting , we test TSCP with two settings of the maximum length of the output dialogue state sequence : L = 8 and L = 20 .
HRED - TS ( Peng et al , 2019 ) .
This model adopts a teacher - student framework to address multidomain task - oriented dialogues .
Multiple teacher networks are trained for different domains and intermediate representations of dialogue acts and output responses are used to guide a universal student network .
The student network uses these representations to directly generate responses from dialogue context without predicting dialogue states .
C Qualitative Analysis
We examine an example of dialogue in the test data and compare our predicted outputs with the baseline TSCP ( L = 20 ) ( Lei et al , 2018 ) and the ground truth .
From Figure 4 , we observe that both our predicted dialogue state and system response are more correct than the baseline .
Speciﬁcally , our dialogue state can detect the correct type slot in the attraction domain .
As our dialogue state is correctly predicted , the queried results from DB is also more correct , resulting in better response with the right information ( i.e. ‘ no attraction available ’ ) .
In Figure 5 , we show the visualization of domain - level and slot - level attention on the user utterance .
We notice important tokens of the text sequences , i.e. ‘ entertainment ’ and ‘ close to ’ , are attended with higher attention scores .
Besides , at domain - level attention , we ﬁnd a potential additional signal from the token ‘ restaurant ’ , which is also the domain from the previous dialogue turn .
We also observe that attention is more reﬁned throughout the neural network layers .
For example , in the domain - level processing , compared to the 2nd layer , the 4th layer attention is more clustered around speciﬁc tokens of the user utterance .
In Table 10 and 11 , we reported the complete output of this example dialogue .
Overall , our dialogue agent can carry a proper dialogue with the
user throughout the dialogue steps .
Speciﬁcally , we observed that our model can detect new domains at dialogue steps where the domains are introduced e.g. attraction domain at the 5th turn and taxi domain at the 8th turn .
The dialogue agent can also detect some of the co - references among the domains .
For example , at the 5th turn , the dialogue agent can infer the slot area for the new domain attraction as the user mentioned ‘ close the restaurant ’ .
We noticed that that at later dialogue steps such as the 6th turn , our decoded dialogue state is not correct possibly due to the incorrect decoded dialogue state in the previous turn , i.e. 5th turn .
In Figure 2 and 3 , we plotted the Joint Goal Accuracy and BLEU metrics of our model by dialogue turn .
As we expected , the Joint Accuracy metric tends to decrease as the dialogue history extends over time .
The dialogue agent achieves the highest accuracy in state tracking at the 1st turn and gradually reduces to zero accuracy at later dialogue steps , i.e. 15th to 18th turns .
For response generation performance , the trend of BLEU score is less obvious .
The dialogue agent obtains the highest BLEU scores at the 3rd turn and ﬂuctuates between the 2nd and 13th turn .
Figure 2 : Joint Accuracy metric by dialogue turn in the test data .
Figure 3 : BLEU4 metric by dialogue turn in the test data .
1874123456789101112131415161718Dialog turn00.20.40.60.81Goals123456789101112131415161718Dialog turn-0.0500.050.10.150.20.25BLEU  Figure 4 : Example dialogue with the input system response Rt−1 and current user utterance Ut , and the output state BSt and system response Rt .
Compared with TSCP , our dialogue state and response are more correct and closer to the ground truth .
Figure 5 : Visualization of attention to the user utterance sequence at slot - level ( lower right ) and domain - level ( upper right ) is also included .
More red denotes higher attention score between domain or slot representation and token representation .
Best viewed in color .
1875R4 : all set .
your reference number is k2bo09vq .
U5 : thanks .
i am also looking for some entertainment close to the restaurant .
any suggestions ?
B5 : { restaurant : { area : center , name : dojo noodle bar , pricerange : cheap } , attraction : { area : center , type : entertainment}}R5 : i am sorry i do not have any attractions meeting the criteria you listed .
is there another type of attraction or area you would like me to search ? B5tscp : { restaurant : { area : center , pricerange : cheap } , attraction : { area : center}}R5tscp : there are many attractions in the restaurant_area .
do you have a preference?B5ours : { restaurant : { area : center , pricerange : cheap } , attraction : { area : center , type : entertainment}}R5ours : there are no attraction_type attractions in the restaurant_area of town .
would you like to try another area ?
2nd Layer4th Layer3rd LayerDomain - level DSTSlot - levelDST  Turn
Input Dialogue
Ground - truth State and Response
Our Predicted State and Response
1
2
3
4
5
6
7
8
R0 : < blank >
U1 :
i am looking for a cheap restaurant in the center of the city U1 : do you have any speciﬁc type of food you would like ?
U2 : no , i am not picky as long as the price -s are low .
R2 : there is a cheap chinese restaurant called the dojo noodle bar located in the centre of town .
would you like to book a table ?
U3 : yes please , for 8 people at 1830 on thursday .
R3 : i am sorry but dojo noodle bar is solidly booked at that time .
i can try a different time or day for you U4 : can you try to book it at 1730 .
R4 : all set .
your reference number is k2bo09vq .
U5 : thanks .
i am also looking for some entertainment close to the restaurant .
any suggestions ?
R5 : i am sorry i do not have any attractions meeting the criteria you listed .
is there another type of attraction or area you would like me to search ?
U6 : why do not you try an architectural attraction , instead .
R6 : all saints church looks good , would you like to head there ?
U7 : yes please .
can you let me know what the entrance fee is too ?
R7 : its entrance fee is free .
U8 : i also need to book a taxi between the restaurant and the church .
{ area :
B1 : { restaurant : pricerange : cheap } } R1 : do you have any speciﬁc type of food you would like ?
centre ,
{ area :
centre ,
B2 : { restaurant : pricerange : cheap } } R2 : there is a restaurant_pricerange restaurant_food restaurant_type called the restaurant_name located in the restaurant_area of town .
would you like to book a table ?
B3 : centre , pricerange : cheap , name : dojo noodle bar } }
{ restaurant :
{ area :
{ area :
centre ,
B1 : { restaurant : pricerange : cheap } } R1 : there are 15 restaurant_pricerange restaurant_type s in the restaurant_area of town .
do you have a preference ?
B2 : { restaurant : pricerange : cheap } } R2 : how about restaurant_name ?
it s an restaurant_pricerange restaurant_food restaurant_type located in the restaurant_area of town .
centre ,
{ area :
B2 : { restaurant : pricerange : cheap } }
{ area :
centre ,
R3 : i am sorry but restaurant_name is solidly booked at that time .
i can try a different time or day for you .
B4 : centre , { area : { restaurant : pricerange : cheap , name : dojo noodle bar } }
R4 : all set .
your reference number is restaurant_reference .
{ area :
{ restaurant :
B5 : centre , pricerange : cheap , name : dojo noodle bar } , attraction : { area : centre , type : entertainment } } R5 : i am sorry i do not have any attractions meeting the criteria you listed .
is there another type of attraction or area you would like me to search ?
B6:{restaurant : centre , pricerange : cheap , name : dojo noodle bar } , attraction : { area : centre , type : architecture } }
{ area :
R6 : attraction_name looks good , would you like to head there ?
{ area :
B7:{restaurant : centre , pricerange : cheap , name : dojo noodle bar } , attraction : { area : centre , type : architecture } } R7 : its tion_pricerange .
entrance
attracfee
is
{ area :
name :
B8:{restaurant : centre , pricerange : dojo cheap , noodle bar } , attraction : { area : centre , type : architecture } , taxi : { departure : dojo noodle bar , destination : all saints church } } R8 : what time would you like the taxi to pick you up from restaurant_name ?
R3 : booking was successful .
the table will be reserved for 15 minutes .
reference number is restaurant_reference .
B4 : { restaurant : pricerange : cheap } }
centre ,
{ area :
R4 : booking was successful .
the table will be reserved for 15 minutes .
reference number is restaurant_reference .
B5 : centre , pricerange : cheap } , attraction : { area : centre , type : entertainment } }
{ restaurant :
{ area :
R5 : there are no attraction_type attractions in the restaurant_area of town .
would you like to try another area ?
B6:{restaurant : centre , pricerange : cheap } , attraction : { area : centre , type : architecture } }
{ area :
R6 : attraction_name is a great attraction_type in the center of town .
would you like more information ?
B7:{restaurant : centre , { area : pricerange : cheap } , attraction : { area : centre , type : architecture } }
fee
entrance
is attracis there anything
R7 : the tion_pricerange .
else i can help you with ?
B8:{restaurant : centre , pricerange : cheap } , attraction : { area : centre , taxi : { destination : dojo noodle bar } }
architecture } ,
{ area :
type :
R8 : what time would you like to leave or arrive by ?
Table 10 : Complete turns of an example multi - domain dialogue with each turn including the input of past system response Rt−1 and current user utterance Ut , and the predicted dialogue state Bt and system response Ut .
The dialogue consists of 11 turns in total and extends across 3 domains sequentially : restaurant , attraction , and taxi .
Dialogue continues in Table 11 .
1876  Turn
Input Dialogue R8 : what time would you like the taxi to pick you up from dojo noodle bar ?
9
U9 : 1830 , please .
R9 : your taxi is booked .
the car is a blue bmw and the contact number is 07239644669 .
is there anything else i can help you with ?
10
U10 : that s it .
thanks .
R10 : awesome , enjoy your trip !
11
U11 : thanks !
i will deﬁnitely try to .
Ground - truth State and Response
Our Predicted State and Response
{ area :
{ restaurant :
B9 : centre , pricerange : cheap , name : dojo noodle bar } , attraction : { area : centre , type : architecture } , taxi : { departure : dojo noodle bar , destination : all saints church , leaveAt : 1830 } } R9 : your taxi is booked .
the car is a taxi_type and the contact number is taxi_phone .
is there anything else i can help you with ?
B10 : centre , pricerange : cheap , name : dojo noodle bar } , attraction : { area : centre , type : architecture } , taxi : { departure : dojo noodle bar , destination : all saints church , leaveAt : 1830 } } R10 : awesome , enjoy your trip !
{ restaurant :
{ area :
{ area :
{ restaurant :
B11 : centre , pricerange : cheap , name : dojo noodle bar } , attraction : { area : centre , type : architecture } , taxi : { departure : dojo noodle bar , destination : all saints church , leaveAt : 1830 } } R11 : great !
goodbye and have a nice day .
{ area :
B9:{restaurant : centre , pricerange : cheap } , attraction : { area : centre , taxi : { destination : dojo noodle bar } }
architecture } ,
type :
R9 : booked booking completed !
car type taxi_type contact number taxi_phone can i help you with anything else ?
B10 : centre , pricerange : cheap } , attraction : { area : centre , type : architecture } , taxi : { destination : dojo noodle bar } }
{ restaurant :
{ area :
R10 : you are welcome .
have a great day !
B11 : centre , pricerange : cheap } , attraction : { area : centre , type : architecture } , taxi : { destination : dojo noodle bar } }
{ restaurant :
{ area :
R11 : thank you for using our services .
have a great day .
Table 11 : Dialogue continues from Table 10 .
Each turn includes the input of past system response St−1 and current user utterance Ut , and the predicted dialogue dialogue state BSt and system response
St.
The dialogue consists of 11 turns in total and extends across 3 domains sequentially : restaurant , attraction , and taxi .
1877
