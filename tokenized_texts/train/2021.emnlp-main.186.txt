Improving Graph - based Sentence Ordering with Iteratively Predicted Pairwise Orderings
Shaopeng Lai1 , Ante Wang1 , Fandong Meng2 , Jie Zhou2 , Yubin Ge3 , Jiali Zeng4 , Junfeng Yao1 , Degen Huang5 and Jinsong Su1,6∗ 1Xiamen University , China 2Pattern Recognition Center , WeChat AI , Tencent Inc , China 3University of Illinois at Urbana - Champaign , USA 4Tencent Cloud Xiaowei , China 5Dalian University of Technology , China 6Pengcheng Laboratory , China splai@stu.xmu.edu.cn , fandongmeng@tencent.com , jssu@xmu.edu.cn
Abstract
Dominant sentence ordering models can be classiﬁed into pairwise ordering models and set - to - sequence models .
However , there is little attempt to combine these two types of models , which inituitively possess complementary advantages .
In this paper , we propose a novel sentence ordering framework which introduces two classiﬁers to make better use of pairwise orderings for graph - based sentence ordering ( Yin et al , 2019 , 2021 ) .
Specially , given an initial sentence - entity graph , we ﬁrst introduce a graph - based classiﬁer to predict pairwise orderings between linked sentences .
Then , in an iterative manner , based on the graph updated by previously predicted highconﬁdent pairwise orderings , another classiﬁer is used to predict the remaining uncertain pairwise orderings .
At last , we adapt a GRN - based sentence ordering model ( Yin et al , 2019 , 2021 ) on the basis of ﬁnal graph .
Experiments on ﬁve commonly - used datasets demonstrate the effectiveness and generality of our model .
Particularly , when equipped with BERT ( Devlin et al , 2019 ) and FHDecoder ( Yin et al , 2020 ) , our model achieves state - of - the - art performance .
Our code is available at https:// github.com/DeepLearnXMU/IRSEG .
1
Introduction
With the rapid development and increasing applications of natural language processing ( NLP ) , modeling text coherence has become a signiﬁcant task , since it can provide beneﬁcial information for understanding , evaluating and generating multi - sentence texts .
As an important subtask , sentence ordering aims at recovering unordered sentences back to naturally coherent paragraphs .
It is required to deal with logic and syntactic consistency , and has increasingly attracted attention due to its wide applications on several tasks such as text generation ( Konstas and Lapata , 2012 ; Holtzman et al , 2018 )
∗ Corresponding author
and extractive summarization ( Barzilay et al , 2002 ; Nallapati et al , 2012 ) .
Recently , inspired by the great success of deep learning in other NLP tasks , researchers have resorted to neural sentence ordering models , which can be classiﬁed into : pairwise ordering models ( Chen et al , 2016 ; Agrawal et al , 2016 ; Li and Jurafsky , 2017 ; Moon et al , 2019 ; Kumar et al , 2020 ; Prabhumoye et al , 2020 ; Zhu et al , 2021 ) and set - to - sequence models ( Gong et al , 2016 ; Nguyen and Joty , 2017 ; Logeswaran et al , 2018 ; Mohiuddin et al , 2018 ; Cui et al , 2018 ; Yin et al , 2019 ; Oh et al , 2019 ;
Yin et
al , 2020 ; Cui et al , 2020 ; Yin et al , 2021 ) .
Generally , the former predicts the relative orderings between pairwise sentences , which are then leveraged to produce the ﬁnal ordered sentence sequence .
Its advantage lies in the lightweight pairwise ordering predictions , since the predictions only depend on the semantic representations of involved sentences .
By contrast , the latter is mainly based on an encoder - decoder framework , where an encoder is ﬁrst used to learn contexualized sentence representations by considering other sentences , and then a decoder , such as pointer network ( Vinyals et al , 2015a ) , outputs ordered sentences .
Overall , these two kinds of models have their own strengths , which are complementary to each other .
To combine their advantages , Yin
et al ( 2020 ) propose FHDecoder that is equipped with three pairwise ordering prediction modules to enhance the pointer network decoder .
Along this line , Cui et al ( 2020 ) introduce BERT to exploit the deep semantic connection and relative orderings between sentences and achieve SOTA performance when equipped with FHDecoder .
However , there still exist two drawbacks : 1 ) their pairwise ordering predictions only depend on involved sentence pairs , without considering other sentences in the same set ; 2 ) their one - pass pairwise ordering predictions are relatively rough , ignoring distinct difﬁculties in
Proceedingsofthe2021ConferenceonEmpiricalMethodsinNaturalLanguageProcessing , pages2407–2417November7–11,2021.c(cid:13)2021AssociationforComputationalLinguistics2407  predicting different sentence pairs .
Therefore , we believe that the potential of pairwise orderings in neural sentence ordering models has not been fully exploited .
In this paper , we propose a novel iterative pairwise ordering prediction framework which introduces two classiﬁers to make better use of pairwise orderings for graph - based sentence ordering ( Yin et al , 2019 , 2021 ) .
As an extension of SentenceEnity Graph Recurrent Network ( SE - GRN ) ( Yin et al , 2019 , 2021 ) , our framework enriches the graph representation with iteratively predicted orderings between pairwise sentences , which further beneﬁts the subsequent generation of ordered sentences .
The basic intuitions behind our work are two - fold .
First , learning contextual sentence representations is helpful to predict pairwise orderings .
Second , difﬁculties of predicting ordering vary with respect to different sentence pairs .
Thus , it is more reasonable to ﬁrst predict the orderings of pairwise sentences easily to be predicted , and then leverage these predicted orderings to reﬁne the predictions for other pairwise sentences .
Concretely , we propose two graph - based classiﬁers to iteratively conduct ordering predictions for pairwise sentences .
The ﬁrst classiﬁer takes the sentence - entity graph ( SE - Graph ) ( Yin et al , 2019 , 2021 ) as input and yields relative orderings of linked sentences via corresponding probabilities .
Next , in an iterative manner , the second classiﬁer enriches the previous graph representation by converting high - value probabilities into the weights of the corresponding edges , and then reconduct graph encoding to predict orderings for the other pairwise sentences .
Based on the ﬁnal weighted graph representation , we adapt SE - GRN to construct a graph - based sentence ordering model , of which the decoder is also a pointer network .
To the best of our knowledge , our work is the ﬁrst to exploit pairwise orderings to enhance the graph encoding for graph - based set - to - squence sentence ordering .
To investigate the effectiveness of our framework , we conduct extensive experiments on several commonly - used datasets .
Experimental results and in - depth analyses show that our model enhanced with some proposed technologies ( Devlin et al , 2019 ;
Yin et
al , 2020 ) achieves the state - of - the - art performance .
2 Related Work
Early studies mainly focused on exploring humandesigned features for sentence ordering ( Lapata , 2003 ; Barzilay and Lee , 2004 ; Barzilay and Lapata , 2005 , 2008 ; Elsner and Charniak , 2011 ; Guinaudeau and Strube , 2013 ) .
Recently , neural network based sentence ordering models have become dominant , consisting of the following two kinds of models :
1 ) Pairwise models .
Generally , they ﬁrst predict the pairwise orderings between sentences and then use them to produce the ﬁnal sentence order via ranking algorithms ( Chen et al , 2016 ; Agrawal et al , 2016 ; Li and Jurafsky , 2017 ; Kumar et al , 2020 ; Prabhumoye et al , 2020 ; Zhu et al , 2021 ) .
For example , Chen et al ( 2016 ) ﬁrst framed sentence ordering as a ranking task conditioned on pairwise scores .
Agrawal et al ( 2016 ) conducted the same experiments as ( Chen et al , 2016 ) in the task of image caption storytelling .
Similarly , Li and Jurafsky ( 2017 ) investigated the effectiveness of discriminative and generative models on ordering pairs of sentences in small domains .
Moon et al ( 2019 ) proposed a uniﬁed model that incorporates sentence grammar , pairwise coherence and global coherence into a common neural framework .
Recently , Prabhumoye et al ( 2020 ) and Zhu et al ( 2021 ) employed ranking techniques to ﬁnd the right order of the sentences under the constraint of the predicted pairwise sentence ordering ;
2 ) Set - to - sequence Models .
Basically , these models are based on an encoder - decoder framework , where the encoder is used to obtain sentence representations and then the decoder produces ordered sentences progressively .
Among them , both Gong et al ( 2016 ) and Logeswaran et al ( 2018 ) explored RNN based encoder , while both Nguyen and Joty ( 2017 ) and Mohiuddin et al ( 2018 ) employed neural entity grid models as encoders .
Typically , Cui et al ( 2018 ) proposed ATTOrderNet that uses self - attention mechanism to learn sentence representations .
Inspired by the successful applications of graph neural network ( GNN ) in many NLP tasks ( Song et al , 2018 ; Xue et al , 2019 ; Song et al , 2019 , 2020 ) , Yin et al ( 2019 , 2021 ) represented input sentences with a uniﬁed SE - Graph and then applied GRN to learn sentence representations .
Very recently , we notice that Chowdhury et al ( 2021 ) proposes a BART - based sentence ordering model .
Please note that our porposed framework is compatible with BART ( Lewis et al , 2020 ) .
For
2408  i=1,i(cid:48)=1∪{¯ei , j}I , J
i=1∪{ˆvj}J i=1,j=1∪{ˆej , j(cid:48)}J , J
resented as an undirected sentence - entity graph G = ( V , E ) , where V = { vi}I j=1 and E = { ei , i(cid:48)}I , I j=1,j(cid:48)=1 represent the nodes and edges respectively .
Here , nodes include sentence nodes ( such as vi ) and entity nodes ( such as ˆvj ) , and each edge is 1 ) sentencesentence edge ( ss - edge , such as ei , i(cid:48 ) ) linking two sentences having the same entity ; or 2 ) sentenceentity edge ( se - edge , such as ¯ei , j ) connecting an entity to a sentence that contains it .
Each se - edge is assigned with a label including subject , object or other , based on the syntactic role of its involved entity ; or 3 ) entity - entity edge ( ee - edge , such as ˆej , j(cid:48 ) ) connecting two semantic related entities .
Besides , a virtual global node connecting to all nodes is introduced to capture global information effectively .
3.2 Paragraph Encoding with GRN
Node representations of each sentence and each entity are ﬁrst initialized with the concatenation of bidirectional last states of the Bi - LSTM sentence encoder and the corresponding GloVe word embedding , respectively .
Then , a GRN is adapted to encode the above sentence - entity graph , where node states are updated iteratively .
During the process of updating hidden states , the messages for each node are aggregated from its adjacent nodes .
Speciﬁcally , the sentence - level message m(l ) i and entity - level message ˜m(l ) for a sentence si are dei ﬁned as follows :
m(l )
i =
( cid:88 )
w(κ(l-1 )
i
, κ(l-1 )
i(cid:48 ) ) κ(l-1 ) i(cid:48 )
,
ˆm(l )
i =
¯w(κ(l-1 )
i
, ( cid:15)(l-1 ) j
, rij)(cid:15)(l-1 )
,
j
( 1 )
vi(cid:48 ) ∈Ni ( cid:88 )
vj ∈ ˆNi
i(cid:48 )
and ( cid:15)(l-1 ) j
where κ(l-1 ) stand for the neighboring sentence and entity representations of the i - th sentence node vi at the ( l − 1)-th layer , Ni and ˆNi denote the sets of neighboring sentences and entities of vi , and both w(∗ ) and ¯w(∗ ) are gating functions with single - layer networks , involving associated node states and edge label rij ( if any ) .
Afterwards , κ(l-1 )
i
its original representation κ(0 ) i neighbours ( m(l ) g(l-1 ) via GRU :
i and ˆm(l )
is updated by concatenating , the messages from i ) and the global state
ξ(l ) i ; m(l ) i =
[ κ(0 ) i = GRU(ξ(l ) κ(l )
i ; ˆm(l ) i , κ(l-1 )
i ; g(l-1 ) ] , i(cid:48 ) ) .
( 2 )
Similar to updating sentence nodes , each entity state ( cid:15)(l-1 ) is updated based on its word embedding j
Figure 1 : The architecture of SE - GRN model ( Yin et al , 2019 , 2021 ) .
example , we can easily adapt the BART encoder as our sentence encoder .
With similar motivation with ours , that is , to combine advantages of above - mentioned two kinds of models , Yin
et al ( 2020 ) introduced three pairwise ordering predicting modules ( FHDecoder ) to enhance the pointer network decoder of ATTOrderNet .
Recently , Cui et al ( 2020 ) proposed BERSON that is also equipped with FHDecoder and utilizes BERT to exploit the deep semantic connection and relative ordering between sentences .
However , signiﬁcantly different from them , we borrow the idea from the mask - predict framework ( Gu et al , 2018 ; Ghazvininejad et al , 2019 ; Deng et al , 2020 ) to progressively incorporate pairwise ordering information into SE - Graph , which is the basis of our graph - based sentence ordering model .
To the best of our knowledge , our work is the ﬁrst attempt to explore iteratively reﬁned GNN for sentence ordering .
3 Background
In this section , we give a brief introduction to the SE - GRN ( Yin et al , 2019 , 2021 ) , which is selected as our baseline due to its competitive performance .
As shown in Figure 1 , SE - GRN is composed of a Bi - LSTM sentence encoder , GRN ( Zhang et al , 2018 ) paragraph encoder , and a pointer network ( Vinyals et al , 2015b ) decoder .
3.1 Sentence - Entity Graph
1 , . . .
, o∗
The SE - GRN takes I sentences s =
[ so1 , . .
. , soI ] as input and tries to predict their correct order o∗
=
[ o∗ I ] .
At ﬁrst , each sentence soi is fed into a Bi - LSTM sentence encoder , where the concatenation of the last hidden states in two directions is used as the context - aware sentence representation κ(0 ) oi .
As illustrated in the middle of Figure 1 , each input sentence set is rep2409  Figure 2 : The architecture of our model during inference .
IRSE - Graph is a weighted graph representation , of which weights of ss - edges are iteratively reﬁned by iterative classiﬁer .
Note that we construct the sentence ordering model based on the ﬁnal IRSE - Graph .
embj , hidden states of its connected sentence nodes ( such as κ(l-1 ) ) , and g(l-1 ): ( cid:88 )
i
m(l )
j =
¯w((cid:15)(l-1 )
j
, κ(l-1 )
i
, rij)κ(l-1 )
,
i
vi∈Nj ( cid:88 )
ˆm(l )
j =
˜w((cid:15)(l-1 ) j
, ( cid:15)(l-1 )
j(cid:48 ) ) ( cid:15)(l-1 )
j
,
vj(cid:48 ) ∈ ˆNj ξ(l ) j = [ embj ; m(l ) j = GRU(ξ(l ) ( cid:15)(l )
j
j , ( cid:15)(l-1 )
j ; g(l-1 ) ] , j ; ˆm(l ) ) .
( 3 )
Finally , the messages from both sentence and entity states are used to update global state g(l-1 ) via
g(l ) = GRU (
1 |V |
( cid:88 )
vi∈V
κ(l-1 )
i
,
1 | ˆV |
( cid:88 )
ˆvj ∈ ˆV
( cid:15)(l-1 ) j
, g(l-1 ) ) .
( 4 )
The above updating process is iterated for L times .
Usually , the top hidden states are considered as ﬁne - grained graph representations , which will provide dynamical context for the decoder via attention mechanism .
3.3 Decoding with Pointer Network Given the learned hidden states { κ(L ) i } and g(L ) , the prediction procedure for order o(cid:48 ) can be formalized as follows :
P ( o(cid:48)|K ( L ) )
=
P ( o(cid:48 )
t|o(cid:48 )
< t , K ( L ) o(cid:48 )
) ,
t−1
I ( cid:89 )
t=1
P ( o(cid:48 )
t|o(cid:48 )
< t , K ( L ) o(cid:48 )
t−1
)
= softmax(qT tanh(W hd
t + U K ( L ) o(cid:48 )
t−1
)
) ,
4 Our Framework
In this section , we give a detailed description to our framework .
As shown in Figure 2 , we ﬁrst introduce two graph - based classiﬁers to construct an iteratively reﬁned sentence - entity graph ( IRSEGraph ) .
It is a weighted version of SE - Graph , where pairwise ordering inforamtion is iteratively incorporated to update ss - edge weights .
Then , we adapt the conventional GRN to establish a neural sentence ordering model based on the ﬁnal IRSEGraph .
4.1 The Deﬁnition of IRSE - Graph
As an extension of SE - Graph , IRSE - Graph can be denoted as G=(V , E , W ) , where V and E share the same deﬁnitions with those of SE - Graph .
Particularly , in IRSE - Graph , each ss - edge ei , i(cid:48 ) is a directed one with a weight wi , i(cid:48)∈W indicating the probability of sentence si occurring before sentence si(cid:48 ) .
Meanwhile , there must exist a corresponding ssedge ei(cid:48),i with the weight wi(cid:48),i=1−wi , i(cid:48 ) denoting the probability of si appearing after si(cid:48 ) .
For example , in Figure 2 , for two linked sentence nodes v1 and v2 , there exist two ss - edges e1,2 and e2,1 with weights w1,2 and w2,1 respectively , both of which are iteratively updated during constructing IRSE - Graph .
hd
t = LSTM(hd
t−1 , κ(0 ) o(cid:48 )
)
.
t−1
( 5 )
4.2 Constructing IRSE - Graph
and hd
Here , q , W and U are learnable parameters , K(L ) t denote the sentence representations o(cid:48 ) t−1 , . . . , κ(L ) o(cid:48 ) t−1
( cid:104 ) κ(L ) with predicted order and the deo(cid:48 ) 1 coder hidden state at the t - th time step , which is initialized by g(L ) as t=0 , respectively .
( cid:105 )
Inspired by Gui et al ( 2020 ) , we successively introduce two classiﬁers — initial classiﬁer and iterative classiﬁer to construct IRSE - Graph .
Both classiﬁers are constructed using slightly adapted GRN and utilized to deal with different scenarios , respectively .
In this way , we can fully exploit the
2410  potential of iterative classiﬁer to predict better pairwise orderings .
We will give a detail introduction to the slightly adapted GRN in Section § 4.3 .
Algorithm 1
The procedure of constructing IRSE - Graph Input :
the initial IRSE - Graph : G=(V , E , W ) with all
To better understand the procedure of constructing IRSE - Graph , we provide the details in Algorithm 1 .
During this procedure , pairwise orderings are iteratively predicted and gradually incorporated to reﬁne IRSE - Graph .
Here we introduce a set VP(k ) to collect sentence node pairs with uncertain pairwise orderings at the k - th iteration .
First , we bulid an initial classiﬁer based on the initial IRSE - Graph , where the learned sentence representations are used to predict pairwise orderings between any two linked sentences only once ( Lines 2 - 6 ) .
Note that in the initial IRSEGraph , all weights of ss - edges are set to 0.5 .
In this case , IRSE - Graph degrades to the conventional SE - Graph .
Concretely , for any two linked sentence nodes vi and vi(cid:48 ) , we concatenate their vector representations κi and κi(cid:48 ) as [ κi ; κi(cid:48 ) ] and [ κi(cid:48 ) ; κi ] , which are fed into an MLP classiﬁer to obtain two probabilities .
Then , we normalize and convert these two probabilities into ss - edge weights wi , i(cid:48 ) and wi(cid:48),i .
If both wi , i(cid:48 ) and wi(cid:48),i are within a preﬁxed interval [ δmin , δmax ] , we consider ( vi , vi(cid:48 ) )
as a sentence node pair with uncertain pairwise ordering and add it into VP(0 )
.
Moreover , we replace both wi , i(cid:48 ) and wi(cid:48),i with 0.5 , indicating that they will be repredicted in the next iteration .
In the following , we also construct an iterative classiﬁer based on IRSE - Graph .
However , in an easy - to - hard manner , we use iterative classiﬁer to perform pairwise ordering predictions , where the ss - edge weights of IRSE - Graph are continously updated with previously - predicted pairwise orderings with high conﬁdence ( Lines 13 - 26 ) .
By doing so , graph representations can be continously reﬁned for better subsequent predictions .
More speciﬁcally , the k - th iteration of this classiﬁer mainly involve three steps :
In Step 1 , based on the current IRSE - Graph , we employ the adapted GRN to conduct graph encoding to learn sentence representations ( Line 15 ) .
In Step 2 , on the top of learned sentence representations , we stack an MLP classiﬁer to predict pairwise orderings for sentence node pairs in VP(k ) ( Lines 16 - 19 ) .
Likewise , we collect sentence node pairs with uncertain pairwise orderings to form VP(k+1 ) , and reassign their corresponding ss - edge weights as 0.5 , so as to avoid the negative effect of these uncertain ss - edge weights during the next
wi , i(cid:48 ) = 0 ; two thresholds : δmin , δmax
end if
i=1 ← GRN(G )
wi , i(cid:48 ) ← InitialClassifer([κi ; κi(cid:48 ) ] ) wi(cid:48),i ← InitialClassifer([κi(cid:48 ) ; κi ] )
wi , i(cid:48 ) , wi(cid:48),i ← Normalize(wi , i(cid:48 ) , wi(cid:48),i ) if δmin ≤ wi , i(cid:48 ) ≤ δmax then VP(0)← VP(0)∪{(vi , vi(cid:48 ) ) } wi , i(cid:48 ) ← 0.5 , wi(cid:48),i ← 0.5
Output : the ﬁnal IRSE - Graph : G = ( V , E , W ) 1 : VP(0 ) ← ∅ 2 : { κi}I 3 : for any linked sentence node pair ( vi , vi(cid:48 ) ) & & i < i(cid:48 ) do 4 : 5 : 6 : 7 : 8 : 9 : 10 : 11 : end for 12 : k ← 0 13 : repeat 14 : 15 : 16 : 17 : 18 : 19 : 20 : 21 : 22 : 23 : 24 : 25 : 26 : until VP(k+1 )
= = VP(k ) || VP(k )
= = ∅ 27 : return G
wi , i(cid:48 ) ← IterativeClassifer([κi ; κi(cid:48 ) ] ) wi(cid:48),i ← IterativeClassifer([κi(cid:48 ) ; κi ] )
wi , i(cid:48 ) , wi(cid:48),i ← Normalize(wi , i(cid:48 ) , wi(cid:48),i ) if δmin ≤ wi , i(cid:48 ) ≤ δmax then
VP(k+1)← ∅ { κi}I i=1 ← GRN(G ) for ( vi , vi(cid:48 ) )
∈ VP(k )
do
VP(k+1)←VP(k+1 ) ∪{(vi , vi(cid:48 ) ) } wi , i(cid:48 ) ← 0.5 , wi(cid:48),i ← 0.5
end for k ← k + 1
end if
Figure 3 : Introducing noisy ss - edge weights into IRSEGraph .
iteration ( Lines 20 - 23 ) .
In Step 3 , if VP(k+1 ) is equal to VP(k ) or empty , we believe the learning of IRSE - Graph G has converged and thus return it ( Lines 26 - 27 ) .
Although both of our classiﬁers are constructed using IRSE - Graph , their training procedures are slightly different .
As for initial classiﬁer , we directly train it on the initial IRSE - Graph without any pairwise ordering information ( all ss - edge weights are set to 0.5 ) .
By contrast , we train iterative classiﬁer on IRSE - Graph with partial pairwise orderings .
To enable iterative classiﬁer generalizable to any IRSE - Graph with partial predicted pairwise orderings , we ﬁrst set al ss - edge weights to 1 or 0 according to their ground - truth pairwise orderings , and then train the classiﬁer to correctly predict pari2411  wise orderings for other pairs .
Concretely , if si appears before si(cid:48 ) , we set wi , i(cid:48)=1 and wi(cid:48),i=0 , vice versa .
For example , in the left part of Figure 3 , the ground - truth sentence sequence is s1,s2,s3,s4 , and thus we assign the ss - edge weights of linked sentence node pairs ( v1 , v2 ) , ( v3 , v2 ) , ( v3 , v4 ) , ( v2 , v4 ) as follows : w1,2=1 , w2,3=1 , w2,4=1 , w3,4=1 , and w2,1=0 , w3,2=0 , w4,2=0 , w4,3=0 .
Moreover , to enhance the robustness of the iterative classiﬁer , we randomly select a certain ratio η of sentence pairs and assign their ss - edges with incorrect weights .
Let us revisit Figure 3 , for the randomly selected sentence node pair ( v1 , v2 ) , we assign ss - edges weights w1,2 and w2,1 with randomly generated noisy values 0.3 and 0.7 respectively .
In this way , we expect that iterative classiﬁer can conduct correct predictions even given incorrect previously - predicted pairwise orderings .
4.3
IRSE - Graph Sentence Ordering Model
Finally , following the conventional SE - GRN ( Yin et al , 2019 , 2021 ) , we construct a graph - based sentence ordering model .
Note that the above two classiﬁers and our sentence ordering model are all based on IRSE - Graph rather than the conventional SE - Graph , which makes the standard GRN unable to be applied directly .
To deal with this issue , we slightly adapt GRN to utilize pairwise ordering information for graph encoding .
Speciﬁcally , we adapt Equation 1 to incorporate ss - edge weights into the message aggregation of sentence - level nodes :
m(l )
i =
( cid:88 )
wi , i(cid:48 ) · w(κ(l-1 )
i
, κ(l-1 )
i(cid:48 ) ) κ(l-1 ) i(cid:48 )
,
( 6 )
vi(cid:48 )
∈Ni , κ(l-1 )
i
] )
.
; κ(l-1 ) i(cid:48 )
w(κ(l-1 )
i
i(cid:48 ) )
= σ(Wg[κ(l-1 )
Here σ denotes sigmoid function and Wg is learnable parameter matrix .
Equation 6 expresses that the sentence - level aggregation should consider not only the semantic representations of the two involved sentences , but also the relative ordering between them .
In addition , other Equations are the same as those of conventional GRN , which have been described in Section § 3.2 .
5 Experiment
5.1 Setup
Datasets .
Following previous work ( Yin et al , 2020 ; Cui et al , 2018 ; Yin et al , 2021 ) , we carry out experiments on ﬁve benchmark datasets :
• SIND , ROCStory .
SIND ( Huang et al , 2016 ) is a visual storytelling dataset and ROCStory
( Mostafazadeh et al , 2016 ) is about commonsense stories .
Both two datasets are composed of 5 - sentence stories and randomly split by 8:1:1 for the training / validation / test sets .
• NIPS Abstract , AAN Abstract , arXiv Abstract .
These three datasets consist of abstracts from research papers , which are collected from NIPS , ACL anthology and arXiv , respectively ( Radev et al , 2016 ; Chen et al , 2016 ) .
The partitions for training / validation / test of each dataset are as follows : NIPS Abstract : 2,427/408/377 , AAN Abstract : 8,569/962/2,626 , arXiv Abstract : 884,912/110,614/110,615 for the training / validation / test sets .
Settings .
For fair comparison , we use the same settings as our most related baseline SE - GRN ( Yin et al , 2021 ) for our model and its variants .
Speciﬁcally , we apply 100 - dimensional GloVe word embeddings , and set the sizes of Bi - LSTM hidden states , sentence node states , and entity node states as 512 , 512 and 150 , respectively .
The recurrent step of GRN is 3 .
We empirically set thresholds δmin and δmax as 0.2 and 0.8 , and set η as 20 % , 15 % , 25 % , 15 % , 15 % according to accuracies of initial classiﬁer on validation sets .
Besides , we individually set the coefﬁcient λ ( See Equation 18 in ( Yin et al , 2020 ) ) as 0.5 , 0.5 , 0.2 , 0.4 , 0.5 on the ﬁve datasets .
We adopt Adadelta ( Zeiler , 2012 ) with ( cid:15 ) = 10−6 , ρ = 0.95 and initial learning rate 1.0 as the optimizer .
We employ L2 weight decay with coefﬁcient 10−5 , batch size of 16 and dropout rate of 0.5 .
When constructing our model based on BERT , we use the same settings as ( Cui et al , 2020 ) .
Concretely , we set sizes of hidden states and node states to 768 , the learning rate of BERT as 3e-3 , the batch size as 16 , 32 , 128 , 128 , 64 for the ﬁve datasets .
Baselines .
To demonstrate the effectiveness of our model ( IRSE - GRN ) , we compare it with SEGRN ( Yin et al , 2021 ) .
Besides , we report the performance of following sentence ordering models : 1 ) Pairwise models : Pairwise Model ( Chen et al , 2016 ) , RankTxNet ( Kumar et al , 2020 ) , and BTSort ( Prabhumoye et al , 2020 ) , ConsGraph ( Zhu et al , 2021 ) ; 2 ) Set - to - sequence models : HAN ( Wang and Wan , 2019 ) , LSTM+PtrNet ( Gong et al , 2016 ) , V - LSTM+PtrNet ( Logeswaran et al , 2018 ) , ATTOrderNet ( Cui et al , 2018 ) , TGCM ( Oh et al , 2019 ) , SE - GRN ( Yin et al , 2019 ) , SE - GRN ( Yin et al , 2021 ) , ATTOrderNet+FHDecoder ( Yin et al ,
2412  Model
Pairwise Model ( Chen et al , 2016)† LSTM+PtrNet ( Gong et al , 2016)† V - LSTM+PtrNet ( Logeswaran et al , 2018)† ATTOrderNet ( Cui et
al , 2018)† HAN ( Wang and Wan , 2019)†
SE - GRN ( Yin et al , 2019)†
SE - GRN ( Yin et al , 2021 ) ATTOrderNet+FHDecoder ( Yin et al , 2020)† TGCM
( Oh et al , 2019)† RankTxNet ( Kumar et al , 2020)† B - TSort ( Prabhumoye et al , 2020)† ConsGraph ( Zhu et al , 2021)†
BERSON ( Cui et
al , 2020)† IRSE - GRN IRSE - GRN+FHDecoder IRSE - GRN+BERT+FHDecoder
PMR Acc
PMR Acc
PMR Acc
PMR Acc
NIPS Abstract τ
Acc 50.87 67.00 51.55 72.00 56.09 72.00
AAN Abstract τ 58.20 69.00 58.07 73.00 63.24 73.00
SIND τ 48.42 12.34
ROCStory τ arXiv
Abstract τ
PMR 66.00 33.43 71.58 40.44
64.64 78.00
49.00 14.01 50.00 15.01 52.00 16.22
73.00 42.19 75.00 44.55 57.27 75.00 75.00 44.33 58.25 76.49 25.73 65.06 78.60 44.87 49.58 53.16 17.17 68.96 75.46 42.67 59.07 75.74 44.72 76.54 46.58 58.31 75.00 44.28 77.00 43.44
53.19 17.37 59.43 75.00 31.44 65.16 75.00 36.69 38.71 15.18 53.00 57.00 15.48 61.48 81.00 32.59 69.22 83.00 50.76 52.23 60.00 20.32 58.56 19.07
77.00 39.18
80.29 32.84
75.00 24.13
82.36 49.81
73.00 39.62
76.81 46.00
81.22 49.52
76.00 38.02
73.87 85.00 48.01 78.03 85.00 59.79 58.91 65.00 31.69 82.86 88.00 68.23 75.08 83.00 56.06 63.14 80.45 32.63 68.51 82.09 49.56 51.01 54.97 18.77 71.28 77.43 46.38 70.15 84.22 56.85 73.62 87.45 50.19 77.34 87.87 62.24 54.98 61.87 22.77 77.70 84.20 57.11 74.45 88.57 60.30 78.00 90.35 58.81 82.07 91.11 68.93 59.08 66.14 28.79 83.77 89.09 69.06 78.64 90.30 66.59
Table 1 : Main results on the sentence ordering task , where † indicates previously reported scores .
Please note that RankTxNet , B - TSort and ConsGraph are pairwise models based on BERT , and the previous SOTA BERSON is also based on BERT and equipped with FHDecoder .
2020 ) and BERSON ( Cui et al , 2020 ) .
Furthermore , to examine the compatibility of other technologies with our model , we report the performance of IRSE - GRN equipped with some effective components : 1 ) IRSE - GRN+FHDecoder .
In this variant , we equip our model with FHDecoder ( Yin et al , 2020 ) , where pairwise ordering information is incorporated ; 2 ) IRSEGRN+BERT+FHDecoder .
In addition to FHDecoder , we construct the sentence encoder based on BERT , where the mean - pooling outputs of all learned word representations are used to initialize sentence nodes .
Evaluation Metrics .
Following previous work ( Oh et al , 2019 ; Cui et al , 2020 ; Prabhumoye et al , 2020 ; Zhu et al , 2021 ; Yin et al , 2021 ) , we use the following three metrics : 1 ) Kendall ’s Tau ( τ ): Formally , this metric is calculated as 1(cid:1 ) , where I denotes the 2×(number of inversions)/(cid:0)I 2 sequence length and number of inversions is the number of pairs in the predicted sequence with incorrect relative order ( Lapata , 2003 ) ; 2 ) Perfect Match Ratio ( PMR ): This metric calculates the ratio of samples where the entire sequence is correctly predicted ( Chen et al , 2016 ) ; 3 ) Accuracy ( Acc ): This metric measures the percentage of sentences , whose absolute positions are correctly predicted ( Logeswaran et al , 2018 ) .
5.2 Pairwise Ordering
Since pairwise ordering plays a crucial role in our proposed framework , we ﬁrst compare the performance of different classiﬁers on various datasets .
Table 2 shows the experimental results .
Obviously , the utilization of iterative classiﬁer further beneﬁts
Dataset
Initial Classiﬁer
Initial + Iterative Classiﬁers
NIPS Abstract AAN Abstract SIND ROCstory arXiv Abstract
80.46 % 84.53 % 77.72 % 87.59 % 84.09 %
86.32 % 86.74 % 83.55 % 92.23 % 86.82 %
Table 2 : The accuracies of our two classiﬁers on ﬁve test datasets .
the predictions of pairwise orderings .
5.3 Main Results
Table 1 reports the overall experimental results of sentence ordering .
When incorporating BERT and FHDecoder into IRSE - GRN , our model achieves SOTA performance on most of datasets .
Besides , we arrive at the following conclusions :
First , IRSE - GRN signiﬁcantly surpasses SEGRN on all datasets ( bootstrapping test , p<0.01 ) , indicating that iteratively reﬁning graph representations indeed beneﬁt the ordering of input sentences .
Second , IRSE - GRN+FHDecoder exhibits better performance than IRSE - GRN and all non - BERT baselines , which are shown above the upper dotted line of Table 1 , across datasets in different domains .
Therefore , we conﬁrm that our framework is orthogonal to the current approach exploiting pairwise ordering information for decoder .
Third , when constructing our model based on BERT , IRSE - GRN+BERT+FHDecoder also outperforms all BERT - based baselines , such as ConsGraph , BERSON , achieving SOTA performance .
It can be known that our proposed framework is also effective when combining with pretrained language model .
2413  Model
SIND
arXiv Abstract
head
tail
head
tail
Pairwise Model ( Chen et al , 2016)† 84.85 LSTM+PtrNet ( Gong et al , 2016)† 74.66 53.30 90.47 ATTOrderNet ( Cui et
al , 2018)† 76.00 54.42 91.00 SE - GRN ( Yin et al , 2019)† 78.12 56.68 92.28 SE - GRN ( Yin et al , 2021 ) 79.01 57.27 92.23 ATTOrderNet+FHDecoder ( Yin et al , 2020)† 78.08 57.32 92.76 TGCM ( Oh et al , 2019)† 78.98 56.24 92.46 RankTxNet ( Kumar et al , 2020)† 80.32 59.68 92.97 B - Tsort ( Prabhumoye et al , 2020)† 78.06 58.36 ConsGraph ( Zhu et al , 2021)† 79.80 60.44 BERSON ( Cui et al , 2020)† 84.95 64.87 94.75
IRSE - GRN IRSE - GRN+FHDecoder IRSE - GRN+BERT+FHDecoder
78.62 59.11 94.46 82.87 64.15 96.09 86.21 67.14 98.23
62.37 66.49 68.08 70.45 70.46 71.49 69.45 69.13 76.69
80.97 85.04 88.33
Table 3 : The ratios of correctly predicting ﬁrst and last sentences on arXiv Abstract and SIND .
† indicates previously reported scores .
Model
IRSE - GRN
w/o initial classiﬁer iterative number k=1
w/o iterative classiﬁer w/o noise
ROCStory
arXiv Abstract
Pairwise 92.23 88.96 91.73 87.59 90.42
τ
PMR Pairwise
77.43 46.38 77.31 45.06 77.21 46.13 75.98 44.14 77.06 46.02
86.82 77.90 86.22 84.09 80.45
τ
PMR 84.22 56.85 81.03 51.65 83.89 56.03 83.24 55.05 82.23 53.10
Table 4 : Ablation study on the impacts of our proposed components on ROCStory dataset and arXiv abstract dataset .
datasets .
All results are provided in Table 4 , where we draw the following conclusions :
First , using only iterative classiﬁer ,
IRSEGRN(w / o initial classiﬁer ) performs worse than IRSE - GRN .
This result proves that iterative classiﬁer fails to predict well from scratch and the pairwise ordering predicted by initial classiﬁer is beneﬁcial to construct a well - formed graph representation for iterative classiﬁer .
Second , when the iteration number k is set as 1 , the performance of IRSE - GRN decreases .
Moreover , if we remove iterative classiﬁer , the performance of IRSE - GRN becomes even worse .
Therefore , we conﬁrm that the iterative predictions of pairwise ordering indeed beneﬁt the learning of graph representations .
Finally , the result in the last line indicates that removing noisy weights leads to a signiﬁcant performance drop .
It suggests that the utilization of noisy weights is useful for the training of iterative classiﬁer , which makes our model more robust .
Figure 4 : The Kendall ’s τ of different models with respect to different sentence numbers on the arXiv abstract test set .
Finally , we note that IRSE - GRN+BERT+FHDecoder gains relatively marginal improvement on SIND and ROCStory , and performs worse than BERSON in PMR on SIND .
We speculate that there exist less ss - edges on these two datasets , resulting in that our proposed framework can not achieve its full potential .
Speciﬁcally , average edge numbers of SIND and ROCStory are 2.85 and 5.66 respectively , far fewer than 16.60 , 10.86 and 16.73 on NIPS Abstract , ANN Abstract and arXiv Abstract .
Besides , since it is a challenge to order longer paragraphs , we investigate the Kendall ’s τ of our models and SE - GRN with respect to different sentence numbers , as shown in Figure 4 .
Overall , all models degrade with the increase of sentence number .
However , our model and its two enhanced versions always exhibit better performance than SE - GRN .
5.4 Predictions of the First and Last
Sentences
As mentioned in previous studies ( Gong et al , 2016 ; Chen et al , 2016 ; Cui et al , 2018 ; Oh et al , 2019 ) , the ﬁrst and last sentences are very important in a paragraph .
Following these studies , we compare models by conducting experiments to predict the ﬁrst and last sentences .
As displayed in Table 3 , IRSE - GRN surpasses all non - BERT baselines , and IRSE - GRN+BERT+ FHDecoder wins against BERTSON .
These results are consistent with those reported in Table 1 , further demonstrating the effectiveness of our model .
5.5 Ablation Study
We conduct several experiments to investigate the impacts of our proposed components on ROCstory dataset and arXiv dataset which are the two largest
5.6 Summary Coherence Evaluation
Following previous studies ( Barzilay and Lapata , 2005 ; Nayeem and Chali , 2017 ) , we further in2414  Dataset
SE - GRN
IRSE - GRN
IRSE - GRN+FHDecoder
NIPS abstract AAN abstract SIND ROCStory arXiv abstract
Runtime # Params Runtime 23.9 M 23.9 M 23.9 M 23.9 M 23.9 M 27min57s
6s 31s 1min6s 2min 25min
6.2s 32.5s 1min9s 2min5s
18s
# Params Runtime 24.0 M 24.0 M 1min8s 24.0 M 2min3s 24.0 M 4min2s 46min 24.0 M
# Params 25.0 M 25.0 M 25.0 M 25.0 M 25.0 M
IRSE - GRN+BERT+FHDecoder Runtime 29s 1min20s 2min16s 4min42s 56min
# Params 128.0 M 128.0 M 128.0 M 128.0 M 128.0 M
Table 6 : The runtime on the validation sets and the numbers of parameters for our enhanced models and baseline .
Model
Coherence
SE - GRN ( Yin et al , 2021 )
46.71
59.47
IRSE - GRN IRSE - GRN+FHDecoder IRSE - GRN+BERT+FHDecoder
47.48 49.84 51.01
60.01 61.81 62.87
Table 5 : Coherence probabilities of summaries reordered by different models using weights of 0.8 ( left ) and 0.5 ( right ) .
spect the validity of our proposed framework via multi - document summarization .
Concretely , we train different neural sentence ordering models on a large - scale summarization corpus ( Fabbri et al , 2019 ) , and then individually use them to reorder the small - scale summarization data of DUC2004 ( Task2 ) .
Finally , we use coherence probability proposed by ( Nayeem and Chali , 2017 ) to evaluate the coherence of summaries .
In this group of experiments , we conduct experiments using different weights : 0.5 and 0.8 , as implemented in ( Nayeem and Chali , 2017 ) and ( Yin et al , 2020 ) respectively .
The results are reported in Table 5 .
We can observe that the summaries reordered by IRSE - GRN and its variants achieve higher coherence probabilities than baseline , verifying the effectiveness of our proposed framework in the downstream task .
5.7 Further Experiment Results
To provide more experimental results , we summarize the runtime on the validation sets and the numbers of parameters for our enhanced models and baseline SE - GRN in Table 6 .
6 Conclusion
In this work , we propose a novel sentence ordering framework that makes better use of pairwise orderings for graph - based sentence ordering .
Specifically , we introduce two classiﬁers to iteratively predict pairwise orderings , which are gradually incorporated into the graph as edge weights .
Then , based on this reﬁned graph , we construct a graphbased sentence ordering model .
Experiments on ﬁve datasets demonstrate not only the superiority of our model over baselines , but also the compatibility to other modules utilizing pairwise ordering information .
Moreover , when equipped with BERT and FHDecoder , our enhanced model achieves SOTA performance across datasets .
In the future , we plan to explore more effective GNN for sentence ordering .
In particular , we will improve our model by iteratively merging nodes to reﬁne the graph representation .
Acknowledgment
The project was supported by National Key Research and Development Program of China ( No . 2020AAA0108004 ) , National Natural Science Foundation of China ( No . 61672440 ) , Natural Science Foundation of Fujian Province of China ( No . 2020J06001 ) , and Youth Innovation Fund of Xiamen ( No . 3502Z20206059 ) .
We also thank the reviewers for their insightful comments .
